<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>;function($,undefined) 前面的分号释疑</title>
    <url>/2014/05/04/;function($,undefined)-%E5%89%8D%E9%9D%A2%E7%9A%84%E5%88%86%E5%8F%B7%E9%87%8A%E7%96%91/</url>
    <content><![CDATA[<p>;(function($){$.extend($.fn…</p>
<p>一般在一些 JQuery 函数前面有分号,在前面加分号可以有多种用途:</p>
<p>1、防止多文件集成成一个文件后，高压缩出现语法错误。</p>
<p>2、这是一个匿名函数，一般js库都采用这种自执行的匿名函数来保护内部变量 (function(){})()。</p>
<p>3、因为undefined是window的属性，声明为局部变量之后，在函数中如果再有变量与undefined作比较的话，程序就可以不用搜索undefined到window，可以提高程序性能。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS6.4安装oracle 10g教程</title>
    <url>/2015/11/17/CentOS6-4%E5%AE%89%E8%A3%85oracle-10g%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>##一、硬件要求<br>1、内存 &amp; swap<br>Minimum: 1 GB of RAM<br>Recommended: 2 GB of RAM or more<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118211127_56147.png" alt="硬件要求"></p>
<p>检查内存情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep MemTotal /proc/meminfo</span><br><span class="line">grep SwapTotal /proc/meminfo</span><br></pre></td></tr></table></figure>

<p>2、硬盘<br>由于CentOS安装后差不多有4~5G，再加上Oracle等等的安装，所以请准备至少10G的硬盘空间。<br>检查磁盘情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118211509_28032.jpg" alt="df-h"></p>
<p>##二、软件<br>系统平台：CentOS 6.3(x86_64)<br>CentOS-6.3-x86_64-bin-DVD1.iso<br>Oracle版本：Oracle 10g R2<br>10201_database_linux_x86_64.cpio</p>
<p>##三、系统安装注意<br>系统安装时一定要安装桌面模式，否则无法安装oracle，另外请勿开启SELinux，oracle官方不建议使用SELinux，CentOS 的防火墙也请暂时关闭，减少安装时的困扰。为防止Oracle安装过程中出现乱码，建议使用英文作为系统语言，进行Oracle的安装工作。<br>本文中所描述的系统命令，未经特殊标示，均为“#”代表root权限，“$”代表oracle权限。</p>
<p>##四、安装Oracle前的系统准备工作<br>首先，请先以root账号登入作一些前置设定作业。<br>1、关闭防火墙、禁用SELinux<br>setup<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118211724_11378.jpg" alt="setup"></p>
<p>vi /etc/selinux/config<br>修改SELINUX=disabled，然后重启。<br>如果不想重启系统，使用命令setenforce 0<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118211852_74451.jpg" alt="setenforce"></p>
<p>2、安装依赖包<br>Oracle官方文档要求的安装包：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118212103_24755.jpg" alt="oracle安装依赖包"></p>
<p>查看Oracle相关包是否已经安装：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118212212_30050.jpg" alt="oracle相关包"></p>
<p>用yum方式安装所需的包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install binutils compat-libstdc++-33 compat-libstdc++-33.i686 elfutils-libelf elfutils-libelf-devel gcc gcc-c++ glibc glibc.i686 glibc-common glibc-devel glibc-devel.i686 glibc-headers ksh libaio libaio.i686 libaio-devel libaio-devel.i686 libgcc libgcc.i686 libstdc++ libstdc++.i686 libstdc++-devel make sysstat</span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118212321_10098.jpg" alt="yum"></p>
<p>最后还需要安装libXp这个Library，这个一定要安装，否则安装Oracle时会出现java Exception。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install libXp</span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118212436_33952.jpg" alt="libXp"></p>
<p>3、创建Oracle用户与组<br>在这里只讨论单主机环境，不考虑RAC环境的配置。<br>执行以下指令以新增oracle安装时所需要的使用者与群组。<br>(1) 建立群组oinstall </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd oinstall</span><br></pre></td></tr></table></figure>
<p>(2) 建立群组dba</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd dba</span><br></pre></td></tr></table></figure>
<p>(3) 新增使用者oracle并将其加入oinstall和dba群组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -m -g oinstall -G dba oracle</span><br></pre></td></tr></table></figure>
<p>(4) 测试oracle账号是否建立完成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">id oracle</span><br></pre></td></tr></table></figure>
<p>(5) 建立oracle的新密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd oracle</span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118212623_66655.jpg" alt="passwd"></p>
<p>(6) 建立oracle安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/app/oracle</span><br><span class="line">chown -R oracle:oinstall /home/app/oracle</span><br><span class="line">chmod -R 775 /home/app/oracle</span><br></pre></td></tr></table></figure>
<p>4、将oracle使用者加入到sudo群组中<br>vi /etc/sudoers<br>找到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root        ALL=(ALL)        ALL </span><br></pre></td></tr></table></figure>
<p>这行，并且在底下再加入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">oracle        ALL=(ALL)        ALL</span><br></pre></td></tr></table></figure>
<p>输入wq!（由于这是一份只读文档所以需要再加上!）并且按下Enter<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118213155_30373.jpg" alt="sudo"></p>
<p>5、配置系统内核参数<br>vi /etc/sysctl.conf<br>修改和添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kernel.shmall = 4294967296                           //表示系统一次可以使用的共享内存总量（以页为单位）。缺省值就是2097152，通常不需要修改</span><br><span class="line">kernel.shmmax = 68719476736                      //定义了共享内存段的最大尺寸（以字节为单位）。缺省为32M，对于oracle来说，该缺省值太低了，通常将其设置为2G</span><br><span class="line">kernel.shmmni = 4096                                    //用于设置系统范围内共享内存段的最大数量。该参数的默认值是 4096 。通常不需要更改</span><br><span class="line">kernel.sem = 250 32000 100 128                    //表示设置的信号量</span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65000</span><br><span class="line">net.core.rmem_default=4194304                     //默认的接收窗口大小</span><br><span class="line">net.core.rmem_max=4194304                        //接收窗口的最大大小</span><br><span class="line">net.core.wmem_default=262144                      //默认的发送窗口大小</span><br><span class="line">net.core.wmem_max=262144                         //发送窗口的最大大小</span><br></pre></td></tr></table></figure>
<p>会有一些与目前的参数重复的，就修改成文件上提供的。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118213249_97968.jpg" alt="sysctl"></p>
<p>编辑完之后，储存，然后执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl –p</span><br></pre></td></tr></table></figure>
<p>启用刚刚所做的变更。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118213427_99326.jpg" alt="sysctl-p"></p>
<p>6、编辑/etc/security/limits.conf<br>vi /etc/security/limits.conf<br>添加以下四行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">oracle  soft        nproc   2047</span><br><span class="line">oracle  hard        nproc   16384</span><br><span class="line">oracle  soft        nofile  1024</span><br><span class="line">oracle  hard        nofile  65536</span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118213539_84050.jpg" alt="limits"></p>
<p>7、编辑/etc/pam.d/login<br>vi /etc/pam.d/login<br>添加以下两行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line">session required pam_limits.so</span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118213641_35440.jpg" alt="login"></p>
<p>8、修改/etc/profile<br>vi /etc/profile<br>将以下代码新增到profile档案中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> = <span class="string">&quot;oracle&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$SHELL</span> = <span class="string">&quot;/bin/ksh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">ulimit</span> -p 16384</span><br><span class="line">        <span class="built_in">ulimit</span> -n 65536</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">ulimit</span> -u 16384 -n 65536</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span> </span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118213744_91921.jpg" alt="profile"></p>
<p>9、修改Linux发行版本信息<br>由于Oracle 10g发行的时候，CentOS 6没有发行，所以Oracle 10g并没有对CentOS 6确认支持，需要修改文件让Oracle 10g支持CentOS 6。<br>我们需要手工修改Linux的发行注记，让Oracle 10g支持CentOS 6。<br>编辑/etc/redhat-release文件<br>vi /etc/redhat-release<br>将其中的内容CentOS release 6.3 (Final)修改为redhat 4<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118213909_63963.jpg" alt="redhat-release"></p>
<p>10、创建Oracle安装文件夹以及数据存放文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /opt/oracle</span><br><span class="line">mkdir /opt/oracle/102</span><br><span class="line">chown -R oracle:dba /opt/oracle</span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118214010_35072.jpg" alt="mkdir"></p>
<p>11、配置Linux主机<br>检查/etc/hosts文件中是否有localhost的记录（指向127.0.0.1即可），若没有的话，在后面配置Oracle监听的时候会出现一些问题，导致无法启动监听，在此手工添加此记录即可。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118214213_76672.jpg" alt="配置linux主机"><br>第一阶段到此完毕，接下来，完成这些设定之后，请先注销root账号，并且以oracle账号再次登入系统。</p>
<p>12、配置oracle用户环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/oracle</span><br><span class="line">vi .bash_profile</span><br></pre></td></tr></table></figure>
<p>修改并加入以下內容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ORACLE_BASE=/home/app/oracle</span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=<span class="variable">$ORACLE_BASE</span>/product/10.2.0/db_1</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=pltest02</span><br><span class="line"><span class="built_in">export</span> PATH=.:<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$HOME</span>/bin:<span class="variable">$ORACLE_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/bin:/bin:/usr/bin/X11:/usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$ORACLE_BASE</span>/common/oracle/bin</span><br><span class="line"><span class="built_in">export</span> ORACLE_TERM=xterm</span><br><span class="line"><span class="built_in">export</span> TNS_ADMIN=<span class="variable">$ORACLE_HOME</span>/network/admin</span><br><span class="line"><span class="built_in">export</span> ORA_NLS10=<span class="variable">$ORACLE_HOME</span>/nls/data</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH32=<span class="variable">$ORACLE_HOME</span>/lib32</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$ORACLE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>:<span class="variable">$ORACLE_HOME</span>/oracm/lib</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>:/lib:/usr/lib:/usr/<span class="built_in">local</span>/lib</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$ORACLE_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$&#123;CLASSPATH&#125;</span>:<span class="variable">$ORACLE_HOME</span>/jlib</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$&#123;CLASSPATH&#125;</span>:<span class="variable">$ORACLE_HOME</span>/rdbms/jlib</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$&#123;CLASSPATH&#125;</span>:<span class="variable">$ORACLE_HOME</span>/network/jlib</span><br><span class="line"><span class="built_in">export</span> THREADS_FLAG=native</span><br><span class="line"><span class="built_in">export</span> TEMP=/tmp</span><br><span class="line"><span class="built_in">export</span> TMPDIR=/tmp</span><br><span class="line"><span class="built_in">export</span> NLS_LANG=AMERICAN_AMERICA.ZHS16GBK</span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118214338_80244.jpg" alt="export"></p>
<p>保存后使用如下命令，使设置生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /home/oracle/.bash_profile</span><br></pre></td></tr></table></figure>

<p>##五、安装Oracle，并进行相关设置<br>1、解压缩安装文件<br>将下载的10201_database_linux_x86_64.cpio放至即将安装oracle的文件夹/opt/oracle<br>回到终端模式并且进入到oracle文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/oracle</span><br></pre></td></tr></table></figure>
<p>解压缩10201_database_linux_x86_64.cpio</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cpio -idmv &lt; 10201_database_linux_x86_64.cpio</span><br></pre></td></tr></table></figure>
<p>接着会看到一连串的解压缩动作。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118214635_35567.jpg" alt="解压缩"></p>
<p>解压缩完成会在同一个文件夹中看到database的文件夹，请进入到database文件夹中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> database</span><br></pre></td></tr></table></figure>
<p>准备执行数据库安装，如果你的centos是中文环境，安装时会出现中文乱码，请下以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_US</span><br></pre></td></tr></table></figure>
<p>接着执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./runInstaller</span><br></pre></td></tr></table></figure>
<p>如果无法看到安装界面，请使用root帐户执行如下命令后再运行安装程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> DISPLAY=:0.0 </span><br><span class="line">xhost + </span><br><span class="line">./runInstaller</span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118214735_68730.jpg" alt="runInstatller"></p>
<p>遇到错误：Exception in …… /lib/i386/libawt.so: libXp.so.6: cannot open shared object file: No such file or directory<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118214829_59489.jpg" alt="exception-in"></p>
<p>解决：<br>yum -y install libXp.i686<br>分析：看报错信息”/lib/i386/libawt.so: libXp.so.6: cannot open shared object file: No such file or directory”，libXp需要安装i386的包，而不能安装X64的包。上面认为64位的linux需要安装64位的libXp包，所以导致这个问题。<br>再次执行 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./runInstaller</span><br></pre></td></tr></table></figure>
<p>遇到错误：Exception in …… /lib/i386/libawt.so: libXt.so.6: cannot open shared object file: No such file or directory<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118214942_33265.jpg" alt="exception-in"></p>
<p>解决：<br>yum -y install libXt.i686<br>再次执行 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./runInstaller</span><br></pre></td></tr></table></figure>
<p>遇到错误：Exception in …… /lib/i386/libawt.so: libXtst.so.6: cannot open shared object file: No such file or directory<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118215043_90710.jpg" alt="exception-in"></p>
<p>解决：<br>yum -y install libXtst.i686<br>再次执行 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./runInstaller</span><br></pre></td></tr></table></figure>
<p>开始执行安装程序。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118215145_27087.jpg" alt="安装"></p>
<p>由于相关的前置作业已经在之前做好了，在这个步骤只需要将UNIX DBA Group选择为dba以及输入SYS, SYSTEM等账号共享的database Password即可。然后选择Next即可。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118215315_24196.jpg" alt="安装"></p>
<p>同样的，将群组选择为dba群组，按Next<br>在这个步骤中，请点选Checking Network Configuration requirements为User Verified，接着按下Next<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118215418_91532.png" alt="安装"></p>
<p>最后出现Install Summary画面，此时只要按下Install按钮，系统即开始安装。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118215529_80624.jpg" alt="安装"></p>
<p>安装过程…<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118215624_41287.png" alt="安装"></p>
<p>安装进度大约到65%时会有错误提示：<br>Error in invoking target ‘collector’ of makefile ‘/opt/oracle/102/sysman/lib/ins_emdb.mk’.<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118215719_28070.jpg" alt="安装"></p>
<p>同时oraInventory/logs/目录下的安装日志文件里面会有如下类似错误提示：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118215811_56664.jpg" alt="安装"></p>
<p>这是oracle安装程序的一个bug，可以忽略此错误继续安装，对系统没什么影响。<br>在Configuration Assistants 时会出现错误提示：<br>OUI-25031:Some of the configuration assistants failed.<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118215907_97381.jpg" alt="安装"></p>
<p>分析：主机名映射错误<br>解决：修改/etc/hosts文件，增加IP地址与主机名的映射如下：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118215952_57630.jpg" alt="安装"></p>
<p>接着会遇到错误提示：<br>ORA-27125:unable to create shared memory segment<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118220100_66235.jpg" alt="安装"></p>
<p>解决：</p>
<ol>
<li>确定安装oracle所使用的用户组<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">id oracle</span><br></pre></td></tr></table></figure>
可以看到oracle组dba id 为501。</li>
<li>修改内核参数<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;501&quot;</span> &gt;/proc/sys/vm/hugetlb_shm_group</span><br></pre></td></tr></table></figure>
就可以了。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118220150_52635.jpg" alt="安装"></li>
</ol>
<p>安装到数据库设置助理，可以在这边选取password management作密码的修改，如不需要修改，只需要按下ok按钮即可。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118220251_89589.jpg" alt="安装"></p>
<p>安装完成前，出现以下的设置脚本：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118220351_27433.jpg" alt="安装"></p>
<p>开启一个新的终端，su到root。<br>将要求执行的两段script依序执行。<br>/opt/oracle/oraInventory/orainstRoot.sh<br>/opt/oracle/102/root.sh<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118220426_11212.jpg" alt="安装"></p>
<p>执行画面如上图。<br>执行完后，回到安装窗口按下OK完成所有的oracle安装。安装完成会出现以下画面。安装<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118220520_19858.jpg" alt="安装"></p>
<p>此时，您可以以上述网址，作为测试，登入账号可以为sys或system<br><a href="http://centos-oracle:5560/isqlplus">http://CentOS-Oracle:5560/isqlplus</a><br><a href="http://centos-oracle:5560/isqlplus/dba">http://CentOS-Oracle:5560/isqlplus/dba</a><br><a href="http://centos-oracle:1158/em">http://CentOS-Oracle:1158/em</a><br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151118/20151118220623_26138.jpg" alt="安装"></p>
<p>以上画面都成功代表oracle已经正常安装了。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Converting 7.x modules to 8.x</title>
    <url>/2015/11/02/Converting-7-x-modules-to-8-x/</url>
    <content><![CDATA[<p>本节主要介绍如何把drupal7的模块转化为drupal8。参考资料<a href="https://www.drupal.org/update/modules/7/8">https://www.drupal.org/update/modules/7/8</a></p>
<p>先介绍一个模块drupalmoduleupgrader，他会分析drupal7的模块，并提供升级的指导说明，另外还可以直接升级为drupal8。安装方式也比较简单，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drush dl drupalmoduleupgrader</span><br><span class="line"><span class="built_in">cd</span> modules/drupalmoduleupgrader</span><br><span class="line">composer install               <span class="comment">#安装依赖</span></span><br><span class="line">drush en drupalmoduleupgrader  <span class="comment">#启用此模块</span></span><br></pre></td></tr></table></figure>

<p>###如何分析？<br>cp一个drupal7的模块到drupal8的modules目录下，执行以下命令分析:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drush dmu-analyze hello_world</span><br></pre></td></tr></table></figure>
<p>会释出一个upgrade-info.html的文件，非常详细的标明哪些API需要修改。</p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151102/20151102143425_76787.png" alt="upgrade-info.html"></p>
<p>###如何升级？<br>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drush dmu-upgrade hello_world</span><br></pre></td></tr></table></figure>
<p>会自动释出一个drupal8的版本。</p>
<p>###转换原理？<br>使用了pharborist做代码转换，见<a href="https://github.com/grom358/pharborist">https://github.com/grom358/pharborist</a></p>
<p>怎么样？灰常简单吧！</p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>drupal8</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal apc缓存配置策略</title>
    <url>/2013/12/11/Drupal-apc%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>今天发现在如果开起来 apc缓存。并开启缓存页面（不从数据库拿）,匿名用户会返回500。。。。<br>配置代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conf</span>[<span class="string">&#x27;page_cache_without_database&#x27;</span>] = <span class="literal">TRUE</span>;</span><br></pre></td></tr></table></figure>

<p>通过追踪代码，发现drupal针对匿名用户并没有设置缓存。那用apc缓存了当然会有问题，修改代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="variable">$conf</span>[<span class="string">&#x27;cache_backends&#x27;</span>] = <span class="keyword">array</span>(<span class="string">&#x27;sites/all/modules/apc/drupal_apc_cache.inc&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Use APC by default (cache everything.)</span></span><br><span class="line">    <span class="variable">$conf</span>[<span class="string">&#x27;cache_default_class&#x27;</span>] = <span class="string">&#x27;DrupalAPCCache&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// Page cache without database and module hooks (approx twice as fast.)</span></span><br><span class="line">      <span class="variable">$conf</span>[<span class="string">&#x27;page_cache_invoke_hooks&#x27;</span>] = <span class="literal">FALSE</span>;</span><br><span class="line">      <span class="variable">$conf</span>[<span class="string">&#x27;page_cache_without_database&#x27;</span>] = <span class="literal">TRUE</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Use APC for &quot;cache&quot; and &quot;bootstrap&quot; only.</span></span><br><span class="line">    <span class="variable">$conf</span>[<span class="string">&#x27;cache_class_cache&#x27;</span>] = <span class="string">&#x27;DrupalAPCCache&#x27;</span>;</span><br><span class="line">    <span class="variable">$conf</span>[<span class="string">&#x27;cache_class_cache_bootstrap&#x27;</span>] = <span class="string">&#x27;DrupalAPCCache&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>问题解决. </p>
]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>apc</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal code review</title>
    <url>/2016/05/24/Drupal-code-review/</url>
    <content><![CDATA[<p>如何你的模块已经在线上，比如github或者Drupal的git仓库，可以使用在线的<a href="http://pareview.sh/">pareview.sh</a>工具。</p>
<p>###1、安装composer</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -sS https://getcomposer.org/installer | php</span><br><span class="line">$ mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br></pre></td></tr></table></figure>

<p>###2、安装Coder (reference: <a href="https://www.drupal.org/node/1419988#coder-composer">https://www.drupal.org/node/1419988#coder-composer</a>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer global require drupal/coder</span><br><span class="line">$ sudo ln -s ~/.composer/vendor/bin/phpcs /usr/<span class="built_in">local</span>/bin</span><br><span class="line">$ sudo ln -s ~/.composer/vendor/bin/phpcbf /usr/<span class="built_in">local</span>/bin</span><br><span class="line">$ phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer</span><br></pre></td></tr></table></figure>

<p>###3、安装codespell (reference: <a href="https://github.com/lucasdemarchi/codespell">https://github.com/lucasdemarchi/codespell</a>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get help2man -y</span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/lucasdemarchi/codespell.git</span><br><span class="line">$ <span class="built_in">cd</span> codespell &amp;&amp; sudo make install</span><br><span class="line">$ sudo cp codespell /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure>

<p>注：MAC下安装codespell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>

<p>###4、安装DrupalSecure (reference: <a href="https://www.drupal.org/sandbox/coltrane/1921926">https://www.drupal.org/sandbox/coltrane/1921926</a>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get install php-pear</span><br><span class="line">$ sudo pear install PHP_CodeSniffer</span><br><span class="line">$ <span class="built_in">cd</span> $(pear config-get php_dir)/PHP/CodeSniffer/Standards/</span><br><span class="line">$ git <span class="built_in">clone</span> git://git.drupal.org/sandbox/coltrane/1921926.git secure_cs</span><br><span class="line">$ sudo ln -sv ./secure_cs/DrupalSecure ./DrupalSecure</span><br></pre></td></tr></table></figure>

<p>注：MAC下安装php-pear</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://pear.php.net/go-pear.phar</span><br><span class="line">php go-pear.phar</span><br></pre></td></tr></table></figure>

<p>###5、安装ESLint</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g eslint</span><br></pre></td></tr></table></figure>

<p>在Ubuntu precise （12.04）, 你有可能会遇到以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm http GET https://registry.npmjs.org/</span><br><span class="line">npm ERR! Error: failed to fetch from registry: </span><br><span class="line">This is because the version supplied by Ubuntu 12.04 is no longer supported, updating node (and npm with it) resolved the issue.</span><br></pre></td></tr></table></figure>

<p>首先, 卸载nodejs版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge nodejs npm</span><br></pre></td></tr></table></figure>

<p>启用nodesource’s仓库并进行安装:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup | sudo bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line">$ sudo apt-get install nodejs</span><br><span class="line">$ eslint --init <span class="comment"># run for the first time</span></span><br></pre></td></tr></table></figure>

<p>###6、安装pareviewsh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">$ sudo wget http://ftp.drupal.org/files/projects/pareviewsh-7.x-1.7.tar.gz</span><br><span class="line">$ sudo tar xzf pareviewsh-7.x-1.7.tar.gz</span><br><span class="line">$ sudo ln -s /usr/<span class="built_in">local</span>/src/pareviewsh/pareview.sh /usr/<span class="built_in">local</span>/bin/pareviewsh</span><br></pre></td></tr></table></figure>

<p>查看pareview是否已经安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pareviewsh /path/to/module or /path/to/git-repos.git</span><br></pre></td></tr></table></figure>
<p>phpcs自动修复代码标准</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">phpcbf --standard=Drupal --extensions=php,module,inc,install,<span class="built_in">test</span>,profile,theme,js,css,info,txt,md /file/to/drupal/example_module</span><br></pre></td></tr></table></figure>

<p>在~/.bash_profile中添加别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Check Drupal coding standards</span><br><span class="line"><span class="built_in">alias</span> drupalcs=<span class="string">&quot;phpcs --standard=Drupal --extensions=&#x27;php,module,inc,install,test,profile,theme,js,css,info,txt,md&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line">// Check Drupal best practices</span><br><span class="line"><span class="built_in">alias</span> drupalpractice=<span class="string">&quot;phpcs --standard=DrupalPractice --extensions=&#x27;php,module,inc,install,test,profile,theme,js,css,info,txt,md&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line">// Automatically fix coding standards</span><br><span class="line"><span class="built_in">alias</span> drupalcbf=<span class="string">&quot;phpcbf --standard=Drupal --extensions=&#x27;php,module,inc,install,test,profile,theme,js,css,info,txt,md&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<p>参照文章：<br>1、<a href="https://www.drupal.org/node/1587138">https://www.drupal.org/node/1587138</a><br>2、<a href="https://www.drupal.org/node/1419988">https://www.drupal.org/node/1419988</a><br>3、<a href="https://www.drupal.org/node/172169">https://www.drupal.org/node/172169</a><br>4、<a href="https://www.drupal.org/project/pareviewsh">https://www.drupal.org/project/pareviewsh</a><br>5、<a href="https://www.drupal.org/project/coder">https://www.drupal.org/project/coder</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>code_review</tag>
      </tags>
  </entry>
  <entry>
    <title>drupal7 WEB性能优化</title>
    <url>/2015/08/17/Drupal7-WEB%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<ul>
<li>一、DNS prefetch</li>
</ul>
<p>DNS 作为互联网的基础协议，其解析的速度似乎容易被网站优化人员忽视。现在浏览器厂商已经有在针对 DNS 进行优化，典型的一次 DNS 解析耗费 20-120 毫秒，减少 DNS 解析数是个优化的方式，而能够缩减 DNS 解析的时间也是有经济效益的事情。这就是浏览器厂商重视 DNS Prefetching 的主要原因。DNS Prefetching 对于性能的收益可以简单的用”DNS 同步请求到异步”来解释，也就是具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能减少用户的等待时间，提升用户体验。</p>
<p>Google Chrome 内置就有 DNS Prefetching 技术 ，而 Firefox 3.5 也引入了这一 新特性。至于 IE，貌似还未支持。</p>
<p>Drupal如何起dns prefetch呢? 先上一段代码.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hook_html_head_alter()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">themename_html_head_alter</span>(<span class="params">&amp;<span class="variable">$header</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Enable prefetching.</span></span><br><span class="line">  <span class="variable">$header</span>[<span class="string">&#x27;dns_prefetch_control&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;html_tag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#tag&#x27;</span> =&gt; <span class="string">&#x27;meta&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#attributes&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;http-equiv&#x27;</span> =&gt; <span class="string">&#x27;x-dns-prefetch-control&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;on&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;#weight&#x27;</span> =&gt; -<span class="number">10001</span>,</span><br><span class="line">  );  </span><br><span class="line">  </span><br><span class="line">  <span class="variable">$dns_prefetch_domains</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;www.google.cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;www.baidu.com&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">foreach</span> (<span class="variable">$dns_prefetch_domains</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$header</span>[<span class="string">&#x27;dns_prefetch_control_&#x27;</span> . <span class="variable">$key</span>] = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;html_tag&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;#tag&#x27;</span> =&gt; <span class="string">&#x27;link&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;#attributes&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;rel&#x27;</span> =&gt; <span class="string">&#x27;dns-prefetch&#x27;</span>, <span class="string">&#x27;href&#x27;</span> =&gt; <span class="string">&#x27;//&#x27;</span> . drupal_strip_dangerous_protocols(trim(<span class="variable">$value</span>))),</span><br><span class="line">    );     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开浏览器，就可以看到如下的输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;meta content=<span class="string">&quot;on&quot;</span> http-equiv=<span class="string">&quot;x-dns-prefetch-control&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;//www.google.cn&quot;</span> rel=<span class="string">&quot;dns-prefetch&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;//www.baidu.com&quot;</span> rel=<span class="string">&quot;dns-prefetch&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>二、启用压缩<br>压缩的目的是让传输的数据变得更小。我们的线上代码（JS、CSS 和 HTML）都会做压缩，图片也会做压缩（PNGOUT、Pngcrush、JpegOptim、Gifsicle 等）。对于文本文件，在服务端发送响应之前进行 GZip 压缩也很重要，通常压缩后的文本大小会减小到原来的 1/4 - 1/3。对代码进行内容压缩已经有成熟的工具和标准流程了，而服务端的 GZip 更是标配，所以「压缩」是一项收益投入比很高的优化手段。</li>
</ul>
<ul>
<li><p>三、使用 HTTP 缓存<br>任何一个 WEB 项目，要提高性能，各个环节的缓存必不可少。利用好 HTTP 协议的缓存机制，可以大幅减少传输数据，减少请求，这又是一项收益投入比超高的优化手段。这里把之前我写的 HTTP/1.1 缓存机制介绍翻出来：<br>首先，服务端可以通过响应头里的 Last-Modified（最后修改时间） 或者 ETag（内容特征） 标记实体。浏览器会存下这些标记，并在下次请求时带上 If-Modified-Since: 上次 Last-Modified 的内容 或 If-None-Match: 上次 ETag 的内容，询问服务端资源是否过期。如果服务端发现并没有过期，直接返回一个状态码为 304、正文为空的响应，告知浏览器使用本地缓存；如果资源有更新，服务端返回状态码 200、新的 Last-Modified、Etag 和正文。这个过程被称之为 HTTP 的协商缓存，通常也叫做弱缓存。<br>可以看到协商缓存并不会节省连接数，但是在缓存生效时，会大幅减小传输内容（304 响应没有正文，一般只有几百字节）。另外为什么有两个响应头都可以用来实现协商缓存呢？这是因为一开始用的 Last-Modified 有两个问题：1）只能精确到秒，1 秒内的多次变化反映不出来；2）时间采用绝对值，如果服务端 / 客户端时间不对都可能导致缓存失效。HTTP/1.1 并没有规定 ETag 的生成规则，而一般实现者都是对资源内容做摘要，能解决前面两个问题。<br>另外一种缓存机制是服务端通过响应头告诉浏览器，在什么时间之前（Expires）或在多长时间之内（Cache-Control: Max-age=xxx），不要再请求服务器了。这个机制我们通常称之为 HTTP 的强缓存。<br>一旦资源命中强缓存规则后，再次访问完全没有 HTTP 请求（Chrome 开发者工具的 Network 面板依然会显示请求，但是会注明 from cache；Firefox 的 firebug 也类似，会注明 BFCache），这会大幅提升性能。所以我们一般会对 CSS、JS、图片等资源使用强缓存，而入口文件（HTML）一般使用协商缓存或不缓存，这样可以通过修改入口文件中对强缓存资源的引入 URL 来达到即时更新的目的。<br>这里也解释下为什么有了 Expire，还要有 Cache-Control。也有两个原因：1）Cache-Control 功能更强大，对缓存的控制能力更强；2）Cache-Control 采用的 max-age 是相对时间，不受服务端 / 客户端时间不对的影响。<br>另外关于浏览器的刷新（F5 / cmd + r）和强刷（Ctrl + F5 / shift + cmd +r）：普通刷新会使用协商缓存，忽略强缓存；强刷会忽略浏览器所有缓存（并且请求头会携带 Cache-Control:no-cache 和 Pragma:no-cache，用来通知所有中间节点忽略缓存）。只有从地址栏或收藏夹输入网址、点击链接等情况下，浏览器才会使用强缓存。</p>
</li>
<li><p>四、使用HTTP2<br>1、HTTP/2 的 Server Push 机制，可以让重要的 JS、CSS 等资源尽快加载，从而不再需要 HTTP/1 中「将重要资源内联在页面头部」的优化方案了。</p>
<p>2、HTTP/2 支持了多路复用，HTTP 连接变得十分廉价，之前为了节省连接数所采用的类似于「资源合并、资源内联」等优化手段不再需要了。多路复用可以在一个 TCP 连接上建立大量 HTTP 连接，也就不存在 HTTP 连接数限制了，HTTP/1 中常见的「静态域名」优化策略不但用不上了，还会带来负面影响，需要去掉。另外，HTTP/2 的头部压缩功能也能大幅减少 HTTP 协议头部带来的开销。</p>
</li>
<li><p>五、使用CDN<br>  国内比较好的CDN服务商如VeryCloud等。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>WEB性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>drupal7生产环境的一些配置</title>
    <url>/2015/03/21/Drupal7%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>由于经常需要配置，这里主要是做一个梳理和整理，免得以后忘记</p>
<p>1、缓存设置，见文章</p>
<pre><code><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//176code.com/tags/apc/</span></span><br></pre></td></tr></table></figure>
</code></pre>
<p>2、如果站点启用了https，必须在settings.php里做如下设置，不然会导致session问题</p>
<pre><code><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conf</span>[<span class="string">&#x27;https&#x27;</span>] = <span class="literal">TRUE</span>;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>3、如果需要去除所有的报错，则在settings.php里做如下设置 </p>
<pre><code><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conf</span>[<span class="string">&#x27;error_level&#x27;</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>4、php.ini设置 date.timezone = Asia/Chongqing</p>
<p>5、解决跨域问题,在.htaccess里添加如下代码<br>    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Header set Access-Control-Allow-Origin <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>drupal7配置</tag>
      </tags>
  </entry>
  <entry>
    <title>drupal7表单提交时出现非法选项解决方案</title>
    <url>/2014/01/20/Drupal7%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E6%97%B6%E5%87%BA%E7%8E%B0%E9%9D%9E%E6%B3%95%E9%80%89%E9%A1%B9%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>有的使用ajax操作表单时，提交时会出现“在请选择xxx元素中的非法选项1。(An illegal choice has been detected ajax call!)”，解决办法很简单，如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">form[<span class="string">&#x27;my_dynamic_select&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">  … </span><br><span class="line">  <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;select&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#validated&#x27;</span> =&gt; <span class="literal">TRUE</span>, <span class="comment">// 表单元素添加该行即可。</span></span><br><span class="line">  …</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>为什么要加’#validated’ =&gt; TRUE呢？<br>由于我们使用ajax取得的值，页面加载时并不存在，Drupal会认为这个值时非法的。所以我们要重置表单验证项永远为真，即可完美解决此问题。</p>
]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>drupal7表单</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8 Content Entity</title>
    <url>/2015/12/22/Drupal8-Content-Entity/</url>
    <content><![CDATA[<p>这篇文章是<a href="http://verynull.com/2015/12/21/Drupal8-configuration-Entity/">Drupal8-configuration-Entity</a>的姊妹篇。主要介绍如何创建内容实体，并在界面上管理。</p>
<p>content entity最大的优势在于可自定义字段。</p>
<p>本文github：<a href="https://github.com/RamboLau/drupal8-demos/tree/master/content_entity_example">https://github.com/RamboLau/drupal8-demos/tree/master/content_entity_example</a></p>
<p>###一、创建模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir content_entity_example</span><br><span class="line"></span><br><span class="line">touch content_entity_example.info.yml</span><br></pre></td></tr></table></figure>

<p>编辑内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: content_entity_example</span><br><span class="line"><span class="built_in">type</span>: module</span><br><span class="line">description: Provides ContentEntityExampleOnlineMessage entity.</span><br><span class="line">core: 8.x</span><br><span class="line">package: Other</span><br></pre></td></tr></table></figure>

<p>###二、content_entity_example.routing.yml</p>
<p>编辑内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># OnlineMessage routing definition</span></span><br><span class="line">entity.online_message.canonical:</span><br><span class="line">  path: <span class="string">&#x27;/admin/structure/online_message/&#123;online_message&#125;&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _entity_view: <span class="string">&#x27;online_message&#x27;</span></span><br><span class="line">    _title: <span class="string">&#x27;Online message&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _entity_access: <span class="string">&#x27;online_message.view&#x27;</span></span><br><span class="line">  options:</span><br><span class="line">    _admin_route: TRUE</span><br><span class="line"></span><br><span class="line">entity.online_message.collection:</span><br><span class="line">  path: <span class="string">&#x27;/admin/structure/online_message&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _entity_list: <span class="string">&#x27;online_message&#x27;</span></span><br><span class="line">    _title: <span class="string">&#x27;Online message list&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;view online message entities&#x27;</span></span><br><span class="line">  options:</span><br><span class="line">    _admin_route: TRUE</span><br><span class="line"></span><br><span class="line">entity.online_message.add_form:</span><br><span class="line">  path: <span class="string">&#x27;/admin/structure/online_message/add&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _entity_form: online_message.add</span><br><span class="line">    _title: <span class="string">&#x27;Add Online message&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;add online message entities&#x27;</span></span><br><span class="line">  options:</span><br><span class="line">    _admin_route: TRUE</span><br><span class="line"></span><br><span class="line">entity.online_message.edit_form:</span><br><span class="line">  path: <span class="string">&#x27;/admin/structure/online_message/&#123;online_message&#125;/edit&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _entity_form: online_message.edit</span><br><span class="line">    _title: <span class="string">&#x27;Edit Online message&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;edit online message entities&#x27;</span></span><br><span class="line">  options:</span><br><span class="line">    _admin_route: TRUE</span><br><span class="line"></span><br><span class="line">entity.online_message.delete_form:</span><br><span class="line">  path: <span class="string">&#x27;/admin/structure/online_message/&#123;online_message&#125;/delete&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _entity_form: online_message.delete</span><br><span class="line">    _title: <span class="string">&#x27;Delete Online message&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;delete online message entities&#x27;</span></span><br><span class="line">  options:</span><br><span class="line">    _admin_route: TRUE</span><br><span class="line"></span><br><span class="line">online_message.settings:</span><br><span class="line">  path: <span class="string">&#x27;/admin/structure/online_message/settings&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">   _form: <span class="string">&#x27;\Drupal\content_entity_example\Form\OnlineMessageSettingsForm&#x27;</span></span><br><span class="line">   _title: <span class="string">&#x27;Online message settings&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;administer online message entities&#x27;</span></span><br><span class="line">  options:</span><br><span class="line">    _admin_route: TRUE</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>###三、content_entity_example.links.menu.yml</p>
<p>编辑内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Online message menu items definition</span></span><br><span class="line">entity.online_message.collection:</span><br><span class="line">  title: <span class="string">&#x27;Online message list&#x27;</span></span><br><span class="line">  route_name: entity.online_message.collection</span><br><span class="line">  description: <span class="string">&#x27;List Online message entities&#x27;</span></span><br><span class="line">  parent: system.admin_structure</span><br><span class="line">  weight: 100</span><br><span class="line"></span><br><span class="line">online_message.admin.structure.settings:</span><br><span class="line">  title: Online message settings</span><br><span class="line">  description: <span class="string">&#x27;Configure Online message entities&#x27;</span></span><br><span class="line">  route_name: online_message.settings</span><br><span class="line">  parent: system.admin_structure</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223140428_47031.png" alt="menu"></p>
<p>###四、content_entity_example.links.action.yml</p>
<p>编辑内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">entity.online_message.add_form:</span><br><span class="line">  route_name: entity.online_message.add_form</span><br><span class="line">  title: <span class="string">&#x27;Add Online message&#x27;</span></span><br><span class="line">  appears_on:</span><br><span class="line">    - entity.online_message.collection</span><br><span class="line">    - entity.online_message.canonical</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223140610_19940.png" alt="action"></p>
<p>###五、content_entity_example.links.task.yml</p>
<p>编辑内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Online message routing definition</span></span><br><span class="line">online_message.settings_tab:</span><br><span class="line">  route_name: online_message.settings</span><br><span class="line">  title: <span class="string">&#x27;Settings&#x27;</span></span><br><span class="line">  base_route: online_message.settings</span><br><span class="line">entity.online_message.canonical:</span><br><span class="line">  route_name: entity.online_message.canonical</span><br><span class="line">  base_route: entity.online_message.canonical</span><br><span class="line">  title: <span class="string">&#x27;View&#x27;</span></span><br><span class="line"></span><br><span class="line">entity.online_message.edit_form:</span><br><span class="line">  route_name: entity.online_message.edit_form</span><br><span class="line">  base_route: entity.online_message.canonical</span><br><span class="line">  title: Edit</span><br><span class="line"></span><br><span class="line">entity.online_message.delete_form:</span><br><span class="line">  route_name:  entity.online_message.delete_form</span><br><span class="line">  base_route:  entity.online_message.canonical</span><br><span class="line">  title: Delete</span><br><span class="line">  weight: 10</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>###六、Entity类</p>
<p>####1、src/OnlineMessageInterface.php</p>
<p>注：通过EntityOwnerInterface接口可获取其他的一些函数，如</p>
<p>编辑内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\content_entity_example\OnlineMessageInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">content_entity_example</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">ContentEntityInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityChangedInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityTypeInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">user</span>\<span class="title">EntityOwnerInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides an interface for defining Online message entities.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ingroup</span> content_entity_example</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OnlineMessageInterface</span> <span class="keyword">extends</span> <span class="title">ContentEntityInterface</span>, <span class="title">EntityChangedInterface</span>, <span class="title">EntityOwnerInterface</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Add get/set methods for your configuration properties here.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Gets the Online message name.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">   *   Name of the Online message.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Sets the Online message name.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment">   *   The Online message name.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> \Drupal\content_entity_example\OnlineMessageInterface</span></span><br><span class="line"><span class="comment">   *   The called Online message entity.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="variable">$name</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Gets the Online message creation timestamp.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">   *   Creation timestamp of the Online message.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCreatedTime</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Sets the Online message creation timestamp.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> int $timestamp</span></span><br><span class="line"><span class="comment">   *   The Online message creation timestamp.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> \Drupal\content_entity_example\OnlineMessageInterface</span></span><br><span class="line"><span class="comment">   *   The called Online message entity.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCreatedTime</span>(<span class="params"><span class="variable">$timestamp</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the Online message published status indicator.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Unpublished Online message are only visible to restricted users.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">   *   TRUE if the Online message is published.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isPublished</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Sets the published status of a Online message.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> bool $published</span></span><br><span class="line"><span class="comment">   *   TRUE to set this Online message to published, FALSE to set it to unpublished.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> \Drupal\content_entity_example\OnlineMessageInterface</span></span><br><span class="line"><span class="comment">   *   The called Online message entity.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPublished</span>(<span class="params"><span class="variable">$published</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>####2、src/Entity/OnlineMessage.php</p>
<p>编辑内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\content_entity_example\Entity\OnlineMessage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">content_entity_example</span>\<span class="title">Entity</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityStorageInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Field</span>\<span class="title">BaseFieldDefinition</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">ContentEntityBase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityChangedTrait</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityTypeInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">content_entity_example</span>\<span class="title">OnlineMessageInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">user</span>\<span class="title">UserInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines the Online message entity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ingroup</span> content_entity_example</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ContentEntityType</span>(</span></span><br><span class="line"><span class="comment"> *   id = &quot;online_message&quot;,</span></span><br><span class="line"><span class="comment"> *   label = <span class="doctag">@Translation</span>(&quot;Online message&quot;),</span></span><br><span class="line"><span class="comment"> *   handlers = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;view_builder&quot; = &quot;Drupal\Core\Entity\EntityViewBuilder&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;list_builder&quot; = &quot;Drupal\content_entity_example\OnlineMessageListBuilder&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;views_data&quot; = &quot;Drupal\content_entity_example\Entity\OnlineMessageViewsData&quot;,</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     &quot;form&quot; = &#123;</span></span><br><span class="line"><span class="comment"> *       &quot;default&quot; = &quot;Drupal\content_entity_example\Form\OnlineMessageForm&quot;,</span></span><br><span class="line"><span class="comment"> *       &quot;add&quot; = &quot;Drupal\content_entity_example\Form\OnlineMessageForm&quot;,</span></span><br><span class="line"><span class="comment"> *       &quot;edit&quot; = &quot;Drupal\content_entity_example\Form\OnlineMessageForm&quot;,</span></span><br><span class="line"><span class="comment"> *       &quot;delete&quot; = &quot;Drupal\content_entity_example\Form\OnlineMessageDeleteForm&quot;,</span></span><br><span class="line"><span class="comment"> *     &#125;,</span></span><br><span class="line"><span class="comment"> *     &quot;access&quot; = &quot;Drupal\content_entity_example\OnlineMessageAccessControlHandler&quot;,</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   base_table = &quot;online_message&quot;,</span></span><br><span class="line"><span class="comment"> *   admin_permission = &quot;administer OnlineMessage entities&quot;,</span></span><br><span class="line"><span class="comment"> *   entity_keys = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;id&quot; = &quot;id&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;label&quot; = &quot;name&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;uuid&quot; = &quot;uuid&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;uid&quot; = &quot;user_id&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;langcode&quot; = &quot;langcode&quot;,</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   links = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;canonical&quot; = &quot;/admin/online_message/&#123;online_message&#125;&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;edit-form&quot; = &quot;/admin/online_message/&#123;online_message&#125;/edit&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;delete-form&quot; = &quot;/admin/online_message/&#123;online_message&#125;/delete&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   field_ui_base_route = &quot;online_message.settings&quot;</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnlineMessage</span> <span class="keyword">extends</span> <span class="title">ContentEntityBase</span> <span class="keyword">implements</span> <span class="title">OnlineMessageInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">use</span> <span class="title">EntityChangedTrait</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">preCreate</span>(<span class="params">EntityStorageInterface <span class="variable">$storage_controller</span>, <span class="keyword">array</span> &amp;<span class="variable">$values</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::preCreate(<span class="variable">$storage_controller</span>, <span class="variable">$values</span>);</span><br><span class="line">    <span class="variable">$values</span> += <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;user_id&#x27;</span> =&gt; \Drupal::currentUser()-&gt;id(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="string">&#x27;name&#x27;</span>)-&gt;value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;set(<span class="string">&#x27;name&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCreatedTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="string">&#x27;created&#x27;</span>)-&gt;value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCreatedTime</span>(<span class="params"><span class="variable">$timestamp</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;set(<span class="string">&#x27;created&#x27;</span>, <span class="variable">$timestamp</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOwner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="string">&#x27;user_id&#x27;</span>)-&gt;entity;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOwnerId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="string">&#x27;user_id&#x27;</span>)-&gt;target_id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setOwnerId</span>(<span class="params"><span class="variable">$uid</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;set(<span class="string">&#x27;user_id&#x27;</span>, <span class="variable">$uid</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setOwner</span>(<span class="params">UserInterface <span class="variable">$account</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;set(<span class="string">&#x27;user_id&#x27;</span>, <span class="variable">$account</span>-&gt;id());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isPublished</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">bool</span>) <span class="keyword">$this</span>-&gt;getEntityKey(<span class="string">&#x27;status&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPublished</span>(<span class="params"><span class="variable">$published</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;set(<span class="string">&#x27;status&#x27;</span>, <span class="variable">$published</span> ? NODE_PUBLISHED : NODE_NOT_PUBLISHED);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">baseFieldDefinitions</span>(<span class="params">EntityTypeInterface <span class="variable">$entity_type</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$fields</span>[<span class="string">&#x27;id&#x27;</span>] = BaseFieldDefinition::create(<span class="string">&#x27;integer&#x27;</span>)</span><br><span class="line">      -&gt;setLabel(t(<span class="string">&#x27;ID&#x27;</span>))</span><br><span class="line">      -&gt;setDescription(t(<span class="string">&#x27;The ID of the Online message entity.&#x27;</span>))</span><br><span class="line">      -&gt;setReadOnly(<span class="literal">TRUE</span>);</span><br><span class="line">    <span class="variable">$fields</span>[<span class="string">&#x27;uuid&#x27;</span>] = BaseFieldDefinition::create(<span class="string">&#x27;uuid&#x27;</span>)</span><br><span class="line">      -&gt;setLabel(t(<span class="string">&#x27;UUID&#x27;</span>))</span><br><span class="line">      -&gt;setDescription(t(<span class="string">&#x27;The UUID of the Online message entity.&#x27;</span>))</span><br><span class="line">      -&gt;setReadOnly(<span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fields</span>[<span class="string">&#x27;user_id&#x27;</span>] = BaseFieldDefinition::create(<span class="string">&#x27;entity_reference&#x27;</span>)</span><br><span class="line">      -&gt;setLabel(t(<span class="string">&#x27;Authored by&#x27;</span>))</span><br><span class="line">      -&gt;setDescription(t(<span class="string">&#x27;The user ID of author of the Online message entity.&#x27;</span>))</span><br><span class="line">      -&gt;setRevisionable(<span class="literal">TRUE</span>)</span><br><span class="line">      -&gt;setSetting(<span class="string">&#x27;target_type&#x27;</span>, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">      -&gt;setSetting(<span class="string">&#x27;handler&#x27;</span>, <span class="string">&#x27;default&#x27;</span>)</span><br><span class="line">      -&gt;setDefaultValueCallback(<span class="string">&#x27;Drupal\node\Entity\Node::getCurrentUserId&#x27;</span>)</span><br><span class="line">      -&gt;setTranslatable(<span class="literal">TRUE</span>)</span><br><span class="line">      -&gt;setDisplayOptions(<span class="string">&#x27;view&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span> =&gt; <span class="string">&#x27;hidden&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;weight&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">      ))</span><br><span class="line">      -&gt;setDisplayOptions(<span class="string">&#x27;form&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;entity_reference_autocomplete&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;weight&#x27;</span> =&gt; <span class="number">5</span>,</span><br><span class="line">        <span class="string">&#x27;settings&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">          <span class="string">&#x27;match_operator&#x27;</span> =&gt; <span class="string">&#x27;CONTAINS&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;size&#x27;</span> =&gt; <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;autocomplete_type&#x27;</span> =&gt; <span class="string">&#x27;tags&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;placeholder&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        ),</span><br><span class="line">      ))</span><br><span class="line">      -&gt;setDisplayConfigurable(<span class="string">&#x27;form&#x27;</span>, <span class="literal">TRUE</span>)</span><br><span class="line">      -&gt;setDisplayConfigurable(<span class="string">&#x27;view&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fields</span>[<span class="string">&#x27;name&#x27;</span>] = BaseFieldDefinition::create(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">      -&gt;setLabel(t(<span class="string">&#x27;Name&#x27;</span>))</span><br><span class="line">      -&gt;setDescription(t(<span class="string">&#x27;The name of the Online message entity.&#x27;</span>))</span><br><span class="line">      -&gt;setSettings(<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;max_length&#x27;</span> =&gt; <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;text_processing&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">      ))</span><br><span class="line">      -&gt;setDefaultValue(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      -&gt;setDisplayOptions(<span class="string">&#x27;view&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span> =&gt; <span class="string">&#x27;above&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;weight&#x27;</span> =&gt; -<span class="number">4</span>,</span><br><span class="line">      ))</span><br><span class="line">      -&gt;setDisplayOptions(<span class="string">&#x27;form&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;string_textfield&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;weight&#x27;</span> =&gt; -<span class="number">4</span>,</span><br><span class="line">      ))</span><br><span class="line">      -&gt;setDisplayConfigurable(<span class="string">&#x27;form&#x27;</span>, <span class="literal">TRUE</span>)</span><br><span class="line">      -&gt;setDisplayConfigurable(<span class="string">&#x27;view&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fields</span>[<span class="string">&#x27;status&#x27;</span>] = BaseFieldDefinition::create(<span class="string">&#x27;boolean&#x27;</span>)</span><br><span class="line">      -&gt;setLabel(t(<span class="string">&#x27;Publishing status&#x27;</span>))</span><br><span class="line">      -&gt;setDescription(t(<span class="string">&#x27;A boolean indicating whether the Online message is published.&#x27;</span>))</span><br><span class="line">      -&gt;setDefaultValue(<span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fields</span>[<span class="string">&#x27;langcode&#x27;</span>] = BaseFieldDefinition::create(<span class="string">&#x27;language&#x27;</span>)</span><br><span class="line">      -&gt;setLabel(t(<span class="string">&#x27;Language code&#x27;</span>))</span><br><span class="line">      -&gt;setDescription(t(<span class="string">&#x27;The language code for the Online message entity.&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fields</span>[<span class="string">&#x27;created&#x27;</span>] = BaseFieldDefinition::create(<span class="string">&#x27;created&#x27;</span>)</span><br><span class="line">      -&gt;setLabel(t(<span class="string">&#x27;Created&#x27;</span>))</span><br><span class="line">      -&gt;setDescription(t(<span class="string">&#x27;The time that the entity was created.&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fields</span>[<span class="string">&#x27;changed&#x27;</span>] = BaseFieldDefinition::create(<span class="string">&#x27;changed&#x27;</span>)</span><br><span class="line">      -&gt;setLabel(t(<span class="string">&#x27;Changed&#x27;</span>))</span><br><span class="line">      -&gt;setDescription(t(<span class="string">&#x27;The time that the entity was last edited.&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$fields</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>注解的相关名词解释：</p>
<p>1、id：实体类型唯一标识符，一般遵循’modulename_xyz’的命名规则。</p>
<p>2、label：易读的实体名称。</p>
<p>3、handlers：不同的任务所使用的处理程序，一般来说，标准的处理方法有：<br>    1)、view_builder：由routing.yml中的’_entity_view’所调用。</p>
<pre><code>2)、list_builder：继承entityListBuilder，展示在线留言的列表。

3)、form：由routing.yml中的&#39;_entity_form&#39;所调用。

4)、access：设定访问权限
</code></pre>
<p>4、base_table：定义存储数据的表，必须唯一哦！schema由BaseFieldDefinitions决定，该表会在模块启用的时候自动创建。</p>
<p>5、fieldable：可以添加自定义字段，只有内容实体才有这个功能</p>
<p>6、entity_keys：访问fields的字段，如nid或uid</p>
<p>7、links：操作链接，如’edit-form’和’delete-form’。在列表页可以看到相应的操作按钮。</p>
<p>###七、控制器类</p>
<p>####1、src/Form/OnlineMessageForm.php</p>
<p>由routing中定义的’_entity_form’调用。</p>
<p>编辑内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\content_entity_example\Form\OnlineMessageForm.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">content_entity_example</span>\<span class="title">Form</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">ContentEntityForm</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Form</span>\<span class="title">FormStateInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Language</span>\<span class="title">Language</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Form controller for Online message edit forms.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ingroup</span> content_entity_example</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnlineMessageForm</span> <span class="keyword">extends</span> <span class="title">ContentEntityForm</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildForm</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* <span class="doctag">@var</span> $entity \Drupal\content_entity_example\Entity\OnlineMessage */</span></span><br><span class="line">    <span class="variable">$form</span> = <span class="built_in">parent</span>::buildForm(<span class="variable">$form</span>, <span class="variable">$form_state</span>);</span><br><span class="line">    <span class="variable">$entity</span> = <span class="keyword">$this</span>-&gt;entity;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$form</span>[<span class="string">&#x27;langcode&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;#title&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Language&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;language_select&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;#default_value&#x27;</span> =&gt; <span class="variable">$entity</span>-&gt;langcode-&gt;value,</span><br><span class="line">      <span class="string">&#x27;#languages&#x27;</span> =&gt; Language::STATE_ALL,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$form</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Build the entity object from the submitted values.</span></span><br><span class="line">    <span class="variable">$entity</span> = <span class="built_in">parent</span>::submit(<span class="variable">$form</span>, <span class="variable">$form_state</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$entity</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$entity</span> = <span class="keyword">$this</span>-&gt;entity;</span><br><span class="line">    <span class="variable">$status</span> = <span class="variable">$entity</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$status</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> SAVED_NEW:</span><br><span class="line">        drupal_set_message(<span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Created the %label Online message.&#x27;</span>, [</span><br><span class="line">          <span class="string">&#x27;%label&#x27;</span> =&gt; <span class="variable">$entity</span>-&gt;label(),</span><br><span class="line">        ]));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        drupal_set_message(<span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Saved the %label Online message.&#x27;</span>, [</span><br><span class="line">          <span class="string">&#x27;%label&#x27;</span> =&gt; <span class="variable">$entity</span>-&gt;label(),</span><br><span class="line">        ]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$form_state</span>-&gt;setRedirect(<span class="string">&#x27;entity.online_message.edit_form&#x27;</span>, [<span class="string">&#x27;online_message&#x27;</span> =&gt; <span class="variable">$entity</span>-&gt;id()]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223143411_52761.png" alt="add_form"></p>
<p>####2、src/Form/OnlineMessageDeleteForm.php</p>
<p>编辑内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\content_entity_example\Form\OnlineMessageDeleteForm.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">content_entity_example</span>\<span class="title">Form</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">ContentEntityConfirmFormBase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Form</span>\<span class="title">FormStateInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Url</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides a form for deleting Online message entities.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ingroup</span> content_entity_example</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnlineMessageDeleteForm</span> <span class="keyword">extends</span> <span class="title">ContentEntityConfirmFormBase</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getQuestion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Are you sure you want to delete entity %name?&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;%name&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;entity-&gt;label()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCancelUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Url(<span class="string">&#x27;entity.online_message.collection&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConfirmText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Delete&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">submitForm</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;entity-&gt;delete();</span><br><span class="line"></span><br><span class="line">    drupal_set_message(</span><br><span class="line">      <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;content @type: deleted @label.&#x27;</span>,</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&#x27;@type&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;entity-&gt;bundle(),</span><br><span class="line">          <span class="string">&#x27;@label&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;entity-&gt;label()</span><br><span class="line">        ]</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="variable">$form_state</span>-&gt;setRedirectUrl(<span class="keyword">$this</span>-&gt;getCancelUrl());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223143307_47107.png" alt="delete_form"></p>
<p>####3、src/OnlineMessageListBuilder.php</p>
<p>编辑内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\content_entity_example\OnlineMessageListBuilder.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">content_entity_example</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityListBuilder</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Routing</span>\<span class="title">LinkGeneratorTrait</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Url</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines a class to build a listing of Online message entities.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ingroup</span> content_entity_example</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnlineMessageListBuilder</span> <span class="keyword">extends</span> <span class="title">EntityListBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">use</span> <span class="title">LinkGeneratorTrait</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildHeader</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$header</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Online message ID&#x27;</span>);</span><br><span class="line">    <span class="variable">$header</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Name&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$header</span> + <span class="built_in">parent</span>::buildHeader();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildRow</span>(<span class="params">EntityInterface <span class="variable">$entity</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* <span class="doctag">@var</span> $entity \Drupal\content_entity_example\Entity\OnlineMessage */</span></span><br><span class="line">    <span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$entity</span>-&gt;id();</span><br><span class="line">    <span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="keyword">$this</span>-&gt;l(</span><br><span class="line">      <span class="variable">$entity</span>-&gt;label(),</span><br><span class="line">      <span class="keyword">new</span> Url(</span><br><span class="line">        <span class="string">&#x27;entity.online_message.edit_form&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">          <span class="string">&#x27;online_message&#x27;</span> =&gt; <span class="variable">$entity</span>-&gt;id(),</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$row</span> + <span class="built_in">parent</span>::buildRow(<span class="variable">$entity</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223143200_33896.png" alt="list_builder"></p>
<p>###八、Field配置</p>
<p>####1、src/Form/OnlineMessageSettingsForm.php</p>
<p>编辑内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\content_entity_example\Form\OnlineMessageSettingsForm.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">content_entity_example</span>\<span class="title">Form</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Form</span>\<span class="title">FormBase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Form</span>\<span class="title">FormStateInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class OnlineMessageSettingsForm.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> Drupal\content_entity_example\Form</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ingroup</span> content_entity_example</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnlineMessageSettingsForm</span> <span class="keyword">extends</span> <span class="title">FormBase</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a unique string identifying the form.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">   *   The unique string identifying the form.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OnlineMessage_settings&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Form submission handler.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> array $form</span></span><br><span class="line"><span class="comment">   *   An associative array containing the structure of the form.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> \Drupal\Core\Form\FormStateInterface $form_state</span></span><br><span class="line"><span class="comment">   *   The current state of the form.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">submitForm</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Empty implementation of the abstract submit class.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Defines the settings form for Online message entities.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> array $form</span></span><br><span class="line"><span class="comment">   *   An associative array containing the structure of the form.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> \Drupal\Core\Form\FormStateInterface $form_state</span></span><br><span class="line"><span class="comment">   *   The current state of the form.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">   *   Form definition array.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildForm</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$form</span>[<span class="string">&#x27;OnlineMessage_settings&#x27;</span>][<span class="string">&#x27;#markup&#x27;</span>] = <span class="string">&#x27;Settings form for Online message entities. Manage field settings here.&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$form</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223142648_96014.png" alt="设置"></p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223142758_83626.png" alt="管理字段"></p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223142828_19080.png" alt="管理表单显示"></p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223142848_49971.png" alt="管理显示"></p>
<p>###九、注册entity</p>
<p>启用模块，会自动根据Entity中的配置创建online_message表。</p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223140008_92664.png" alt="online_message_table"></p>
<p>参考文章：<br>1、<a href="https://www.drupal.org/node/2192175">https://www.drupal.org/node/2192175</a><br>2、<a href="http://www.slideshare.net/andypost/d8-entity">http://www.slideshare.net/andypost/d8-entity</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>entity</tag>
      </tags>
  </entry>
  <entry>
    <title>drupal8 configuration schema</title>
    <url>/2016/10/31/Drupal8-Configuration-Schema/</url>
    <content><![CDATA[<p>Drupal 8中configuration schema是用来描述配置文件的结构的. 它应用于:<br>定型配置以确保数据一致性<br>(see StorableConfigBase::castValue())</p>
<p>自动持久化实体属性的配置<br> (see ConfigEntityBase::toArray())</p>
<p>自动生成用户界面的翻译配置<br> (see the core module)</p>
<p>1、一个简单的示例<br>如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">config/install/my_module.settings.yml</span><br><span class="line">type: warning</span><br><span class="line">message: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">langcode: en</span><br><span class="line"></span><br><span class="line">config/schema/my_module.schema.yml</span><br><span class="line">my_module.settings:</span><br><span class="line">  type: config_object</span><br><span class="line">  mapping:</span><br><span class="line">    type:</span><br><span class="line">	  type: <span class="keyword">string</span></span><br><span class="line">	  label: <span class="string">&#x27;Message type&#x27;</span></span><br><span class="line">	message:</span><br><span class="line">	  type: label</span><br><span class="line">	  label: <span class="string">&#x27;Message text&#x27;</span></span><br><span class="line">	langcode:</span><br><span class="line">	  type: <span class="keyword">string</span></span><br><span class="line">	  label: <span class="string">&#x27;Language code&#x27;</span></span><br></pre></td></tr></table></figure>

<p>需要说明的是，my_module.schema.yml我们可以认为是一个自定义的数据结构体，而my_module.settings.yml则是给这个自定义的数据结构体定义了默认值，<br>在my_module.schema.yml中我们可以看到这个数据结构体中定义了一个mapping结构体(可以简单的认为是一个数组类型)，这个数组有三个key，分别是type、message、langcode，<br>前面说了my_module.settings.yml是给my_module.schema.yml这个数据结构体定义了默认值，我们可以看到在my_module.settings.yml中type的默认值是warning,message的默认值<br>是’Hello!’,langcode的默认值是en,值的注意的一点是，一个schema.yml文件可以定义多个数据结构体，但是每一个的数据结构体的root元素必须与settings.yml文件的文件名一致，<br>比如上面的两个文件settings.yml文件的文件名是my_module.settings.yml，my_module.schema.yml的root元素的名称就是my_module.settings。</p>
<p>2、schema中常用的数据类型<br>基本类型：<br>boolean，<br>integer，<br>float，<br>string，<br>uri，<br>email</p>
<p>列表类型：<br>mapping(知道key是什么)，<br>sequence(不知道key的具体值)</p>
<p>常见的子类型：<br>label: 短标签<br>text: 长文本<br>config_object: object根元素类型<br>config_entity: entity根元素类型</p>
<p>子类型化<br>所有configuration schema的子类型都是从现有的类型演化而来.<br>早些时候的简单示例子类型config_object (mapping的一个子类型) 可以进一步自定义key。<br>configuration schema根节点的数据类型一般都是config_object或者config_entity。</p>
<p>3、关于动态类型[%parent]<br>确切的数据类型可能不会知道，而且还有类型取决于数据的可能性，configuration schema同样支持基于数据的类型。假设Message的类型可能取决于数据的类型：无论Message是一个列表<br>或者是一个简单的警告。让我们用 ‘multiple’ 来定义列表情况,用 ‘warning’ 来表示一个单行的警告。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">config/install/my_module.message.single.yml</span><br><span class="line">type: warning</span><br><span class="line">message: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">langcode: en</span><br><span class="line"></span><br><span class="line">config/install/my_module.message.multiple.yml</span><br><span class="line">type: multiple</span><br><span class="line">message:</span><br><span class="line"> -<span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line"> -<span class="string">&#x27;Hi!&#x27;</span> </span><br><span class="line">langcode: en</span><br><span class="line"></span><br><span class="line">config/schema/my_module.schema.yml</span><br><span class="line">my_module.message.*:</span><br><span class="line"> type: config_object </span><br><span class="line"> mapping:</span><br><span class="line">  type:</span><br><span class="line">   type: <span class="keyword">string</span></span><br><span class="line">   label: <span class="string">&#x27;Message type&#x27;</span></span><br><span class="line">  message:</span><br><span class="line">   type: my_module_message.[%<span class="built_in">parent</span>.type]</span><br><span class="line"> langcode:	</span><br><span class="line">   type: <span class="keyword">string</span></span><br><span class="line">   label: <span class="string">&#x27;Language code&#x27;</span></span><br><span class="line"></span><br><span class="line">my_module_message.warning:</span><br><span class="line"> type: <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">my_module_message.multiple:</span><br><span class="line"> type: sequence</span><br><span class="line"> label: <span class="string">&#x27;Messages&#x27;</span></span><br><span class="line"> sequence:</span><br><span class="line">  type: <span class="keyword">string</span></span><br><span class="line">  label: <span class="string">&#x27;Message&#x27;</span></span><br></pre></td></tr></table></figure>

<p>首先看my_module.schema.yml这个文件，’my_module.message.*’用了通配符定义结构体，所以它适用于一组配置名称。所以我们看到分别有my_module.message.single.yml跟my_module.message.multiple.yml<br>这两个配置文件。接着往下看my_module.schema.yml，’type: my_module_message.[%parent.type]’ message的类型用了动态元素[%parent.type]来定义，所以在下面我们看到了my_module_message.warning跟<br>my_module_message.multiple两个类型定义，无论是my_module_message.warning还是my_module_message.multiple的前缀都是跟my_module_message.[%parent.type]的前缀一致的，另外需要注意的是内部节点的<br>名称要避免与根节点相同以免造成冲突。</p>
<p>4、关于动态类型 [type]<br>如果想要在已有的数据下面定义你自己不同的数据类型 那么[type]将会变的非常有用.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">config/install/my_module.message.single.yml</span><br><span class="line"> message: </span><br><span class="line">  type: warning</span><br><span class="line">  value: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line"> langcode: en</span><br><span class="line"> </span><br><span class="line">config/install/my_module.message.multiple.yml</span><br><span class="line"> message:</span><br><span class="line">  type: multiple </span><br><span class="line">  value:</span><br><span class="line">   -<span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">   -<span class="string">&#x27;Hi!&#x27;</span></span><br><span class="line"> langcode: en</span><br><span class="line"></span><br><span class="line">config/schema/my_module.schema.yml</span><br><span class="line">my_module.message.*:</span><br><span class="line"> type: config_object</span><br><span class="line"> mapping:</span><br><span class="line">  message:</span><br><span class="line">   type: my_module_message.[type]</span><br><span class="line">  […]</span><br><span class="line">  </span><br><span class="line">my_module_message.warning:</span><br><span class="line"> type: mapping</span><br><span class="line"> […]</span><br><span class="line"> </span><br><span class="line">my_module_message.multiple:</span><br><span class="line"> type: mapping</span><br><span class="line"> […]</span><br></pre></td></tr></table></figure>

<p>首先看my_module.schema.yml文件用[type]来动态定义message的类型，所以my_module.schema.yml这个文件中我们又看到了my_module_message.warning跟my_module_message.multiple这两个定义类型，<br>需要说明的是无论是my_module_message.warning还是my_module_message.multiple它们的类型都是mapping类型，那么它们对应的值也必须mapping类型，我们再来看my_module.message.single.yml跟<br>my_module.message.multiple.yml两个文件，message的值也是mapping类型。<br>你同样可以定义一个包含相同的key，例如’type’的 基础类型,并且继承这个基础的类型你可以扩展任何自定义类型的key。</p>
<p>5、关于动态类型[%key]</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">config/install/my_module.messages.yml</span><br><span class="line">messages: </span><br><span class="line"> <span class="string">&#x27;single:1&#x27;</span>: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line"> <span class="string">&#x27;single:2&#x27;</span>: <span class="string">&#x27;Hi!&#x27;</span></span><br><span class="line"> <span class="string">&#x27;multiple:1&#x27;</span>:</span><br><span class="line">  -<span class="string">&#x27;Good morning!&#x27;</span></span><br><span class="line">  -<span class="string">&#x27;Good night!&#x27;</span></span><br><span class="line">langcode: en</span><br></pre></td></tr></table></figure>

<p>这是一个任意消息元素的列表.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">config/schema/my_module.schema.yml</span><br><span class="line"> my_module.messages:</span><br><span class="line">  type: config_object</span><br><span class="line">  mapping:		</span><br><span class="line">   messages:</span><br><span class="line">    type: sequence</span><br><span class="line">    label:<span class="string">&#x27;Messages&#x27;</span>				</span><br><span class="line">    sequence:				</span><br><span class="line">     type: my_module_message.[%key] </span><br><span class="line">   langcode:</span><br><span class="line">    type: <span class="keyword">string</span></span><br><span class="line">    label: <span class="string">&#x27;Language code&#x27;</span></span><br><span class="line"> </span><br><span class="line"> my_module_message.single:*:</span><br><span class="line">  type: <span class="keyword">string</span></span><br><span class="line">  label: <span class="string">&#x27;Message&#x27;</span></span><br><span class="line"></span><br><span class="line"> my_module_message.multiple:*:</span><br><span class="line">  type: sequence</span><br><span class="line">  label: <span class="string">&#x27;Messages&#x27;</span></span><br><span class="line">  sequence:</span><br><span class="line">   type: <span class="keyword">string</span></span><br><span class="line">   label: <span class="string">&#x27;Message&#x27;</span>	</span><br></pre></td></tr></table></figure>

<p>首先看config/schema/my_module.schema.yml，messages的类型是sequence，而sequence的类型则是以my_module_message为前缀的动态类型，再往下看定义了my_module_message.single:<em>:跟<br>my_module_message.multiple:</em>:两个结构类型，这两个类型对应的messages值分别是以’single:<em>‘跟’multiple:</em>‘为前缀的，所以我们在config/install/my_module.messages.yml这个文件中<br>看到了’single:<em>‘跟’multiple:</em>‘为前缀的的messages的默认值</p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>configuration schema</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8 Controller</title>
    <url>/2015/12/23/Drupal8-Controller/</url>
    <content><![CDATA[<p>学习了这么多的章节了，对Drupal8应该不陌生了吧！</p>
<p>Controller类主要用于处理相关的HTTP请求逻辑，一般在routing.yml中会指定调用哪个Controller，通常情况下，在：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;module_name&#125;/src/Controller/ExampleController.php</span><br></pre></td></tr></table></figure>

<p>本文github： <a href="https://github.com/RamboLau/drupal8-demos/tree/master/controller_example">https://github.com/RamboLau/drupal8-demos/tree/master/controller_example</a></p>
<p>###一、创建模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir controller_example</span><br><span class="line"></span><br><span class="line">touch controller_example.info.yml</span><br></pre></td></tr></table></figure>

<p>编辑内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: controller_example</span><br><span class="line"><span class="built_in">type</span>: module</span><br><span class="line">description: Provides controller example.</span><br><span class="line">core: 8.x</span><br><span class="line">package: Other</span><br></pre></td></tr></table></figure>

<p>###二、controller_example.routing.yml</p>
<p>编辑内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">controller_example.default_controller_index:</span><br><span class="line">  path: <span class="string">&#x27;/controller_example/index/hello/&#123;name&#125;&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _controller: <span class="string">&#x27;\Drupal\controller_example\Controller\DefaultController::index&#x27;</span></span><br><span class="line">    _title: <span class="string">&#x27;index page&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;access content&#x27;</span></span><br><span class="line"></span><br><span class="line">controller_example.default_controller_default_page:</span><br><span class="line">  path: <span class="string">&#x27;/controller_example/default_page/hello/&#123;name&#125;&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _controller: <span class="string">&#x27;\Drupal\controller_example\Controller\DefaultController::default_page&#x27;</span></span><br><span class="line">    _title: <span class="string">&#x27;default page&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;access content&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>###三、src/Controller/DefaultController.php</p>
<p>创建一个名为Default的Controller。</p>
<p>编辑内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\controller_example\Controller\DefaultController.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">controller_example</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Controller</span>\<span class="title">ControllerBase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class DefaultController.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> Drupal\controller_example\Controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultController</span> <span class="keyword">extends</span> <span class="title">ControllerBase</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Index.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">   *   Return Hello string.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;markup&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#markup&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;t(<span class="string">&quot;Implement method: index with parameter(s): <span class="subst">$name</span>&quot;</span>)</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Default_page.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">   *   Return Hello string.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">default_page</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;markup&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#markup&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;t(<span class="string">&quot;Implement method: default_page with parameter(s): <span class="subst">$name</span>&quot;</span>)</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>###四、调试</p>
<p>打开浏览器，输入 <a href="http://127.0.0.1:8080/drupal8/controller_example/default_page/hello/this_is_a_default_page%EF%BC%8C%E6%98%BE%E7%A4%BA%EF%BC%9A">http://127.0.0.1:8080/drupal8/controller_example/default_page/hello/this_is_a_default_page，显示：</a></p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223162504_21051.png" alt="default_page"></p>
<p>输入 <a href="http://127.0.0.1:8080/drupal8/controller_example/index/hello/this_is_a_index_page%EF%BC%8C%E6%98%BE%E7%A4%BA%EF%BC%9A">http://127.0.0.1:8080/drupal8/controller_example/index/hello/this_is_a_index_page，显示：</a></p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223162405_48525.png" alt="index_page"></p>
<p>参考文章：<br>1、<a href="https://www.drupal.org/node/2116767">https://www.drupal.org/node/2116767</a><br>2、<a href="http://www.sitepoint.com/build-drupal-8-module-routing-controllers-menu-links/">http://www.sitepoint.com/build-drupal-8-module-routing-controllers-menu-links/</a><br>3、<a href="https://www.previousnext.com.au/blog/using-drupal-8s-new-route-controllers">https://www.previousnext.com.au/blog/using-drupal-8s-new-route-controllers</a><br>4、<a href="http://www.vdmi.nl/blog/using-controllers-drupal-8">http://www.vdmi.nl/blog/using-controllers-drupal-8</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>controller</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8 Cron Queue</title>
    <url>/2015/12/23/Drupal8-Cron-Queue/</url>
    <content><![CDATA[<p>Drupal中的Queue(队列)用于处理比较耗时的任务，一般是通过系统的Cron来触发。</p>
<p>本文github：<a href="https://github.com/RamboLau/drupal8-demos/tree/master/queue_example">https://github.com/RamboLau/drupal8-demos/tree/master/queue_example</a></p>
<p>###一、Drupal7 Queue</p>
<p>Drupal7一般是通过hook_cron_queue_info()这个钩子来实现，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_cron().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queue_example_cron</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$queue</span> = DrupalQueue::get(<span class="string">&#x27;example_queue&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreach</span>(example_data() <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="variable">$queue</span>-&gt;createItem(<span class="variable">$item</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_cron_queue_info().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queue_example_cron_queue_info</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$queues</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable">$queues</span>[<span class="string">&#x27;example_queue&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;worker callback&#x27;</span> =&gt; <span class="string">&#x27;example_queue_worker&#x27;</span>, <span class="comment">// queue调用的函数</span></span><br><span class="line">    <span class="string">&#x27;time&#x27;</span> =&gt; <span class="number">60</span>, <span class="comment">//每次运行时，可供消耗的最长时间，单位是秒</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$queues</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>###二、Drupal8 Queue</p>
<p>Drupal8的Queue(队列)是通过QueueWorker这个插件来实现的。</p>
<p>####1、src/Plugin/QueueWorker/ExampleQueue.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains Drupal\queue_example\Plugin\QueueWorker\ExampleQueue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">queue_example</span>\<span class="title">Plugin</span>\<span class="title">QueueWorker</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Queue</span>\<span class="title">QueueWorkerBase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QueueWorker</span>(</span></span><br><span class="line"><span class="comment"> *   id = &quot;example_queue&quot;,</span></span><br><span class="line"><span class="comment"> *   title = <span class="doctag">@Translation</span>(&quot;example queue&quot;),</span></span><br><span class="line"><span class="comment"> *   cron = &#123;&quot;time&quot; = 10&#125;</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleQueue</span> <span class="keyword">extends</span> <span class="title">QueueWorkerBase</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">processItem</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Process data here.</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;Process data &#x27;</span> . json_encode(<span class="variable">$data</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>####2、queue_example.module</p>
<p>要执行queue，必选实现hook_cron这个钩子。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_cron().</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> \Drupal\queue_example\Plugin\QueueWorker\ExampleQueue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queue_example_cron</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$queue</span> = \Drupal::queue(<span class="string">&#x27;example_queue&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line">  <span class="variable">$item</span> = [ <span class="string">&#x27;entity_type&#x27;</span> =&gt; <span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span> ];</span><br><span class="line">  <span class="variable">$queue</span>-&gt;createItem(<span class="variable">$item</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>####3、结果</p>
<p>1）、访问<a href="http://127.0.0.1/drupal8/admin/config/system/cron%E6%89%A7%E8%A1%8Ccron">http://127.0.0.1/drupal8/admin/config/system/cron执行cron</a><br>2）、打开phpmyadmin，查看queue表</p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151225/20151225142932_68268.png" alt="queue"></p>
<p>3）、访问<a href="http://127.0.0.1/drupal8/admin/reports/dblog%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%88%91%E4%BB%AC%E5%9C%A8processItem%E6%96%B9%E6%B3%95%E4%B8%AD%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8%E4%BA%86%E3%80%82">http://127.0.0.1/drupal8/admin/reports/dblog，就可以看到我们在processItem方法中抛出的异常了。</a></p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151225/20151225143322_46779.png" alt="dblog"></p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151225/20151225143400_63877.png" alt="dblog1"></p>
<p>参考文章：<br>1、<a href="http://www.vdmi.nl/blog/creating-drupal-cron-queue-worker-drupal-8">http://www.vdmi.nl/blog/creating-drupal-cron-queue-worker-drupal-8</a><br>2、<a href="http://www.sitepoint.com/drupal-8-queue-api-powerful-manual-and-cron-queueing/">http://www.sitepoint.com/drupal-8-queue-api-powerful-manual-and-cron-queueing/</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>queue</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8-Service-DependencyInjection</title>
    <url>/2015/12/15/Drupal8-Service-DependencyInjection/</url>
    <content><![CDATA[<p>先来认识几个名词：</p>
<p>1、Service</p>
<p>Drupal8的service帮助代码去耦合，提高重复利用。比如操作数据库，发送mail等。一般来说，service是一个PHP类，包含了一些全局的方法。</p>
<p>2、Service Container</p>
<p>Service Container用来管理service。service的类会被注册在container中，来控制访问权限。在自定义模块中，可以用module_name.services.yml来实例化services，进而保存进container对象中。</p>
<p>3、Dependency Injection</p>
<p>如果要传递对象给另一个对象，一般用Dependency Injection来去耦。简单点说，一个service只处理一件事情，如果它要调用另外一个service，那么后面的这个service可以注入到前面的service中。</p>
<p>下文我们以service表示Service，container表示Service Container，DI表示Dependency Injection。</p>
<p>###一、core services</p>
<p>Drupal8的核心servive都在<a href="https://api.drupal.org/api/drupal/core%21core.services.yml/8">core.services.yml</a>中。</p>
<p>当然，也可以在module_name.services.yml中自定义service。</p>
<p>*.services.yml的写法如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">path.alias_manager:</span><br><span class="line">  class: Drupal\Core\Path\AliasManager</span><br><span class="line">  arguments: [<span class="string">&#x27;@path.crud&#x27;</span>, <span class="string">&#x27;@path.alias_whitelist&#x27;</span>, <span class="string">&#x27;@language_manager&#x27;</span>]</span><br><span class="line">breadcrumb:</span><br><span class="line">  class: Drupal\Core\Breadcrumb\BreadcrumbManager</span><br><span class="line">  arguments: [<span class="string">&#x27;@module_handler&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>如要把别的service当作工厂使用，写法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cache.entity:</span><br><span class="line">  class: Drupal\Core\Cache\CacheBackendInterface</span><br><span class="line">  tags:</span><br><span class="line">    - &#123; name: cache.bin &#125;</span><br><span class="line">  factory: cache_factory:get</span><br><span class="line">  arguments: [entity]</span><br></pre></td></tr></table></figure>

<p>1、第一行定义了一个唯一的service名称，如果是自定义的模块，必须以模块名作为前缀。<br>2、第二行定义了默认调用的类、工厂类、接口类等。<br>3、arguments带@表示依赖于该service。<br>4、factory表示调用哪个工厂方法。<br>5、tags标签定义了一组关联的service，或指定具有某些相似特性的service。如果定义了service标签，在service类中必须实现相应的接口，如：<br>    &gt; access_check: 标明路由访问检查service<br>    &gt; cache.bin: 标明cache bin service<br>    &gt; event_subscriber: 标明一个事件订阅service。<br>    &gt; needs_destruction: 标明一个destructor()方法，通常被调用于一个请求完成时。<br>    &gt; context_provice: 标明一个block上下文提供者。<br>    &gt; http_client_middleware: 标明该service提供者是一个guzzle中间件。</p>
<p>###二、访问service</p>
<p>####1、全局函数(global functions)</p>
<p>Drupal8的全局类提供了一些静态方法去访问一些通用的service。如Drupal::moduleHandler()将返回模块处理service，Drupal.translation()将返回翻译service。用 Drupal::service()可以获取所有已经定义的service。</p>
<p>如：访问一个数据库service</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Returns a Drupal\Core\Database\Connection object.</span></span><br><span class="line"><span class="variable">$connection</span> = \Drupal::database();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$connection</span>-&gt;select(<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">  -&gt;fields(<span class="string">&#x27;n&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;nid&#x27;</span>))</span><br><span class="line">  -&gt;execute();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如：通过\Drupal::service()访问一个date service</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Returns a Drupal\Core\Datetime\Date object.</span></span><br><span class="line"><span class="variable">$date</span> = \Drupal::service(<span class="string">&#x27;date&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如：自定义的demo模块</p>
<p>####2、创建demo.services.yml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">    demo.demo_service:</span><br><span class="line">        class: Drupal\demo\DemoService</span><br></pre></td></tr></table></figure>

<p>####3、在src目录下创建DemoService.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains Drupal\demo\DemoService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$demo_value</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;demo_value = <span class="string">&#x27;Upchuk&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDemoValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;demo_value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以直接这样访问demo service</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$service</span> = \Drupal::service(<span class="string">&#x27;demo.demo_service&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>####4、重写默认service</p>
<p>Drupal8允许在自定义的模块中重写已存在的service。如自定义了一个名为demo的模块。</p>
<p>1)、在demo的src文件中创建一个名为DemoServiceProvider.php文件。</p>
<p>2)、DemoServiceProvider必须实现<a href="https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21DependencyInjection%21ServiceModifierInterface.php/interface/ServiceModifierInterface/8"> \Drupal\Core\DependencyInjection\ServiceModifierInterface</a>.</p>
<p>3)、这个类必须包含一个方法：alter()。这个方法是告诉Drupal用你的类来替代默认的类。如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">alter</span>(<span class="params">ContainerBuilder <span class="variable">$container</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Override the language_manager class with a new class.</span></span><br><span class="line">  <span class="variable">$definition</span> = <span class="variable">$container</span>-&gt;getDefinition(<span class="string">&#x27;language_manager&#x27;</span>);</span><br><span class="line">  <span class="variable">$definition</span>-&gt;setClass(<span class="string">&#x27;Drupal\my_module\MyLanguageManager&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###三、通过DI访问service</p>
<p>这块比较重要，单独来讲一下。还是以demo模块为例。</p>
<p>####1、创建demo.services.yml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">    demo.demo_service:</span><br><span class="line">        class: Drupal\demo\DemoService</span><br></pre></td></tr></table></figure>

<p>####2、在src目录下创建DemoService.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains Drupal\demo\DemoService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$demo_value</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;demo_value = <span class="string">&#x27;Upchuk&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDemoValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;demo_value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>####3、创建demo.routing.yml</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">demo.demo:</span><br><span class="line">  path: <span class="string">&#x27;/demo&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _controller: <span class="string">&#x27;\Drupal\demo\Controller\DemoController:demo&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;access content&#x27;</span></span><br></pre></td></tr></table></figure>

<p>####4、在src/Controller目录下创建DemoController.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\demo\Controller\DemoController.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Controller</span>\<span class="title">ControllerBase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">DependencyInjection</span>\<span class="title">ContainerInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DemoController.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> <span class="keyword">extends</span> <span class="title">ControllerBase</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$demoService</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Class constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$demoService</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;demoService = <span class="variable">$demoService</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">ContainerInterface <span class="variable">$container</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">static</span>(</span><br><span class="line">      <span class="variable">$container</span>-&gt;get(<span class="string">&#x27;demo.demo_service&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Generates an example page.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;#markup&#x27;</span> =&gt; t(<span class="string">&#x27;Hello @value!&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;@value&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;demoService-&gt;getDemoValue())),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>create()方法创建了一个控制器类的实例，参数为container中获取到的service。这样，DemoService实例就可以存储到$demoService中，我们就可以调用getDemoValue()这个方法了。</p>
<p>####5、访问/demo的时候屏幕上就会出现Hello Upchuk!</p>
<p>参考文章：<br>1、<a href="https://docs.acquia.com/articles/drupal-8-dependency-injection">https://docs.acquia.com/articles/drupal-8-dependency-injection</a><br>2、<a href="http://katbailey.github.io/2013/05/15/dependency-injection-in-drupal-8/">http://katbailey.github.io/2013/05/15/dependency-injection-in-drupal-8/</a><br>3、<a href="https://www.drupal.org/node/2133171">https://www.drupal.org/node/2133171</a><br>4、<a href="http://redcrackle.com/blog/drupal-8/dependency-injection">http://redcrackle.com/blog/drupal-8/dependency-injection</a><br>5、<a href="https://api.drupal.org/api/drupal/core!core.api.php/group/container/8">https://api.drupal.org/api/drupal/core!core.api.php/group/container/8</a><br>6、<a href="http://www.sitepoint.com/building-drupal-8-module-configuration-management-service-container/">http://www.sitepoint.com/building-drupal-8-module-configuration-management-service-container/</a><br>7、<a href="https://api.drupal.org/api/drupal/core%21core.api.php/group/service_tag/8">https://api.drupal.org/api/drupal/core%21core.api.php/group/service_tag/8</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>Service_DependencyInjection</tag>
      </tags>
  </entry>
  <entry>
    <title>drupal8 javascript</title>
    <url>/2015/12/14/Drupal8-Javascript/</url>
    <content><![CDATA[<h2 id="JavaScript-编码规范建议"><a href="#JavaScript-编码规范建议" class="headerlink" title="JavaScript 编码规范建议"></a>JavaScript 编码规范建议</h2><p>本文就 JavaScript 编码过程中涉及的排版、命名、声明、作用域、及一些特殊符号的使用等方面，根据个人在学习工作中的总结，给出自己的一些建议，并分析其中缘由，以供参考。</p>
<h3 id="JavaScript-文件引用"><a href="#JavaScript-文件引用" class="headerlink" title="JavaScript 文件引用"></a>JavaScript 文件引用</h3><p>JavaScript 程序应该尽量放在 .js 的文件中，需要调用的时候在 HTML 中以<code>&lt;script src=&quot;filename.js&quot;&gt;</code>的形式包含进来。JavaScript 代码若不是该 HTML 文件所专用的，则应尽量避免在 HTML 文件中直接编写 JavaScript 代码。因为这样会大大增加 HTML 文件的大小，无益于代码的压缩和缓存的使用。<br>另外，<code>&lt;script src=&quot;filename.js&quot;&gt;</code>标签应尽量放在文件的后面。这样会降低因加载 JavaScript 代码而影响页面中其它组件的加载时间。</p>
<h3 id="代码排版"><a href="#代码排版" class="headerlink" title="代码排版"></a>代码排版</h3><h4 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h4><p><strong>每行代码应小于 80 个字符</strong>。如果代码较长，应尽量选择换行，下一行代码应缩进8 个空格。这样可以使代码排版整齐，减轻阅读代码的疲劳感。</p>
<h4 id="行结束"><a href="#行结束" class="headerlink" title="行结束"></a>行结束</h4><p><strong>JavaScript 语句应该以分号结束</strong>。但大多数浏览器允许不写分号，只要在本应是分号的地方有一个换行符就行。但是如果代码行较长需要换行的时候，有哪些注意事项呢？换行应选择在操作符和标点符号之后，最好是在逗号’,’之后，而不要在变量名、字符串、数字、或’)’ ‘]’ ‘++’ ‘–’等符号之后换行。<br>这样可以有效的防止拷贝、粘贴而引起的错误，并可有效地增强代码的可阅读性。</p>
<h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>本文提倡用 <strong>2个空格</strong> 来进行缩进，并在同一产品中采用同一种缩进标准。不支持用TAB键进行缩进，这是因为直到现在还没有统一的标准来定义 TAB 键所代替的空白大小，有些编辑器解析为 4 个空格大小，有些则解析为 8 个。</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>单行注释规范：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Init variable count.</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>以”//“开头，然后有一个空格，第一个单词的首字母需要大写，<br>当然要是中文的话就无所谓了，最后要以英文句号“.”结尾</p>
</blockquote>
<p>还有一种块级注释<code>/*....*/</code>用作对整个代码段的注销，或较正式的声明中，如函数参数、功能、文件功能等的描述中。</p>
<h4 id="标识符命名"><a href="#标识符命名" class="headerlink" title="标识符命名"></a>标识符命名</h4><p>JavaScript 中的标识符的命名规则：</p>
<ul>
<li>以字母、下划线<code>_</code>或美元符号<code>$</code>开头</li>
<li>允许名称中包含字母，数字，下划线<code>_</code>和美元符号<code>$</code></li>
<li>区分大小写</li>
</ul>
<p>变量、参数、成员变量、函数等名称均以小写字母开头，构造器的名称以大写字母开头。下划线<code>_</code>开头的变量一般习惯于标识私有 / 局部成员。而美元符号<code>$</code>开头的变量习惯于标识系统相关，比如系统进程等。应避免用下划线<code>_</code>或美元符号<code>$</code>来命名标识符。尽可能地降低代码的阅读负担。</p>
<h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><h5 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h5><p>尽管 JavaScript 语言并不要求在变量使用前先对变量进行声明。但我们还是应该养成这个好习惯。这样可以比较容易的检测出那些未经声明的变量，避免其变为隐藏的全局变量，造成隐患。</p>
<p>在函数的开始应先用 var 关键字声明函数中要使用的局部变量，注释变量的功能及代表的含义，且应以字母顺序排序。每个变量单独占一行，以便添加注释。这是因为 JavaScript 中只有函数的 {} 表明作用域，用 var 关键字声明的局部变量只在函数内有效，而未经 var 声明的变量则被视为全局变量。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> valueA  = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> valueB  = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> valueA = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="comment">// Output: valueA=c.</span></span><br><span class="line">    alert(<span class="string">&#x27;valueA=&#x27;</span> + valueA);</span><br><span class="line">    valueB = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">    <span class="comment">// Output: valueB=d.</span></span><br><span class="line">    alert(<span class="string">&#x27;valueB=&#x27;</span> + valueB);</span><br><span class="line">  &#125;</span><br><span class="line">  f1();</span><br><span class="line">  <span class="comment">// Output: valueA=a.</span></span><br><span class="line">  alert(<span class="string">&#x27;valueA=&#x27;</span> + valueA);</span><br><span class="line">  <span class="comment">// Output: valueB=d.</span></span><br><span class="line">  alert(<span class="string">&#x27;valueB=&#x27;</span> + valueB);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>从上例的输出惊奇地发现，用 var 声明过的变量 valueA 和没有声明的变量 valueB 是有区别的。特别需要注意的是，在函数内部用 var 声明的变量为局部变量，这样可以有效地避免因局部变量和全局变量同名而产生的错误。</p>
<h5 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h5><p>函数也应在调用前进行声明，内部函数应在 var 声明内部变量的语句之后声明，可以清晰地表明内部变量和内部函数的作用域。</p>
<p>此外，函数名紧接左括号’(‘之间，而右括号’)’和后面的’{‘之间要有个空格，以清楚地显示函数名以其参数部分，和函数体的开始。若函数为匿名 / 无名函数，则 function 关键字和左括号’(‘之间要留空格，否则可能误认为该函数的函数名为 function。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> innerA = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">outF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> innerA = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_inF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;valueA=&#x27;</span> + innerA);</span><br><span class="line">    &#125;</span><br><span class="line">    _inF();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Output: valueA=2.</span></span><br><span class="line">  outF();</span><br><span class="line">  <span class="comment">// Error: innerF is not defined.</span></span><br><span class="line">  _inF();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>从上面例子的输出可以看出，inF() 函数仅在 outF() 函数的内部生效，局部变量 innerA 对内部函数的作用域生效。这样的编码方式使得变量和函数的作用域变得清晰。</p>
<h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><p>对于简单语句而言，需要提及的仍然是分号必要性，同时，一行最多有一个语句。如果一个赋值语句是用函数和对象来赋值，可能需要跨多行，一定切记要在赋值语句末加上分号。<br>这是因为 JavaScript 中，所有表达式都可以当语句，遇换行符时会解析为表达式的结束，此时不规范的换行和分号的丢失，可能引入新的错误。<br>对于复合语句，if, for, while, do, switch, try … catch 等代码体，函数定义的函数体，对象的定义等都需要放在花括号’{}’里面。</p>
<ul>
<li>‘{‘ 应在行末，标志代码块的开始。</li>
<li>‘}’ 应在一行开头，标志代码块的结束，同时需要和’{‘所在行的开始对齐，以表明一个完整的复合语句段。这样可以极大地提高代码的可阅读性，控制逻辑能清晰地表现出来。</li>
<li>被包含的代码段应该再缩进 2 个空格。</li>
<li>即使被包含的代码段只有一句，也应该用花括号’{}’包含。尽管不用花括号代码也不会错，但如若需要增加语句的话，则较容易因花括号遗漏而引起的编译错误或逻辑错误。</li>
</ul>
<p><strong>return</strong> 语句在使用时也需慎重，如果用表达式的执行作为返回值，请把表达式和<code>return</code> 放在同一行中，以免换行符被误解析为语句的结束而引起返回错误。return 关键字后若没有返回表达式，则返回 undefined。构造器的默认返回值为 this。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span>&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> valueA  = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> valueB  = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> valueA + valueB;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> valueA  = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> valueB  = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">      valueA + valueB;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Outut: 3.</span></span><br><span class="line">  alert( F1() );</span><br><span class="line">  <span class="comment">// Output: undefined.</span></span><br><span class="line">  alert( F2() );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>上例中，因返回表达式没有和 return 关键字放在同一行而引起的返回错误，需重视。</p>
<h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><h5 id="空白符"><a href="#空白符" class="headerlink" title="空白符"></a>空白符</h5><p>适当的空白行可以大大提高代码的可阅读性，可以使代码逻辑更清晰易懂。同时，在表达式中适当的留空白，也会给代码的阅读带来方便。</p>
<p>关键字的后面如有括号，则最好在关键字和左括号’(‘之间留空白，如 for, if, while 等。而函数名和括号之间则不宜留空白，但若是匿名函数，则必须在 function 和左括号’(‘之间留空白，否则，编辑器会误认为函数名为 function。</p>
<p>在表达式中，二元运算符 ( 除左括号’(‘，左方括号’[‘，作用域点’.’) 和两个操作数之间最好留空白。一元运算符（若不是词 typeof 等）和其操作数之间不宜留空白。</p>
<p>逗号’,’的后面需要留空白，以显示明确的参数间隔，变量间隔等。</p>
<p>分号’;’之后通常表明表达语句的结束，而应空行。在 for 的条件语句中，分号之后则应该留空白。</p>
<h5 id="和"><a href="#和" class="headerlink" title="{ } 和 [ ]"></a>{ } 和 [ ]</h5><p>在 JavaScript 中，如需定义空对象和空数组，通常很自然地想到用 new Object() 和 new Array() 的方法。其实花括号’{}’和方括号’[]’可以直接用来定义一个空对象和一个空数组。这种书写方法可以使代码看起来简单易懂。</p>
<h4 id="和-1"><a href="#和-1" class="headerlink" title="== 和 ==="></a>== 和 ===</h4><p>判断”逻辑等”在代码里太平常的不过事情了，但 JavaScript 与其他熟知的编程语言不同的是，除了可以使用两个等号’==’来作判断以为，还可以使用三个等号’===’来进行逻辑等判断。两者的不同是’==’作逻辑等判断时，会先进行类型转换后再进行比较。’===’则不会。因而，’==’进行的判断结果可能产生偏差。’!=’与’!==’的区别亦是如此。本文提倡尽量使用’===’来进行逻辑等的判断，用’!==’进行逻辑不等的判断。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> valueA = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> valueB = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( valueA == valueB) &#123;</span><br><span class="line">    alert(<span class="string">&quot;Equal&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;Not equal&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Output: &quot;Equal&quot;.</span></span><br><span class="line">  <span class="keyword">if</span> ( valueA === valueB) &#123;</span><br><span class="line">    alert(<span class="string">&quot;Equal&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;Not equal&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Output: &quot;Not equal&quot;.</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>上例中，valueA 和 valueB 两个变量的值显然是不相等的，起码 valueA 是个字符串，而 valueB 是一个数字。但用’==’进行判断是，程序却输出相等的字样。这是因为编译器对两个变量进行比较时，因为他们的类型不同，而自动地将 valueB 转换成字符串，而后再和 valueA 进行比较的。用’===’得到的判断结果正和预期的结果相符。</p>
<h5 id=""><a href="#" class="headerlink" title="+"></a>+</h5><p>加号’+’也同样是程序员所熟知的操作符之一。JavaScript 和其他编程语言不同的是，在 JavaScript 中，’+’除了表示数字值相加，字符串相连接以外，还可以作一元运算符用，把字符串转换为数字。因而如果使用不当，则可能与自增符’++’混淆而引起计算错误。这一点，在清单 7 中可以清楚地看出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> valueA = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">var</span> valueB = <span class="string">&quot;10&quot;</span>;</span><br><span class="line">  <span class="comment">// Ouput: 2010.</span></span><br><span class="line">  alert( valueA + valueB);</span><br><span class="line">  <span class="comment">// Ouput: 30.</span></span><br><span class="line">  alert( valueA + (+valueB));</span><br><span class="line">  <span class="comment">// Ouput: 30.</span></span><br><span class="line">  alert( valueA + +valueB);</span><br><span class="line">  <span class="comment">// Compile error.</span></span><br><span class="line">  alert( valueA ++valueB);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8中使用AngularJS</title>
    <url>/2016/06/06/Drupal8-angularJS/</url>
    <content><![CDATA[<h2 id="Drupal8中使用AngularJS"><a href="#Drupal8中使用AngularJS" class="headerlink" title="Drupal8中使用AngularJS"></a>Drupal8中使用AngularJS</h2><p>首先我们需要一个基础模块引入并启动<code>angular</code></p>
<p>OK，先创建一个模块，我们起名叫<code>cloud_angular</code></p>
<p>在<code>cloud_angular</code>中，我们新建目录<code>libs</code>，里面存放所有与<code>angular</code>相关的库文件，<code>js</code>目录，里面存放angular的启动js：<code>app.js</code></p>
<p>接着，定义angular的library，就像这样：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud_angular.angular:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">VERSION</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">    <span class="attr">angular:</span></span><br><span class="line">      <span class="attr">libs/angular-loading-bar/build/loading-bar.css:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="attr">libs/angular/angular.js:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">libs/angular-animate/angular-animate.js:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">libs/angular-ui-router/release/angular-ui-router.js:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">libs/oclazyload/dist/ocLazyLoad.js:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">libs/angular-loading-bar/build/loading-bar.js:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">js/app.js:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">core/drupalSettings</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">core/drupal</span></span><br></pre></td></tr></table></figure>

<p>保存为<code>cloud_angular.libraries.yml</code>文件</p>
<p>最后，打开<code>cloud_angular.module</code>，实现<code>page</code>的<code>hook</code>，引入上面定义的库，就像下面这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_preprocess_page().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloud_angular_preprocess_page</span>(<span class="params">&amp;<span class="variable">$variables</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$variables</span>[<span class="string">&#x27;#attached&#x27;</span>][<span class="string">&#x27;library&#x27;</span>][] = <span class="string">&#x27;cloud_angular/cloud_angular.angular&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们在启用<code>cloud_angular</code>模块的时候，就全局加载了<code>angular</code></p>
<hr>
<p>好了，有了<code>angular</code>的启动支撑模块，接下来看下其它模块怎么使用<code>angular</code></p>
<p>举个例子，用户模块，命名：<code>cloud_user</code>，我们定义一个路由<code>profile/console</code>，用于显示用户的控制台首页(俗称dashboard)</p>
<p>按照drupa8的路由定义规则，我们需要新建一个文件<code>cloud_user.routing.yml</code>定义路由：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud_user.console:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;/profile/console&#x27;</span></span><br><span class="line">  <span class="attr">defaults:</span></span><br><span class="line">    <span class="attr">_controller:</span> <span class="string">&#x27;\Drupal\cloud_user\Controller\UserController::console&#x27;</span></span><br><span class="line">    <span class="attr">_title:</span> <span class="string">&#x27;控制台首页&#x27;</span></span><br><span class="line">  <span class="attr">requirements:</span></span><br><span class="line">    <span class="attr">_permission:</span> <span class="string">&#x27;access content&#x27;</span></span><br></pre></td></tr></table></figure>

<p>接着，在<code>cloud_user</code>模块下新建<code>src</code>目录及其子目录<code>Controller</code>，里面存放路由指定的控制器文件<code>UserController.php</code>，就像下面这样：</p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20160606/dir.png" alt="cloud_user模块目录解构"></p>
<p>控制器代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@contains</span> \Drupal\cloud_user\Controller\UserController.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">cloud_user</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Controller</span>\<span class="title">ControllerBase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Database</span>\<span class="title">Connection</span>; </span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">DependencyInjection</span>\<span class="title">ContainerInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">ControllerBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$database</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$userPath</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$database</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;database = <span class="variable">$database</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;userPath = drupal_get_path(<span class="string">&#x27;module&#x27;</span>, <span class="string">&#x27;cloud_user&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">ContainerInterface <span class="variable">$container</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">static</span>(</span><br><span class="line">      <span class="variable">$container</span>-&gt;get(<span class="string">&#x27;database&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">console</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$build</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;#theme&#x27;</span> =&gt; <span class="string">&#x27;cloud_common&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 这里我们把用户模块的路径传递到前端</span></span><br><span class="line">    <span class="variable">$build</span>[<span class="string">&#x27;#attached&#x27;</span>][<span class="string">&#x27;drupalSettings&#x27;</span>][<span class="string">&#x27;userPath&#x27;</span>] = <span class="keyword">$this</span>-&gt;userPath;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$build</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>cloud_common</code>的theme模版<code>cloud-common.html.twig</code>统一输出是</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>用于angular前端路由加载模版</p>
<p>接着，在<code>cloud_user</code>模块下新建<code>scripts</code>目录及其子目录<code>controller</code>和<code>directive</code>，对了，在<code>scripts</code>目录下新建文件<code>user.route.js</code>，用于定义用户模块的前端路由：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">angular, drupalSettings</span>) </span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@name <span class="variable">verycloud</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description </span>all user&#x27;s ng route here.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> verycloud = angular.module(<span class="string">&#x27;verycloud&#x27;</span>);</span><br><span class="line">  verycloud.config([<span class="string">&#x27;$stateProvider&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$stateProvider</span>) </span>&#123;</span><br><span class="line">    $stateProvider</span><br><span class="line">      .state(<span class="string">&#x27;dashboard&#x27;</span>, &#123;</span><br><span class="line">        url: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">        templateUrl: <span class="string">&#x27;dashboard/container.html&#x27;</span>,</span><br><span class="line">        resolve: &#123;</span><br><span class="line">          loadMyFile: <span class="function"><span class="keyword">function</span>(<span class="params">$ocLazyLoad</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $ocLazyLoad.load(&#123;</span><br><span class="line">              name: <span class="string">&#x27;console&#x27;</span>,</span><br><span class="line">              files: [</span><br><span class="line">                drupalSettings.userPath + <span class="string">&#x27;/scripts/directive/header/header.js&#x27;</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        abstract: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .state(<span class="string">&#x27;dashboard.console&#x27;</span>, &#123;</span><br><span class="line">        url: <span class="string">&#x27;/console&#x27;</span>,</span><br><span class="line">        templateUrl: <span class="string">&#x27;dashboard/dashboard.html&#x27;</span>,</span><br><span class="line">        controller: <span class="string">&#x27;ConsoleCtrl&#x27;</span>,</span><br><span class="line">        resolve: &#123;</span><br><span class="line">          loadMyFile: <span class="function"><span class="keyword">function</span>(<span class="params">$ocLazyLoad</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $ocLazyLoad.load(&#123;</span><br><span class="line">              name: <span class="string">&#x27;console&#x27;</span>,</span><br><span class="line">              files: [</span><br><span class="line">                drupalSettings.userPath + <span class="string">&#x27;/scripts/controller/consoleController.js&#x27;</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;]);</span><br><span class="line">&#125;)(angular, drupalSettings);</span><br></pre></td></tr></table></figure>

<p>接下来将这个路由文件定义成库，保存为<code>cloud_user.libraries.yml</code>，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud_user.user_route:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">VERSION</span></span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="attr">scripts/user.route.js:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>最后，回到<code>angular</code>的支撑模块<code>cloud_angular</code>，打开<code>cloud_angular.module</code>文件，在<code>hook_page</code>中引入用户模块的js库文件，就像下面这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_preprocess_page().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloud_angular_preprocess_page</span>(<span class="params">&amp;<span class="variable">$variables</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$variables</span>[<span class="string">&#x27;#attached&#x27;</span>][<span class="string">&#x27;library&#x27;</span>][] = <span class="string">&#x27;cloud_angular/cloud_angular.angular&#x27;</span>;</span><br><span class="line">  <span class="variable">$variables</span>[<span class="string">&#x27;#attached&#x27;</span>][<span class="string">&#x27;library&#x27;</span>][] = <span class="string">&#x27;cloud_user/cloud_user.user_route&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启用<code>cloud_user</code>模块，尝试访问’profile/console’</p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>angularjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8 Configuration Entity</title>
    <url>/2015/12/21/Drupal8-configuration-Entity/</url>
    <content><![CDATA[<p>Drupal8的实体由2部分组成，配置实体(configuration entities)和内容实体(content entities)。如图：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151222/20151222113456_92999.png" alt="Entity"></p>
<p>本节源代码见 <a href="https://github.com/RamboLau/drupal8-demos/tree/master/config_entities_example">https://github.com/RamboLau/drupal8-demos/tree/master/config_entities_example</a></p>
<p>内容实体见：<a href="http://verynull.com/2015/12/22/drupal8-content-entity/">http://verynull.com/2015/12/22/drupal8-content-entity/</a></p>
<p>###一、配置实体接口(configuration entity interface)</p>
<p>在src目录下touch DemoInterface.php，DemoInterface继承并实现<a href="https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Config%21Entity%21ConfigEntityInterface.php/interface/ConfigEntityInterface/8">ConfigEntityInterface</a>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\demo\DemoInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Config</span>\<span class="title">Entity</span>\<span class="title">ConfigEntityInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides an interface defining a demo entity type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DemoInterface</span> <span class="keyword">extends</span> <span class="title">ConfigEntityInterface</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Add get/set methods for your configuration properties here.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>###二、配置实体类(configuration entity class)<br>在src目录下创建Entity目录，并touch src/Entity/Demo.php，在这个文件中我们将实现DemoEntity。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\demo\Entity\Demo.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>\<span class="title">Entity</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Config</span>\<span class="title">Entity</span>\<span class="title">ConfigEntityBase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">demo</span>\<span class="title">DemoInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines the Demo entity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigEntityType</span>(</span></span><br><span class="line"><span class="comment"> *   id = &quot;demo&quot;,</span></span><br><span class="line"><span class="comment"> *   label = <span class="doctag">@Translation</span>(&quot;Demo&quot;),</span></span><br><span class="line"><span class="comment"> *   fieldable = FALSE,</span></span><br><span class="line"><span class="comment"> *   handlers = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;list_builder&quot; = &quot;Drupal\demo\DemoListBuilder&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;form&quot; = &#123;</span></span><br><span class="line"><span class="comment"> *       &quot;add&quot; = &quot;Drupal\demo\Form\DemoForm&quot;,</span></span><br><span class="line"><span class="comment"> *       &quot;edit&quot; = &quot;Drupal\demo\Form\DemoForm&quot;,</span></span><br><span class="line"><span class="comment"> *       &quot;delete&quot; = &quot;Drupal\demo\Form\DemoDeleteForm&quot;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   config_prefix = &quot;demo&quot;,</span></span><br><span class="line"><span class="comment"> *   admin_permission = &quot;administer site configuration&quot;,</span></span><br><span class="line"><span class="comment"> *   entity_keys = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;id&quot; = &quot;id&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;label&quot; = &quot;name&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   links = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;edit-form&quot; = &quot;/admin/structure/demos/&#123;demo&#125;&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;delete-form&quot; = &quot;/admin/structure/demos/&#123;demo&#125;/delete&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">ConfigEntityBase</span> <span class="keyword">implements</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The ID of the demo.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The demo name.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The demo sex.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$sex</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面定义Entity的方式熟悉吧！对，就是注解annotation。</p>
<p>@ConfigEntityType告诉Drupal这是一个配置实体。参数如下：<br>1、lable：翻译系统的标签<br>2、fieldable: 附加字段，配置实体一般为FALSE，内容实体一般为TRUE<br>3、handlers：管理该实体所需要的类<br>4、list_builder：提供该实体的管理界面接口<br>5、config_prefix：配置的前缀，一般用于schema<br>6、admin_permission：管理员权限<br>7、entity_keys：主要实体属性的集合<br>8、links：编辑和删除的路径，在demo.routing.yml中定义</p>
<p>###三、实体表单(entity form)</p>
<p>接下来我们来实现在Entity中的定义的表单，如add, edit, delete。</p>
<p>####1、mkdir -p src/Form，并touch src/Form/DemoForm.php。<br>在DemoForm主要实现2个方法，form()和save()。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\demo\Form\DemoForm.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>\<span class="title">Form</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityForm</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityTypeInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">DependencyInjection</span>\<span class="title">ContainerInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">Query</span>\<span class="title">QueryFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Form</span>\<span class="title">FormStateInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class DemoForm</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Form class for adding/editing demo config entities.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoForm</span> <span class="keyword">extends</span> <span class="title">EntityForm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> \Drupal\Core\Entity\Query\QueryFactory $entity_query</span></span><br><span class="line"><span class="comment">   *   The entity query.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">QueryFactory <span class="variable">$entity_query</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;entityQuery = <span class="variable">$entity_query</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">ContainerInterface <span class="variable">$container</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">static</span>(</span><br><span class="line">      <span class="variable">$container</span>-&gt;get(<span class="string">&#x27;entity.query&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">form</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$form</span> = <span class="built_in">parent</span>::form(<span class="variable">$form</span>, <span class="variable">$form_state</span>);</span><br><span class="line">    <span class="variable">$demo</span> = <span class="keyword">$this</span>-&gt;entity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Change page title for the edit operation</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;operation == <span class="string">&#x27;edit&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable">$form</span>[<span class="string">&#x27;#title&#x27;</span>] = <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Edit demo: @name&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;@name&#x27;</span> =&gt; <span class="variable">$demo</span>-&gt;name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The demo name.</span></span><br><span class="line">    <span class="variable">$form</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;textfield&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;#title&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Name&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;#maxlength&#x27;</span> =&gt; <span class="number">255</span>,</span><br><span class="line">      <span class="string">&#x27;#default_value&#x27;</span> =&gt; <span class="variable">$demo</span>-&gt;name,</span><br><span class="line">      <span class="string">&#x27;#description&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;t(<span class="string">&quot;demo name.&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;#required&#x27;</span> =&gt; <span class="literal">TRUE</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The unique machine name of the demo.</span></span><br><span class="line">    <span class="variable">$form</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;machine_name&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;#maxlength&#x27;</span> =&gt; EntityTypeInterface::BUNDLE_MAX_LENGTH,</span><br><span class="line">      <span class="string">&#x27;#default_value&#x27;</span> =&gt; <span class="variable">$demo</span>-&gt;id,</span><br><span class="line">      <span class="string">&#x27;#disabled&#x27;</span> =&gt; !<span class="variable">$demo</span>-&gt;isNew(),</span><br><span class="line">      <span class="string">&#x27;#machine_name&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;exists&#x27;</span> =&gt; <span class="string">&#x27;demo_load&#x27;</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The sex.</span></span><br><span class="line">    <span class="variable">$form</span>[<span class="string">&#x27;sex&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;select&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;#options&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;Man&#x27;</span> =&gt; <span class="string">&#x27;Man&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Woman&#x27;</span> =&gt; <span class="string">&#x27;Woman&#x27;</span>,</span><br><span class="line">      ),</span><br><span class="line">      <span class="string">&#x27;#title&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Sex&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;#maxlength&#x27;</span> =&gt; <span class="number">255</span>,</span><br><span class="line">      <span class="string">&#x27;#default_value&#x27;</span> =&gt; <span class="variable">$demo</span>-&gt;sex,</span><br><span class="line">      <span class="string">&#x27;#description&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;t(<span class="string">&quot;sex&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;#required&#x27;</span> =&gt; <span class="literal">TRUE</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$form</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$demo</span> = <span class="keyword">$this</span>-&gt;entity;</span><br><span class="line">    <span class="variable">$status</span> = <span class="variable">$demo</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$status</span>) &#123;</span><br><span class="line">      <span class="comment">// Setting the success message.</span></span><br><span class="line">      drupal_set_message(<span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Saved the demo: @label.&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;@label&#x27;</span> =&gt; <span class="variable">$demo</span>-&gt;name,</span><br><span class="line">      )));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      drupal_set_message(<span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;The @label demo was not saved.&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;@label&#x27;</span> =&gt; <span class="variable">$demo</span>-&gt;name,</span><br><span class="line">      )));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$form_state</span>-&gt;setRedirect(<span class="string">&#x27;demo.list&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151222/20151222212259_77460.png" alt="DemoForm"></p>
<p>####2、touch src/Form/DemoFormDelete.php。</p>
<p>DemoFormDelete继承<a href="https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21EntityConfirmFormBase.php/class/EntityConfirmFormBase/8">EntityConfirmFormBase</a>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\demo\Form\DemoDeleteForm.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>\<span class="title">Form</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityConfirmFormBase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Url</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Form</span>\<span class="title">FormStateInterface</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Form that handles the removal of demo entities.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoDeleteForm</span> <span class="keyword">extends</span> <span class="title">EntityConfirmFormBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getQuestion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Are you sure you want to delete this demo: @name?&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;@name&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;entity-&gt;name));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCancelUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Url(<span class="string">&#x27;demo.list&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConfirmText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Delete&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">submitForm</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Delete and set message</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;entity-&gt;delete();</span><br><span class="line">    drupal_set_message(<span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;The demo @name has been deleted.&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;@name&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;entity-&gt;name)));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$form_state</span>-&gt;setRedirectUrl(<span class="keyword">$this</span>-&gt;getCancelUrl());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如图：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151222/20151222212429_43428.png" alt="FormDelete"></p>
<p>###四、list builder</p>
<p>接下来就该创建管理界面啦！</p>
<p>在src目录下，touch DemoListBuilder.php</p>
<p>DemoListBuilder继承<a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Config!Entity!ConfigEntityListBuilder.php/class/ConfigEntityListBuilder/8">ConfigEntityListBuilder</a>，实现了三个方法。</p>
<p>1、buildHeader：创建表格header<br>2、buildRow：创建表格行<br>3、render：重写表格输出的内容，类似于Drupal7的hook</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Contains Drupal\demo\DemoListBuilder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Config</span>\<span class="title">Entity</span>\<span class="title">ConfigEntityListBuilder</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoListBuilder</span> <span class="keyword">extends</span> <span class="title">ConfigEntityListBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildHeader</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$header</span>[<span class="string">&#x27;label&#x27;</span>] = <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Name&#x27;</span>);</span><br><span class="line">    <span class="variable">$header</span>[<span class="string">&#x27;sex&#x27;</span>] = <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Sex&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$header</span> + <span class="built_in">parent</span>::buildHeader();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildRow</span>(<span class="params">EntityInterface <span class="variable">$entity</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Label</span></span><br><span class="line">    <span class="variable">$row</span>[<span class="string">&#x27;label&#x27;</span>] = <span class="keyword">$this</span>-&gt;getLabel(<span class="variable">$entity</span>);</span><br><span class="line">    <span class="comment">// Sex</span></span><br><span class="line">    <span class="variable">$row</span>[<span class="string">&#x27;sex&#x27;</span>] = <span class="variable">$entity</span>-&gt;sex;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$row</span> + <span class="built_in">parent</span>::buildRow(<span class="variable">$entity</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$build</span> = <span class="built_in">parent</span>::render();</span><br><span class="line">    <span class="variable">$build</span>[<span class="string">&#x27;#empty&#x27;</span>] = <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;There are no data available.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$build</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如图：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151222/20151222212547_35896.png" alt="ListBuilder"></p>
<p>###五、schema</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir config/schema</span><br><span class="line">touch demo.schema.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schema for the configuration files of the Demo module.</span></span><br><span class="line"></span><br><span class="line">demo.demo.*:</span><br><span class="line">  type: mapping</span><br><span class="line">  label: <span class="string">&#x27;Demo&#x27;</span></span><br><span class="line">  mapping:</span><br><span class="line">    id:</span><br><span class="line">      type: <span class="keyword">string</span></span><br><span class="line">      label: <span class="string">&#x27;Demo identifier&#x27;</span></span><br><span class="line">    uuid:</span><br><span class="line">      type: <span class="keyword">string</span></span><br><span class="line">      label: <span class="string">&#x27;UUID&#x27;</span></span><br><span class="line">    name:</span><br><span class="line">      type: label</span><br><span class="line">      label: <span class="string">&#x27;Name&#x27;</span></span><br><span class="line">    sex:</span><br><span class="line">      type: <span class="keyword">string</span></span><br><span class="line">      label: <span class="string">&#x27;Sex&#x27;</span></span><br><span class="line">      translatable: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>schema的命名规则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(demo module).(demo configuration entity <span class="built_in">type</span>).(all demo configuration entities).</span><br></pre></td></tr></table></figure>

<p>uuid在这里也可以不用定义，drupal默认会添加。</p>
<p>###六、routing</p>
<p>定义一些路由：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">demo.list:</span><br><span class="line">  path: <span class="string">&#x27;/admin/structure/demos&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _entity_list: <span class="string">&#x27;demo&#x27;</span></span><br><span class="line">    _title: <span class="string">&#x27;Demos&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;administer site configuration&#x27;</span></span><br><span class="line">demo.add:</span><br><span class="line">  path: <span class="string">&#x27;/admin/structure/demos/add&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _entity_form: <span class="string">&#x27;demo.add&#x27;</span></span><br><span class="line">    _title: <span class="string">&#x27;Add a new demo&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;administer site configuration&#x27;</span></span><br><span class="line">entity.demo.edit_form:</span><br><span class="line">  path: <span class="string">&#x27;/admin/structure/demos/&#123;demo&#125;&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _entity_form: <span class="string">&#x27;demo.edit&#x27;</span></span><br><span class="line">    _title: <span class="string">&#x27;Edit demo&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;administer site configuration&#x27;</span></span><br><span class="line">entity.demo.delete_form:</span><br><span class="line">  path: <span class="string">&#x27;/admin/structure/demos/&#123;demo&#125;/delete&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _entity_form: <span class="string">&#x27;demo.delete&#x27;</span></span><br><span class="line">    _title: <span class="string">&#x27;Delete demo&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;administer site configuration&#x27;</span></span><br></pre></td></tr></table></figure>

<p>###七、 links</p>
<p>####1、显示添加按钮在网页上，需要在demo.links.action.yml中定义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">demo.add:</span><br><span class="line">  route_name: <span class="string">&#x27;demo.add&#x27;</span></span><br><span class="line">  title: <span class="string">&#x27;Add demo&#x27;</span></span><br><span class="line">  appears_on:</span><br><span class="line">    - demo.list</span><br></pre></td></tr></table></figure>

<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151222/20151222212157_21914.png" alt="demo.add"></p>
<p>####2、在admin/structure页面显示demo，需要在demo.links.menu.yml中定义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">demo.list:</span><br><span class="line">  title: Demo</span><br><span class="line">  description: <span class="string">&#x27;Administrator the demo entities&#x27;</span></span><br><span class="line">  parent: system.admin_structure</span><br><span class="line">  route_name: demo.list</span><br></pre></td></tr></table></figure>

<p>如图：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151222/20151222212041_77165.png" alt="demo.list"></p>
<p>参考文章：<br>1、<a href="http://www.slideshare.net/andypost/d8-entity">http://www.slideshare.net/andypost/d8-entity</a><br>2、<a href="http://www.sitepoint.com/drupal-8-version-entityfieldquery/">http://www.sitepoint.com/drupal-8-version-entityfieldquery/</a><br>3、<a href="https://www.drupal.org/node/1809494">https://www.drupal.org/node/1809494</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>entity</tag>
      </tags>
  </entry>
  <entry>
    <title>drupal8-css-guide</title>
    <url>/2016/05/24/Drupal8-css-guide/</url>
    <content><![CDATA[<h1 id="CSS格式"><a href="#CSS格式" class="headerlink" title="CSS格式"></a>CSS格式</h1><h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h2><blockquote>
<p>缩进</p>
</blockquote>
<p>不要使用tab键进行缩进，采用2个空格进行缩进。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="comment">/* This line is indented with 2 spaces, 2 spaces x 1 level of indentation. */</span></span><br><span class="line">  <span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="comment">/* This line is indented with 4 spaces, 2 spaces x 2 levels of indentation. */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>空白行</p>
</blockquote>
<ul>
<li>通常，规则块之间不需要空白行作为分隔</li>
<li>如果规则块之前有单行或者块级注释，那么需要在注释之前空白行</li>
<li>如果两个规则块之间没有空白行，那么必然具有逻辑关系。如果没有的话，需要添加空白行。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* A comment describing the ruleset. */</span></span><br><span class="line"><span class="selector-class">.selector-1</span>,</span><br><span class="line"><span class="selector-class">.selector-2</span>,</span><br><span class="line"><span class="selector-class">.selector-3</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">     -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">          <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Times, <span class="string">&quot;Times New Roman&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fff</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A longer comment describing this ruleset. Note</span></span><br><span class="line"><span class="comment"> * the blank line before the docblock.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.selector-4</span>,</span><br><span class="line"><span class="selector-class">.selector-5</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This logical grouping of rulesets has no interleaving blank lines. */</span></span><br><span class="line"><span class="selector-class">.profile</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.profile__picture</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right; <span class="comment">/* LTR */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>行尾</p>
</blockquote>
<p>行尾绝不能有任何空白(空白或者tab)。所有的文件应该以单个空白行结尾。</p>
<p>文件应该以Unix行尾格式结尾(<code>\n</code>或者<code>LF</code>)，同时也是MAC OS X的默认方式，不要使用windows的行尾格式(<code>\r\n</code>或者<code>CRLF</code>)</p>
<p>小提示：文本编辑启用<code>show invisibles</code>。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote>
<p>文件注释</p>
</blockquote>
<p>每一个文件应该以注释开头，注释中写明文件的用途。例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file</span></span><br><span class="line"><span class="comment"> * Short description describing the file.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The first sentence of the long description starts here and continues on this</span></span><br><span class="line"><span class="comment"> * line for a while finally concluding here at the end of this paragraph.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>多行注释</p>
</blockquote>
<p>当用于描述一个或者一组规则集的时候，注释应该遵循Doxygen注释风格(也被称作”docblock”)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Short description using Doxygen-style comment format.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The first sentence of the long description starts here and continues on this</span></span><br><span class="line"><span class="comment"> * line for a while finally concluding here at the end of this paragraph.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The long description is ideal for more detailed explanations and</span></span><br><span class="line"><span class="comment"> * documentation. It can include example HTML, URLs, or any other information</span></span><br><span class="line"><span class="comment"> * that is deemed necessary or useful.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.example-rule</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>单行注释</p>
</blockquote>
<p>当用于描述一个属性或者一个规则集的时候，注释应该控制在80个字符并遵循简单CSS注释风格。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="comment">/* Override the default margins. */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is a variant of the .example component. */</span></span><br><span class="line"><span class="selector-class">.example--item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将注释直接放在属性或者它的规则集前面，并保持与它所属的属性或者规则集相同的缩进。</p>
<p>如果注释用于描述一个规则集，记得在规则集前面添加一空白行。</p>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>CSS格式规范确保代码的可读性，注释的清晰性，最大化减少意外错误的情况。</p>
<blockquote>
<p>规则集</p>
</blockquote>
<ul>
<li>每个选择器独占一行，即使有多个逗号相隔的选择器。</li>
<li>起始大括号<code>&#123;</code>与选择器保持同行(如果有多个就与最后一个选择器保持同一行)，并以单个空格相隔。</li>
<li>结束大括号<code>&#125;</code>保持与规则集中选择器的第一个字符保同一列。</li>
<li>每一行样式规则都应该相对于它的选择器进行缩进。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector-alpha</span>,</span><br><span class="line"><span class="selector-class">.selector-beta</span> &#123;</span><br><span class="line">  <span class="attribute">counter-reset</span>: section;</span><br><span class="line">  <span class="attribute">text-transform</span>: small-caps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>属性</p>
</blockquote>
<ul>
<li>属性名后面紧跟着<code>:</code>，然后是一个空格，接着是属性值。</li>
<li>每行样式规则以<code>;</code>结尾，包括规则集中的最后一条样式规则。</li>
<li>十六进制的颜色请使用小写，如果可能的话，使用速写，例如：<code>#aaa</code>。</li>
<li>对于需要引号的属性值，请使用双引号，例如：<code>font-family: &quot;Arial Black&quot;, Arial, sans-serif; and content: &quot; &quot;;</code>。</li>
<li>如果属性值不要求带有引号，那就不加引号。例如：<code>background-image: url(path/image.png)</code>，不需要写成<code>background-image: url(&quot;path/image.png&quot;)</code>。</li>
<li>使用rem作为单位替代px，除非它造成了意外的效果。</li>
<li>选择器中的属性值加双引号，例如：<code>input[type=&quot;checkbox&quot;]</code>。</li>
<li>对于0值，不需要带单位。例如：<code>margin: 0;</code>，代替<code>margin: 0px;</code>。</li>
<li>每一个<code>,</code>后面跟一个空格。</li>
<li>括号两边不要加空格，例如：<code>color: rgba(0, 0, 0, 0.8);</code>。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  Basic syntax */</span></span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Use shorthand syntax for hexadecimal colors when possible</span></span><br><span class="line"><span class="comment"> * Always use lowercase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#df7dcf</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Use double quotes instead of single quotes */</span></span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Frutiger Ultra&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Do not attach units to zero-values */</span></span><br><span class="line"><span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#ddd</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Use rem units preceded by px units for a safe fallback,</span></span><br><span class="line"><span class="comment"> * unless it creates an undesired effect.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Spaces MUST follow commas in property or function values */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">136</span>, <span class="number">18</span>, <span class="number">0.8</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>属性声明顺序</p>
</blockquote>
<ol>
<li>Positioning：position, float, clear, top, right, bottom, left, direction, and z-index</li>
<li>Box model：display, [(max|min)-]height, [(max|min)-]width, margin, padding, border 以及它们对应的可变样式规则(例如：margin-top等.)，以及box-sizing</li>
<li>其它</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="comment">/* Positioning declarations */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">  <span class="comment">/* Box model declarations */</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.625rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">  <span class="comment">/* Other declarations */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.125rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>特例</p>
</blockquote>
<p>单行样式规则块，起始大括号的后面以及结束大括号的后面包含一个空格。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector-1</span> &#123; <span class="attribute">width</span>: <span class="number">10%</span>; &#125;</span><br><span class="line"><span class="selector-class">.selector-2</span> &#123; <span class="attribute">width</span>: <span class="number">20%</span>; &#125;</span><br><span class="line"><span class="selector-class">.selector-3</span> &#123; <span class="attribute">width</span>: <span class="number">30%</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>很长的，逗号相隔的属性值例如，<code>gradients</code>或者<code>shadows</code>，可能占据多行。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">#fff</span>, <span class="number">#ccc</span>),</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">#f3c</span>, <span class="number">#4ec</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>:</span><br><span class="line">    <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>,</span><br><span class="line">    <span class="number">2px</span> <span class="number">2px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#ccc</span> inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Media Queries</p>
</blockquote>
<p>Media queries的写法遵从规则集的写法。</p>
<ul>
<li>media feature和值之间加个空格。</li>
<li>所有的值以rem为单位。</li>
<li>px值直接加在起始大括号之后。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">28.125rem</span>) &#123; <span class="comment">/* 450px */</span></span><br><span class="line">  <span class="selector-id">#page</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">1.25rem</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">1.25rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><blockquote>
<p>@charset语句</p>
</blockquote>
<p>字符集语句(例如：<code>@charset &quot;UTF-8&quot;;</code>)只在css文件最开头的时候才会生效。当Drupal的css合并器合并多个css文件到一个文件时，Drupal会忽略<code>@charset</code>语句。这就意味着，CSS文件不必要加<code>@charset</code>语句。CSS文件默认编码是<code>UTF-8</code>。任何CSS注释或者属性值必须以<code>UTF-8</code>编码。</p>
<blockquote>
<p>综合例子：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file</span></span><br><span class="line"><span class="comment"> * Layouts for this theme.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Column layout with horizontal scroll.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This creates a single row of full-height, non-wrapping columns that can be</span></span><br><span class="line"><span class="comment"> * browsed horizontally within their parent.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Example HTML:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;div class=&quot;grid&quot;&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;div class=&quot;cell cell-3&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;div class=&quot;cell cell-3&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;div class=&quot;cell cell-3&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/div&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Grid container</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Must only contain &#x27;.cell&#x27; children.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* Remove inter-cell whitespace */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* Prevent inline-block cells wrapping */</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Grid cells</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * No explicit width by default. Extend with &#x27;.cell-n&#x27; classes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.cell</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* Set the inter-cell spacing */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.625rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">  <span class="comment">/* Reset white-space */</span></span><br><span class="line">  <span class="attribute">white-space</span>: normal;</span><br><span class="line">  <span class="comment">/* Reset font-size */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Cell states */</span></span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-class">.is-animating</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fffdec</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Cell dimensions */</span></span><br><span class="line"><span class="selector-class">.cell-1</span> &#123; <span class="attribute">width</span>: <span class="number">10%</span>; &#125;</span><br><span class="line"><span class="selector-class">.cell-2</span> &#123; <span class="attribute">width</span>: <span class="number">20%</span>; &#125;</span><br><span class="line"><span class="selector-class">.cell-3</span> &#123; <span class="attribute">width</span>: <span class="number">30%</span>; &#125;</span><br><span class="line"><span class="selector-class">.cell-4</span> &#123; <span class="attribute">width</span>: <span class="number">40%</span>; &#125;</span><br><span class="line"><span class="selector-class">.cell-5</span> &#123; <span class="attribute">width</span>: <span class="number">50%</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Cell modifiers */</span></span><br><span class="line"><span class="selector-class">.cell--detail</span>,</span><br><span class="line"><span class="selector-class">.cell--important</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="CSS架构"><a href="#CSS架构" class="headerlink" title="CSS架构"></a>CSS架构</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><blockquote>
<p>可预期性</p>
</blockquote>
<p>CSS代码具有易读性，容易理解。修改时只修改你需要的而不会发生其它错误。</p>
<blockquote>
<p>可重用</p>
</blockquote>
<p>CSS规则足够简约和解耦，以便可以快速从已经存在的部分构建新的组件。</p>
<blockquote>
<p>可维护</p>
</blockquote>
<p>我们会一直添加新的组件和特性，我们需要保证添加的时候会很容易，不需要破坏原有的样式解构。</p>
<blockquote>
<p>可扩展</p>
</blockquote>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><blockquote>
<p>避免依赖HTML结构</p>
</blockquote>
<ul>
<li>CSS应该定义某个元素在任何位置出现时应该显示的样子</li>
<li>为元素标记class，不要在CSS中使用id选择器</li>
<li>保证选择器足够短。最优的选择器就是一个class或者一个元素</li>
<li>有时候multi-part选择器很实用。例如：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Add a horizontal rule between adjacent list rows</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * Could be part of an implementation of the Pears “slats” component:</span></span><br><span class="line"><span class="comment">  * http://pea.rs/content/slats-html5 </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="selector-class">.slat</span> + <span class="selector-class">.slat</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#cccccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然而，需要注意的是：</p>
<ol>
<li>在multi-part选择器中尽量避免原生标记，例如：<code>div</code>, <code>span</code></li>
<li>如果可能的话避免出现后代选择器(例如：<code>.my-list li</code>)，特别是一个组件包含另一个组件的时候</li>
<li>避免出现2个以上的组合。下面这个例子就很糟糕：<code>.my-list &gt; li &gt; a</code></li>
<li>如果怀疑的话，直接给元素加一个class或者加上样式</li>
</ol>
<blockquote>
<p>使用组件自己的class命名组件元素</p>
</blockquote>
<p>为了避免依赖html标签结构，更加明确地定义一个组件元素，可以给组件加上以<code>_</code>相连的组件名。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.component</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Component elements */</span></span><br><span class="line"><span class="selector-class">.component__header</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.component__body</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用修饰class扩展组件</p>
</blockquote>
<p>例如：</p>
<p>CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 按钮组件 */</span></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="comment">/* styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按钮修饰类 */</span></span><br><span class="line"><span class="selector-class">.button--primary</span> &#123;</span><br><span class="line">  <span class="comment">/* modifications and additions */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Button variant is created by applying both component and modifier classes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button button--primary&quot;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>分离出相关的css</p>
</blockquote>
<p>组件的职责不是为了站点的定位和布局。不要应用<code>width</code>和<code>height</code>，除非那个元素原生带有这些属性(例如：img)。</p>
<p>避免使用js改变内联样式。例如，状态的变化，这时候就该定义一个名为<code>is-active</code>的class用于描述状态的变化。</p>
<p>Drupal8使用<a href="https://smacss.com/book/">SMACSS</a>系统类归类css规则：</p>
<ul>
<li>Base</li>
</ul>
<p>Base由只渲染html元素的样式规则组成，例如用于CSS reset或者<a href="http://necolas.github.com/normalize.css/">Normalize.css</a>。Base中不应该包含任何类选择器。</p>
<ul>
<li>Layout</li>
</ul>
<p>页面元素布局，例如grid系统</p>
<ul>
<li>Component</li>
</ul>
<p>可重用、独立的UI元素。</p>
<ul>
<li>State</li>
</ul>
<p>处理组件显示变化的样式集。通常，是在用户与页面交互时触发的样式变化，例如：hover，打开一个模态框等。主要方式有：</p>
<ul>
<li><p>自定义class，以前缀’.is-‘开头，例如：<code>.is-transitioning</code>, <code>.is-open</code></p>
</li>
<li><p>伪类，例如：<code>:hover</code>、 <code>:checked</code></p>
</li>
<li><p>以状态语义作为属性的html元素，。例如：<code>details[open]</code></p>
</li>
<li><p>media queries</p>
</li>
<li><p>Theme</p>
</li>
</ul>
<p>纯粹的可见样式，例如：<code>border</code>，<code>box-shadow</code>，<code>colors</code>，backgrounds，font properties等</p>
<blockquote>
<p>类名格式</p>
</blockquote>
<p>类名应该使用全称而不是缩写。例如：<code>class=&quot;button&quot;</code>而不是<code>class=&quot;btn&quot;</code></p>
<p>组件的类名应该使用<code>-</code>分隔两个单词，例如：<code>class=&quot;button-group&quot;</code>，而不是<code>class=&quot;buttongroup&quot;</code></p>
<blockquote>
<p>原文地址，<a href="https://www.drupal.org/node/1887862">请戳这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>drush for drupal8</title>
    <url>/2015/11/02/Drupal8-drush/</url>
    <content><![CDATA[<p>文档见<a href="http://docs.drush.org/en/master/install/%EF%BC%8C%E8%BF%99%E9%87%8C%E8%AE%B0%E5%BD%95%E4%B8%8B%E7%AC%94%E8%80%85%E7%9A%84%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B%E3%80%82">http://docs.drush.org/en/master/install/，这里记录下笔者的安装流程。</a></p>
<p>##1、安装composer</p>
<p>作为最知名的php第三方库安装工具，drush也支持使用这种方式安装。<br>composer的安装比较简单。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/bin --filename=composer</span><br></pre></td></tr></table></figure>

<p>vim ~/.bashrc 并添加一条 export PATH=”$HOME/.composer/vendor/bin:$PATH”。</p>
<p>##2、安装drush</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create and/or navigate to a path for the single Composer Drush install.</span></span><br><span class="line">mkdir --parents /opt/drush-8.x</span><br><span class="line"><span class="built_in">cd</span> /opt/drush-8.x</span><br><span class="line"><span class="comment"># Initialise a new Composer project that requires Drush.</span></span><br><span class="line">composer init --require=drush/drush:8.* -n</span><br><span class="line"><span class="comment"># Configure the path Composer should use for the Drush vendor binaries.</span></span><br><span class="line">composer config bin-dir /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="comment"># Install Drush. </span></span><br><span class="line">composer install</span><br></pre></td></tr></table></figure>

<p>安装完，如果有Unable to load autoload.php…的错误，编辑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/drush/drush/drush/includes/preflight.inc</span><br></pre></td></tr></table></figure>

<p>查找$global_vendor_path，修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$global_vendor_path</span> = DRUSH_BASE_PATH . <span class="string">&#x27;/../vendor/autoload.php&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drush version</span><br></pre></td></tr></table></figure>

<p>如果显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Drush Version:  8.1.2</span><br></pre></td></tr></table></figure>

<p>则安装成功。</p>
<p>为什么要安装drush?因为drush是一款非常优秀的drupal管理工具，drupal离不开drush。<br>下文将讲解如何把drupal7的模块转化为drupal8的模块。</p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>drush</tag>
      </tags>
  </entry>
  <entry>
    <title>drupal8表单(form)</title>
    <url>/2015/11/12/Drupal8-form/</url>
    <content><![CDATA[<p>这里简单做下Entity Form的实现，包括调用模板输出form.<br>详情请访问俺的github，链接地址： <a href="https://github.com/aboutblankchina/drupal8_test">https://github.com/aboutblankchina/drupal8_test</a></p>
<p>1、首先创建相关文件<br>[$install_path]/modules/hello_world/lib/Drupal/hello_world/Entity/Hello.php<br>注：该文件定义实例（Entity）</p>
<p>如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Definition of Drupal\hello_world\Entity\Hello.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">hello_world</span>\<span class="title">Entity</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">ContentEntityBase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityStorageControllerInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Field</span>\<span class="title">FieldDefinition</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Language</span>\<span class="title">Language</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Session</span>\<span class="title">AccountInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines the hello entity class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EntityType</span>(</span></span><br><span class="line"><span class="comment"> *   id = &quot;hello&quot;,</span></span><br><span class="line"><span class="comment"> *   label = <span class="doctag">@Translation</span>(&quot;Hello&quot;),</span></span><br><span class="line"><span class="comment"> *   controllers = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;storage&quot; = &quot;Drupal\Core\Entity\FieldableDatabaseStorageController&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;view_builder&quot; = &quot;Drupal\Core\Entity\EntityViewBuilder&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;form&quot; = &#123;</span></span><br><span class="line"><span class="comment"> *       &quot;default&quot; = &quot;Drupal\hello_world\HelloWorldFormController&quot;,</span></span><br><span class="line"><span class="comment"> *     &#125;,</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   base_table = &quot;node&quot;,</span></span><br><span class="line"><span class="comment"> *   entity_keys = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;id&quot; = &quot;nid&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;label&quot; = &quot;title&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;uuid&quot; = &quot;uuid&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   links = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;edit-form&quot; = &quot;hello.edit&quot;,</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">ContentEntityBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要说明的是，上面的一部分注释(Annotation)是必须使用的，这是symfony的标准。<br>Symfony2框架中大量使用了Annotation：从缓存的定义到路由的配置，甚至到表结构的定义，处处都使用了Annotation功能。你甚至可以根据规范编写自己的Annotation。所以在使用Symfony2开发程序时，复杂的逻辑会变成一行行清晰的注释，程序的流程控制将变得非常简单。<br>详细见 <a href="https://api.drupal.org/api/drupal/core!modules!system!system.api.php/group/annotation/8">https://api.drupal.org/api/drupal/core!modules!system!system.api.php/group/annotation/8</a> 。</p>
<p>2、在hello_world.routing.yml中增加一行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">hello.edit:</span><br><span class="line">  path: <span class="string">&#x27;/hello/edit&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _entity_form: <span class="string">&#x27;hello.default&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;access hello world&#x27;</span></span><br></pre></td></tr></table></figure>

<p>3、创建文件 lib/Drupal/hello_world/HelloWorldFormController.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Definition of Drupal\hello_world\HelloWorldFormController.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">hello_world</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Component</span>\<span class="title">Utility</span>\<span class="title">NestedArray</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Datetime</span>\<span class="title">DrupalDateTime</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">ContentEntityFormController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Language</span>\<span class="title">Language</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Component</span>\<span class="title">Utility</span>\<span class="title">String</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Form controller for the node edit forms.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldFormController</span> <span class="keyword">extends</span> <span class="title">ContentEntityFormController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">form</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$form</span>, <span class="keyword">array</span> &amp;<span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$form</span> = <span class="built_in">parent</span>::form(<span class="variable">$form</span>, <span class="variable">$form_state</span>); <span class="variable">$entity</span> = <span class="keyword">$this</span>-&gt;entity;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$form</span>[<span class="string">&#x27;#title&#x27;</span>] = <span class="string">&#x27;这里写入网页标题&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$form</span>[<span class="string">&#x27;title&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;textfield&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;#title&#x27;</span> =&gt; t(<span class="string">&#x27;Title&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;#default_value&#x27;</span> =&gt; <span class="variable">$entity</span>-&gt;title-&gt;value,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果要用模板输出。则这样调用</span></span><br><span class="line">    <span class="variable">$form</span>[<span class="string">&#x27;#theme&#x27;</span>] = <span class="string">&#x27;hello_world_form&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$form</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$form</span>, <span class="keyword">array</span> &amp;<span class="variable">$form_state</span></span>) </span>&#123; </span><br><span class="line">    <span class="variable">$entity</span> = <span class="keyword">$this</span>-&gt;entity;</span><br><span class="line">    <span class="variable">$entity</span>-&gt;save();</span><br><span class="line">    drupal_set_message(<span class="string">&quot;hello saved&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$form</span>, <span class="keyword">array</span> &amp;<span class="variable">$form_state</span></span>) </span>&#123; </span><br><span class="line">    <span class="variable">$entity</span> = <span class="keyword">$this</span>-&gt;entity;</span><br><span class="line">    <span class="variable">$entity</span>-&gt;delete();</span><br><span class="line">    drupal_set_message(<span class="string">&quot;hello has been deleted.&quot;</span>); </span><br><span class="line">    <span class="variable">$form_sate</span>[<span class="string">&#x27;redirect_route&#x27;</span>][<span class="string">&#x27;route_name&#x27;</span>] = <span class="string">&#x27;&lt;front&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4、如果要使用模板输出，则要定义hook_theme</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_theme().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_world_theme</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;hello_world_form&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;render element&#x27;</span> =&gt; <span class="string">&#x27;form&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;template&#x27;</span> =&gt; <span class="string">&#x27;hello-world-form&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost/drupal8/hello/edit%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%A1%A8%E5%8D%95%E4%BA%86%E3%80%82">http://localhost/drupal8/hello/edit就可以看到表单了。</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>form</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8 Routing</title>
    <url>/2015/12/23/Drupal8-routing/</url>
    <content><![CDATA[<p>Drupal8的路由控制系统跟Drupal7完全不同，在drupal7中，路由一般是定义在module文件的hook_menu中，如链接、访问控制、回调方法等。而drupal8由于包含了Symfony2的路由组件（Symfony2 Routing component），一般定义在{module_name}.routing.yml中。</p>
<p>本文介绍如何创建一个路由控制器，并如何使用依赖注入(DI)。</p>
<p>下面这张图非常明了的说明了他们之间的关系。</p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223201522_69597.png" alt="D8-routing"></p>
<p>本文github： <a href="https://github.com/RamboLau/drupal8-demos/tree/master/routing_example">https://github.com/RamboLau/drupal8-demos/tree/master/routing_example</a></p>
<p>###一、静态路由(Static Routes)</p>
<p>####1、Drupal7路由</p>
<p>在Drupal7中，通过hook_menu来管理路由，但是这就导致代码的耦合性太高，如果要提供丰富的返回格式，如JSON, XML or HTML，就无能为力了！</p>
<p>如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_menu()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routing_example_menu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$items</span>[<span class="string">&#x27;hello&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span> =&gt; <span class="string">&quot;hello world page&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;route_name&#x27;</span> =&gt; <span class="string">&#x27;helloWorldPage&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;type&#x27;</span> =&gt; MENU_LOCAL_TASK,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$items</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_permission().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routing_example_permission</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;access hello world&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;title&#x27;</span> =&gt; t(<span class="string">&#x27;Access hello world page&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>####2、Drupal8路由</p>
<p>#####routing_example.routing.yml</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">routing_example.example_controller_index:</span><br><span class="line">  path: <span class="string">&#x27;/routing_example/index/hello/&#123;name&#125;&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _controller: <span class="string">&#x27;\Drupal\routing_example\Controller\BaseController::index&#x27;</span></span><br><span class="line">    _title: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;access content&#x27;</span></span><br><span class="line"></span><br><span class="line">routing_example.example_controller_dependency_injection:</span><br><span class="line">  path: <span class="string">&#x27;/routing_example/dependency_injection&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _controller: <span class="string">&#x27;\Drupal\routing_example\Controller\ExampleDependencyInjectionController::index&#x27;</span></span><br><span class="line">    _title: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _permission: <span class="string">&#x27;access content&#x27;</span></span><br></pre></td></tr></table></figure>

<p>#####src/Controller/BaseController.php</p>
<p>这是一个普通的Controller类，通过访问/routing_example/index/hello/{name}调用index，输出Implement method: index with parameter(s): $name。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\routing_example\Controller\BaseController.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">routing_example</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Controller</span>\<span class="title">ControllerBase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class BaseController.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> Drupal\routing_example\Controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> <span class="keyword">extends</span> <span class="title">ControllerBase</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Index.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">   *   Return Hello string.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;markup&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#markup&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;t(<span class="string">&quot;Implement method: index with parameter(s): <span class="subst">$name</span>&quot;</span>)</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>#####src/Controller/ExampleDependencyInjectionController.php</p>
<p>这是一个依赖注入的Controler类，我们这里以访问数据库为例。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\routing_example\Controller\ExampleDependencyInjectionController.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">routing_example</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">DependencyInjection</span>\<span class="title">ContainerInjectionInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Database</span>\<span class="title">Connection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">DependencyInjection</span>\<span class="title">ContainerInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ExampleDependencyInjectionController.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> Drupal\routing_example\Controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleDependencyInjectionController</span> <span class="keyword">implements</span>  <span class="title">ContainerInjectionInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The database connection.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> \Drupal\Core\Database\Connection;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$database</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs a \Drupal\routing_example\Controller\ExampleDependencyInjectionController object.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> \Drupal\Core\Database\Connection $database</span></span><br><span class="line"><span class="comment">   *   The database connection.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Connection <span class="variable">$database</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;database = <span class="variable">$database</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">ContainerInterface <span class="variable">$container</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">static</span>(<span class="variable">$container</span>-&gt;get(<span class="string">&#x27;database&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Displays a list of nodes.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// query the database</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;database-&gt;query(<span class="string">&#x27;SELECT * from &#123;node&#125; WHERE nid = 1&#x27;</span>)-&gt;fetchAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;markup&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;#markup&#x27;</span> =&gt; json_encode(<span class="variable">$result</span>),</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://127.0.0.1/routing_example/dependency_injection">http://127.0.0.1/routing_example/dependency_injection</a></p>
<p>输出：</p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151223/20151223205139_89300.png" alt="DI"></p>
<p>###二、动态路由(Dynamic Routes)</p>
<p>静态路由我们一般是在{module_name}.routing.yml中指定，那么如何定义动态路由呢？</p>
<p>####1、Drupal7动态路由</p>
<p>一般是通过foreach hook_menu实现，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_menu().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routing_example_menu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$items</span> = <span class="keyword">array</span>();</span><br><span class="line">  <span class="keyword">foreach</span> (routing_example_types() <span class="keyword">as</span> <span class="variable">$type</span>) &#123;</span><br><span class="line">    <span class="variable">$items</span>[<span class="string">&#x27;routing_example/add/&#x27;</span> . <span class="variable">$type</span>-&gt;machine_name] = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;title&#x27;</span> =&gt; <span class="variable">$type</span>-&gt;title,</span><br><span class="line">      <span class="string">&#x27;page callback&#x27;</span> =&gt; <span class="string">&#x27;routing_example_type_add_page&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;access arguments&#x27;</span> =&gt; <span class="string">&#x27;create &#x27;</span> . <span class="variable">$type</span>-&gt;type,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$items</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>####2、Drupal8动态路由</p>
<p>在D8中，我们推荐使用RouteSubscriber来实现动态路由。</p>
<p>#####routing_example.routing.yml</p>
<p>添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route_callbacks:</span><br><span class="line">  - <span class="string">&#x27;\Drupal\routing_example\Routing\ExampleRoutes::routes&#x27;</span></span><br></pre></td></tr></table></figure>

<p>#####src/Routing/ExampleRoutes.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\routing_example\Routing\ExampleRoutes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">routing_example</span>\<span class="title">Routing</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Routing</span>\<span class="title">Route</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Routing</span>\<span class="title">RouteCollection</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines dynamic routes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleRoutes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">routes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$route_collection</span> = <span class="keyword">new</span> RouteCollection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dynamically routing.</span></span><br><span class="line">    <span class="variable">$route</span> = <span class="keyword">new</span> Route(</span><br><span class="line">      <span class="string">&#x27;routing_example/add/dynamic_route&#x27;</span>,</span><br><span class="line">      <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;_controller&#x27;</span> =&gt; <span class="string">&#x27;\Drupal\routing_example\Controller\ExampleDependencyInjectionController::index&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;_title&#x27;</span> =&gt; <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">      ),</span><br><span class="line">      <span class="comment">// Route requirements:</span></span><br><span class="line">      <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;_permission&#x27;</span>  =&gt; <span class="string">&#x27;access content&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add the route under the name &#x27;example.content&#x27;.</span></span><br><span class="line">    <span class="variable">$route_collection</span>-&gt;add(<span class="string">&#x27;routing_example.add.dynamic_route&#x27;</span>, <span class="variable">$route</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$route_collection</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://127.0.0.1/routing_example/add/dynamic_route">http://127.0.0.1/routing_example/add/dynamic_route</a></p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151224/20151224154334_42518.png" alt="dynamic_route"></p>
<p>动态路由还有很多高级的玩法，比如使用Entity Storage等，后续再来介绍。</p>
<p>参考文章：<br>1、<a href="https://www.drupal.org/developing/api/8/routing">https://www.drupal.org/developing/api/8/routing</a><br>2、<a href="https://www.drupal.org/node/2116767">https://www.drupal.org/node/2116767</a><br>3、<a href="https://www.drupal.org/node/2092643">https://www.drupal.org/node/2092643</a><br>4、<a href="http://www.sitepoint.com/build-drupal-8-module-routing-controllers-menu-links/">http://www.sitepoint.com/build-drupal-8-module-routing-controllers-menu-links/</a><br>5、<a href="http://www.slideshare.net/ygerasimov/drupal-8-routing">http://www.slideshare.net/ygerasimov/drupal-8-routing</a><br>6、<a href="https://www.previousnext.com.au/blog/using-drupal-8s-new-route-controllers">https://www.previousnext.com.au/blog/using-drupal-8s-new-route-controllers</a><br>7、<a href="https://www.previousnext.com.au/blog/dynamic-routes-drupal-8-routesubscriber">https://www.previousnext.com.au/blog/dynamic-routes-drupal-8-routesubscriber</a><br>8、<a href="https://www.drupal.org/node/2122201">https://www.drupal.org/node/2122201</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>routing</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8主题(theme)</title>
    <url>/2015/11/19/Drupal8%E4%B8%BB%E9%A2%98-theme/</url>
    <content><![CDATA[<h2 id="Drupal8中的Twig"><a href="#Drupal8中的Twig" class="headerlink" title="Drupal8中的Twig"></a>Drupal8中的Twig</h2><p>Drupal8中Twig替换了PHPTemplate作为默认的模板引擎，导致的结果之一就是模版的后缀由原来的.tpl.php变成了.html.twig</p>
<h3 id="搜索Twig模版中的变量"><a href="#搜索Twig模版中的变量" class="headerlink" title="搜索Twig模版中的变量"></a>搜索Twig模版中的变量</h3><p>在使用Twig模版的时候，大部分的变量都已注释的形式写在了模版中。然后，当我们新增了变量，我们就需要一个可以搜索到当前模版所有变量的方法。Twig提供了<code>dump</code>函数。</p>
<p><code>dump</code>函数并不会打印所有的输出，除非开启了debug。</p>
<p><code>dump</code>函数用于打印单个变量的信息或者模版中的所有变量。</p>
<h4 id="单个变量"><a href="#单个变量" class="headerlink" title="单个变量"></a>单个变量</h4><p>如果你的模版中有一个title变量，下面在你的模版中dump出这个变量的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; dump(title) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模版中的所有变量"><a href="#模版中的所有变量" class="headerlink" title="模版中的所有变量"></a>模版中的所有变量</h4><p>要打印出模版中的所有的变量，你可以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; dump() &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>要打印出变量的键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; dump(_context|keys) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>PS: 这里的_context是一全局变量，指当前模版中所有的上下文和变量，比如通过theme函数传递的变量，preprocess函数处理的变量，或者调用set设置的变量。</p>
<p><strong>全局变量：</strong></p>
<ul>
<li>_context 当前模版中所有的上下文和变量</li>
<li>_charset 只当前的编码方式</li>
</ul>
<h4 id="慎用dump"><a href="#慎用dump" class="headerlink" title="慎用dump()"></a>慎用dump()</h4><p><code>dump()</code>函数虽然可以输出所有的变量，但是却带来了巨大的内存消耗，故你可以循环<code>_context</code>来查看所有的键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">  &#123;% for key, value in _context  %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; key &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>

<p>接下来再加上一些条件判断，就可以看到你需要的变量了。</p>
<h2 id="Drupal8主题"><a href="#Drupal8主题" class="headerlink" title="Drupal8主题"></a>Drupal8主题</h2><h3 id="模版命名惯例"><a href="#模版命名惯例" class="headerlink" title="模版命名惯例"></a>模版命名惯例</h3><p>Drupal是按照一定的命名惯例来加载模版的，这就方便开发者可以覆盖原有的模版。当然，记得清除缓存。</p>
<h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><p>HTML模版提供了包括head，title以及body标签等基础结构的html页面。</p>
<p>基础模版：html.html.twig(位于：core/modules/system/templates/html.html.twig)</p>
<p>下面是一些你可以覆盖的基础模版的例子：</p>
<ol>
<li>html–internalviewpath.html.twig</li>
<li>html–node–id.html.twig</li>
<li>html.html.twig</li>
</ol>
<h4 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h4><p>模版名称模式：page–[front|internal/path].html.twig</p>
<p>基础模版：page.html.twig(位于: core/modules/system/templates/page.html.twig)</p>
<p>下面是page模版的模版建议，举个例子“<a href="http://www.example.com/node/1/edit%E2%80%9D%EF%BC%9A">http://www.example.com/node/1/edit”：</a></p>
<ol>
<li>page–node–edit.html.twig</li>
<li>page–node–1.html.twig</li>
<li>page–node.html.twig</li>
<li>page.html.twig</li>
</ol>
<h4 id="Regions"><a href="#Regions" class="headerlink" title="Regions"></a>Regions</h4><p>模版名称模式：region–[region].html.twig</p>
<p>基础模版：region.html.twig(位于: core/modules/system/templates/region.html.twig)</p>
<p>当一个页面的区域中有内容时，系统会从区块系统或者一个类似于<code>hook_page_build()</code>的方法中调用区域模版。</p>
<h4 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h4><p>模版名称模式：block–[module|-delta]].html.twig</p>
<p>基础模版：block.html.twig (位于: core/modules/block/templates/block.html.twig)</p>
<ol>
<li>block–module–delta.html.twig</li>
<li>block–module.html.twig</li>
<li>block.html.twig</li>
</ol>
<p>这里的module就是模块名，delta是模块给区块设置的内部id标识</p>
<h4 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h4><p>模版名称模式：node–[type|nodeid]–[viewmode].html.twig<br>基础模版：node.html.twig (位于: core/modules/node/templates/node.html.twig)</p>
<p>模版建议：</p>
<ol>
<li>node–nodeid–viewmode.html.twig</li>
<li>node–nodeid.html.twig</li>
<li>node–type–viewmode.html.twig</li>
<li>node–type.html.twig</li>
<li>node–viewmode.html.twig</li>
<li>node.html.twig</li>
</ol>
<h4 id="Forums"><a href="#Forums" class="headerlink" title="Forums"></a>Forums</h4><p>模版名称模式：forums–[[container|topic]–forumID].html.twig</p>
<p>基础模版： forums.html.twig (位于: core/modules/forum/templates/forums.html.twig)</p>
<p>模版建议：</p>
<ul>
<li><p>论坛容器：</p>
<ol>
<li>forums–containers–forumID.html.twig</li>
<li>forums–forumID.html.twig</li>
<li>forums–containers.html.twig</li>
<li>forums.html.twig</li>
</ol>
</li>
<li><p>论坛主题内容</p>
<ol>
<li>forums–topics–forumID.html.twig</li>
<li>forums–forumID.html.twig</li>
<li>forums–topics.html.twig</li>
<li>forums.html.twig</li>
</ol>
</li>
</ul>
<h3 id="PHPTemplate与Twig主题范例的比较"><a href="#PHPTemplate与Twig主题范例的比较" class="headerlink" title="PHPTemplate与Twig主题范例的比较"></a>PHPTemplate与Twig主题范例的比较</h3><p>接下来，看下PHPTemplate与Twig的区别。</p>
<h4 id="关于Twig"><a href="#关于Twig" class="headerlink" title="关于Twig"></a>关于Twig</h4><p>Twig是基于php的编译模版语言。当你的页面需要渲染显示的时候，Twig引擎会找到对应的模版并把它编译成php模版，存放在sites/default/files/php_storage/目录下。</p>
<h5 id="1-Docblock"><a href="#1-Docblock" class="headerlink" title="1.Docblock"></a>1.Docblock</h5><p>PHPTemplate：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">&#x2F;** </span><br><span class="line"> * @file</span><br><span class="line"> * File description</span><br><span class="line"> *&#x2F;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# </span><br><span class="line">&#x2F;** </span><br><span class="line"> * @file</span><br><span class="line"> * File description</span><br><span class="line"> *&#x2F;</span><br><span class="line">#&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-文件和函数名"><a href="#2-文件和函数名" class="headerlink" title="2.文件和函数名"></a>2.文件和函数名</h5><p>PHPTemplate文件：node–article.tpl.php<br>Twig文件：node–article.html.twig</p>
<p>PHPTemplate函数：theme_node_links()<br>Twig文件：node-links.html.twig</p>
<h5 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h5><p><strong>输出一个变量</strong></p>
<p>PHPTemplate: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;content&quot;&gt;&lt;?php print $content; ?&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;content&quot;&gt;&#123;&#123; content &#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>输出一个哈希键值</strong></p>
<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php print $item[&#39;#item&#39;][&#39;alt&#39;]; ?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; item[&#39;#item&#39;].alt &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>变量赋值</strong></p>
<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php $custom_var &#x3D; $content-&gt;comments; ?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% set custom_var &#x3D; content.comments %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>数组初始化</strong></p>
<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  $args &#x3D; array(&#39;!author&#39; &#x3D;&gt; $author, &#39;!date&#39; &#x3D;&gt; $created);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% set args &#x3D; &#123;&#39;!author&#39;: author, &#39;!date&#39;: created&#125; %&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-条件判断"><a href="#4-条件判断" class="headerlink" title="4.条件判断"></a>4.条件判断</h5><p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if ($content-&gt;comments): endif; ?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if content.comments %&#125; &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if (!empty($content-&gt;comments)): endif; ?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if content.comments is not empty %&#125; &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if (isset($content-&gt;comments)): endif; ?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if content.comments is defined %&#125; &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if ($count &gt; 0): endif; ?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if count &gt; 0 %&#125; &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-控制结构"><a href="#5-控制结构" class="headerlink" title="5.控制结构"></a>5.控制结构</h5><p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php foreach ($users as $user) &#123;&#125; ?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for user in users %&#125; &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-过滤"><a href="#6-过滤" class="headerlink" title="6.过滤"></a>6.过滤</h5><p><strong>check_plain：</strong></p>
<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php print check_plain($title); ?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; title|striptags &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Translate：</strong></p>
<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php print t(&#39;Home&#39;); ?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#39;Home&#39;|t &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Translate with substitutions:</strong></p>
<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  print t(&#39;Welcome, @username&#39;, array(&#39;@username&#39; &#x3D;&gt; $user-&gt;name));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#39;Welcome, @username&#39;|t(&#123; &#39;@username&#39;: user.name &#125;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>Drupal8 Twig(采用<a href="https://drupal.org/node/2047135">trans</a>标签扩展)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% set username &#x3D; user.name %&#125;</span><br><span class="line">&#123;% trans %&#125;</span><br><span class="line">  Welcome, &#123;&#123; username &#125;&#125;</span><br><span class="line">&#123;% endtrans %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>implode:</strong></p>
<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php echo implode(&#39;, &#39;, $usernames); ?&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; usernames | join(&#39;, &#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>PHPTemplate的例子中$usernames需要是一个字符串数组。原生的Twig也需要$usernames是一个字符串数组。但是Drupal8中的twig还可以是一个可以渲染的数组对象。这就是Drupal8中的twig与原生twig的本质区别。Drupal8中的twig可以“打印”出纯文本和可渲染的数组。</p>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% set numbers &#x3D; [&#123;&#39;#markup&#39;: &#39;One&#39;&#125;, &#123;&#39;#markup&#39;:&#39;Two&#39;&#125;, &#123;&#39;#markup&#39;:&#39;Three&#39;&#125;] %&#125;</span><br><span class="line">&#123;&#123; numbers &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，每一个数据项都是以逗号相隔的。但是，输出的结果却是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">OneTwoThree</span><br></pre></td></tr></table></figure>

<p><strong>Escape：</strong></p>
<p>PHPTemplate:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php echo check_plain($title); ?&gt;</span><br></pre></td></tr></table></figure>

<p>原生Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; title|e &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>Drupal 8 Twig2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; title &#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-空白"><a href="#7-空白" class="headerlink" title="7.空白"></a>7.空白</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;body&quot;&gt;</span><br><span class="line">  &#123;&#123;- block.content -&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>类似于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;body&quot;&gt;&#123;&#123; block.content &#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="debug-twig模版"><a href="#debug-twig模版" class="headerlink" title="debug twig模版"></a>debug twig模版</h3><p>twig模版引擎提供了一个debug工具。</p>
<h4 id="启用debugging"><a href="#启用debugging" class="headerlink" title="启用debugging"></a>启用debugging</h4><p>在sites/default/services.yml启用Twig Debugging。</p>
<p>设置debug变量为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parameters:</span><br><span class="line">  twig.config:</span><br><span class="line">    debug: true </span><br></pre></td></tr></table></figure>

<h4 id="自动加载编译的模版"><a href="#自动加载编译的模版" class="headerlink" title="自动加载编译的模版"></a>自动加载编译的模版</h4><p>出于性能考虑，Twig模版被编译成一个PHP类存放在磁盘上，但这意味着默认情况下，你的模版不会在你做出更改时发生刷新。为了使Twig模版可以自动刷新，启用<code>services.yml</code>中的deubg选项。欲知详情，参见：<a href="https://drupal.org/node/1903374">https://drupal.org/node/1903374</a></p>
<p><strong>打印所有的变量</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 打印所有的变量 #&#125;</span><br><span class="line">&#123;&#123; dump() &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 打印单个变量 #&#125;</span><br><span class="line">&#123;&#123; dump(var) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Filters—修改Twig模版中的变量"><a href="#Filters—修改Twig模版中的变量" class="headerlink" title="Filters—修改Twig模版中的变量"></a>Filters—修改Twig模版中的变量</h3><p>Twig中的Filters用于修改变量。Filters和变量之间用管道符号(|)分隔，还可能带点可选的参数。多个filters可以链式的连在一起，前一个的输出作为下一个的输入。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; ponies|safe_join(&quot;, &quot;)|lower&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>Drupal的Twig模版中使用的filter由所有的Twig引擎自带的filter和drupal中的几个特殊的filters组成。</p>
<h4 id="Twig-filters"><a href="#Twig-filters" class="headerlink" title="Twig filters"></a>Twig filters</h4><p>详见：<a href="http://twig.sensiolabs.org/doc/filters/index.html">twig filter列表</a></p>
<h4 id="Drupal自身的filters"><a href="#Drupal自身的filters" class="headerlink" title="Drupal自身的filters"></a>Drupal自身的filters</h4><p>Drupal中的filters是在<code>Drupal\Core\Template\TwigExtension::getFilters().</code>中声明的。</p>
<h5 id="翻译filters"><a href="#翻译filters" class="headerlink" title="翻译filters"></a>翻译filters</h5><p><strong>t</strong></p>
<p>t filter调用Drupal的t函数翻译给定的字符串，可用于任何字符串。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; url(&#39;&lt;front&gt;&#39;) &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; &#39;Home&#39;|t &#125;&#125;&quot; rel&#x3D;&quot;home&quot; class&#x3D;&quot;site-logo&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>placeholder输出安全的html并使用<code>drupal_placeholder()</code>进行格式化输出成强调文本。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% trans %&#125;Submitted on &#123;&#123; date|placeholder &#125;&#125;&#123;% endtrans %&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; var1|t &#125;&#125;</span><br><span class="line">&#123;&#123; var1|placeholder &#125;&#125;</span><br><span class="line">&#123;% trans %&#125;&#123;&#123; var1 &#125;&#125;&#123;% endtrans %&#125;</span><br></pre></td></tr></table></figure>

<p>尽可能避免使用|raw filter，特别是你正在输出一些用户输入的数据的时候。详见<a href="https://www.drupal.org/node/2296163">https://www.drupal.org/node/2296163</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; var1|raw &#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="额外的filters"><a href="#额外的filters" class="headerlink" title="额外的filters"></a>额外的filters</h5><p><strong>drupal_escape</strong></p>
<p>drupal_escape用于将一个字符串进行安全处理后进行插入操作并输出显示，它替代了twig默认的escape filter。参见<a href="https://api.drupal.org/api/drupal/core%21themes%21engines%21twig%21twig.engine/function/twig_drupal_escape_filter/8">twig_drupal_escape_filter</a></p>
<p><strong>safe_join</strong></p>
<p>safe_join将几个字符串用给定的分隔符连接在一块儿。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; items|safe_join(&#39;, &#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>without</strong></p>
<p>without会创建出当前这个可以渲染的数组的拷贝，但是会把传入的参数当作键，删除键关联的所有子元素。但是，当前这个数组不受影响，依旧可以打印出子元素。详见：<a href="https://api.drupal.org/api/drupal/core%21themes%21engines%21twig%21twig.engine/function/twig_without/8">twig_without</a></p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 打印content变量，除了content.links #&#125;</span><br><span class="line">&#123;&#123; content|without(&#39;links&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>clean_class</strong></p>
<p>clean_class filter会处理出一个安全的可用的html类名。详见：<a href="https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Component%21Utility%21Html.php/function/Html%3A%3AgetClass/8">Html::getClass()</a></p>
<p><strong>clean_id</strong></p>
<p>clean_id filter会处理出一个安全的可用的html id。详见：<a href="https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Component%21Utility%21Html.php/function/Html%3A%3AgetId/8">Html:getID()</a></p>
<p><strong>format_date</strong></p>
<p>format_date filter格式化日期字符串，详见：<a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Datetime!DateFormatter.php/function/DateFormatter%3A%3Aformat/8">DateFormatter::format()</a></p>
<h3 id="Functions—Twig模版中的函数"><a href="#Functions—Twig模版中的函数" class="headerlink" title="Functions—Twig模版中的函数"></a>Functions—Twig模版中的函数</h3><p><strong>url()</strong></p>
<p><strong>path()</strong></p>
<p><strong>url_from_path()</strong></p>
<p><strong>link($text, $url, $attributes)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; link(item.title, item.url, &#123; &#39;class&#39;:[&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]&#125; ) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>file_url($uri)</strong></p>
<p>路径参数需要是相对网站根目录的相对路径，将会返回这个文件的绝对路径。</p>
<p><strong>attach_library()</strong></p>
<h3 id="Twig最佳实践—预处理函数和模版"><a href="#Twig最佳实践—预处理函数和模版" class="headerlink" title="Twig最佳实践—预处理函数和模版"></a>Twig最佳实践—预处理函数和模版</h3><p>为了使Drupal8的主题性能最大化，以及更加的定制化，请遵照如下的最佳实践方式：</p>
<h4 id="使用预处理函数返回可渲染数组"><a href="#使用预处理函数返回可渲染数组" class="headerlink" title="使用预处理函数返回可渲染数组"></a>使用预处理函数返回可渲染数组</h4><p>总是通过预处理函数返回可渲染数组，而不是调用<code>theme()</code>或者<code>drupal_render()</code>函数。</p>
<p>Twig会自动渲染，故没有必要调用<code>theme()</code>或者<code>drupal_render()</code>函数。此外，为了比直接输出已经渲染的html代码更具定制化，渲染数组应该传递给模版。</p>
<p>从预处理函数中删除<code>theme()</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 之前，直接把渲染的html传递给模版</span><br><span class="line">$variables[&#39;table&#39;] &#x3D; theme(&#39;table&#39;, array(&#39;header&#39; &#x3D;&gt; $header, &#39;rows&#39; &#x3D;&gt; $rows));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 之后，把渲染数组传递给模版</span><br><span class="line">$variables[&#39;table&#39;] &#x3D; array(</span><br><span class="line">  &#39;#theme&#39; &#x3D;&gt; &#39;table&#39;,</span><br><span class="line">  &#39;#header&#39; &#x3D;&gt; $header,</span><br><span class="line">  &#39;#rows&#39; &#x3D;&gt; $rows,</span><br><span class="line">);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>从预处理函数中删除<code>drupal_render()</code>函数就是不再调用它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 之前</span><br><span class="line">$variables[&#39;teaser&#39;] &#x3D; drupal_render($node_teaser);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 之后</span><br><span class="line">$variables[&#39;teaser&#39;] &#x3D; $node_teaser;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>通常情况下，<code>drupal_render()</code>函数是在添加表格数据的时候调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 之前</span><br><span class="line">$row[] &#x3D; drupal_render($display[&#39;title&#39;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 之后  </span><br><span class="line">$row[][&#39;data&#39;] &#x3D; $display[&#39;title&#39;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="在模版中调用filters和工具函数"><a href="#在模版中调用filters和工具函数" class="headerlink" title="在模版中调用filters和工具函数"></a>在模版中调用filters和工具函数</h4><p>举个例子：</p>
<p><strong>之前的做法：</strong></p>
<p>预处理函数中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$variables[&#39;no_content_text&#39;] &#x3D; t(&#39;You have not created any content types yet. Go to the &lt;a href&#x3D;&quot;@create-content&quot;&gt;content type creation page&lt;&#x2F;a&gt; to add a new content type.&#39;, array(&#39;@create-content&#39; &#x3D;&gt; url(&#39;admin&#x2F;structure&#x2F;types&#x2F;add&#39;)));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>模版中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; no_content_text &#125;&#125;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p><strong>现在的做法：</strong></p>
<p>模版中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; &#39;You have not created any content types yet. Go to the &lt;a href&#x3D;&quot;@create-content&quot;&gt;content type creation page&lt;&#x2F;a&gt; to add a new content type.&#39;|t(&#123;&#39;@create-content&#39;: url(&#39;admin&#x2F;structure&#x2F;types&#x2F;add&#39;)&#125;) &#125;&#125;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h4 id="显示-隐藏-amp-删除drupal-render-children和element-children"><a href="#显示-隐藏-amp-删除drupal-render-children和element-children" class="headerlink" title="显示/隐藏 &amp; 删除drupal_render_children和element_children"></a>显示/隐藏 &amp; 删除drupal_render_children和element_children</h4><p>在原始的模版中，如果调用了<code>hide()</code>函数，而且<code>drupal_render_children</code>函数用于输出”剩下的“数据，我们将需要在预处理的时候把这些数据拆分成单个变量。</p>
<p><strong>之前(PHPTemplate模版)：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  hide($form[&#39;advanced&#39;]);</span><br><span class="line">  hide($form[&#39;actions&#39;]);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;layout-node-form clearfix&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;layout-region layout-region-node-main&quot;&gt;</span><br><span class="line">    &lt;?php print drupal_render_children($form); ?&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;layout-region layout-region-node-secondary&quot;&gt;</span><br><span class="line">    &lt;?php print render($form[&#39;advanced&#39;]); ?&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;layout-region layout-region-node-footer&quot;&gt;</span><br><span class="line">    &lt;?php print render($form[&#39;actions&#39;]); ?&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt; </span><br></pre></td></tr></table></figure>

<p><strong>之后(预处理)：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function template_preprocess_node_edit_form(&amp;$variables) &#123;</span><br><span class="line">  $form &#x3D; $variables[&#39;form&#39;];</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; @todo Update this once drupal.org&#x2F;node&#x2F;1920886 is resolved.</span><br><span class="line">  $variables[&#39;advanced&#39;] &#x3D; $form[&#39;advanced&#39;];</span><br><span class="line">  $variables[&#39;actions&#39;] &#x3D; $form[&#39;actions&#39;];</span><br><span class="line">  unset($form[&#39;advanced&#39;], $form[&#39;actions&#39;]);</span><br><span class="line">  $variables[&#39;form&#39;] &#x3D; drupal_render_children($form);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><strong>之后(Twig模版)：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;layout-node-form clearfix&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;layout-region layout-region-node-main&quot;&gt;</span><br><span class="line">    &#123;&#123; form|without(&#39;advanced&#39;, &#39;actions&#39;) &#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;layout-region layout-region-node-secondary&quot;&gt;</span><br><span class="line">    &#123;&#123; form.advanced &#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;layout-region layout-region-node-footer&quot;&gt;</span><br><span class="line">    &#123;&#123; form.actions &#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="创建Drupal8的主题"><a href="#创建Drupal8的主题" class="headerlink" title="创建Drupal8的主题"></a>创建Drupal8的主题</h2><h3 id="以一个-info-yml文件开始定义一个主题"><a href="#以一个-info-yml文件开始定义一个主题" class="headerlink" title="以一个.info.yml文件开始定义一个主题"></a>以一个.info.yml文件开始定义一个主题</h3><p>创建drupal8主题的第一步，就是创建一个THEMENAME.info.yml文件。有一点很重要，.info.yml文件中的“type”键需要设置成“theme”。</p>
<h4 id="创建一个-info-yml文件"><a href="#创建一个-info-yml文件" class="headerlink" title="创建一个.info.yml文件"></a>创建一个.info.yml文件</h4><p>在主题文件夹的根目录创建.info.yml文件。文件夹的名字应该保持与.info.yml文件名相同。所以，如果你的主题命名为“Fluffiness”，那么文件夹的名字就是“fluffiness”，而.info.yml文件的名字是“fluffiness/fluffiness.info.yml”。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name: Fluffiness</span><br><span class="line">type: theme</span><br><span class="line">description: A cuddly theme that offers extra fluffiness.</span><br><span class="line">core: 8.x</span><br><span class="line">libraries:</span><br><span class="line">  - fluffiness&#x2F;global-styling</span><br><span class="line">stylesheets-remove:</span><br><span class="line">  - &#39;@classy&#x2F;css&#x2F;components&#x2F;tabs.css&#39;</span><br><span class="line">  - core&#x2F;assets&#x2F;vendor&#x2F;normalize-css&#x2F;normalize.css</span><br><span class="line">regions:</span><br><span class="line">  header: Header</span><br><span class="line">  content: Content</span><br><span class="line">  sidebar_first: &#39;Sidebar first&#39;</span><br><span class="line">  footer: Footer</span><br></pre></td></tr></table></figure>

<p>在你的drupal站点中，核心提供的主题包含着很多.info.yml文件可以供你查阅实例。</p>
<h4 id="配置文件中的键释义"><a href="#配置文件中的键释义" class="headerlink" title="配置文件中的键释义"></a>配置文件中的键释义</h4><ul>
<li><p>name: Fluffiness  必选。显示在站点外观页面的，可读主题名</p>
</li>
<li><p>description: An extra cuddly Drupal theme available in grey and blue  必选，主题描述，也会显示在站点外观管理页面</p>
</li>
<li><p>type: theme  必选项，扩展类型，比如：module, theme 或者 profile。对于主题，这里设置成“theme”</p>
</li>
<li><p>base theme: classy  可以从另一个主题继承其资源的主题</p>
</li>
<li><p>core: 8.x  必选，当前主题兼容的Drupal版本</p>
</li>
<li><p>version: 8.x-1.0</p>
</li>
<li><p>screenshot: fluffiness.png</p>
</li>
<li><p>libraries:</p>
<ul>
<li>fluffiness/global-styling</li>
</ul>
<p>  当主题启用时，为所有的页面加载资源库文件，包括css和js</p>
<p>  例如：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global-styling:</span><br><span class="line">  version: 1.x</span><br><span class="line">  css:</span><br><span class="line">    theme:</span><br><span class="line">      css&#x2F;style.css: &#123;&#125;</span><br><span class="line">      css&#x2F;print.css: &#123; media: print &#125;</span><br></pre></td></tr></table></figure>

<p>  当html解析时，就会是：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;style.css&quot; media&#x3D;&quot;all&quot; &#x2F;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;print.css&quot; media&#x3D;&quot;print&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>stylesheets-remove:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- core&#x2F;assets&#x2F;vendor&#x2F;normalize-css&#x2F;normalize.css # 1</span><br><span class="line">- &#39;@classy&#x2F;css&#x2F;components&#x2F;tabs.css&#39; # 2</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ol>
<li>stylesheets-remove键定义需要删除的样式，需要设置成完全路径。</li>
<li>为了方式Drupal核心的资源（例如，jQuery UI的css文件）被删除，请设置为完全路径。此外，为了避免当前这个文件属于某个模块或者主题提供的库的，可以使用token。注意，如果使用token，由于@会被当成YAML，请记得使用引号。</li>
</ol>
</li>
<li><p>regions:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">header: Header</span><br><span class="line">content: Content # required!</span><br><span class="line">sidebar_first: &#39;Sidebar first&#39;</span><br><span class="line">footer: Footer</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="主题文件夹的结构"><a href="#主题文件夹的结构" class="headerlink" title="主题文件夹的结构"></a>主题文件夹的结构</h3><p>主题就是定了视图层的许多文件的集合。.info.yml文件是必须的，下面会列出一个典型的主题文件夹中所包含的文件和文件夹。</p>
<h4 id="主题的位置"><a href="#主题的位置" class="headerlink" title="主题的位置"></a>主题的位置</h4><p>主题必须放置在Drupal安装根目录的“themes”文件夹中。注意，核心的主题，例如：Bartik和Seven位于core/themes文件夹下。</p>
<p>一个好的建议是，创建一个名为“contrib”的文件夹用于存放下载的贡献主题，而“custom”文件夹用于存放自定义的主题。</p>
<p>主体名称必须小写。</p>
<h4 id="Drupal的目录结构："><a href="#Drupal的目录结构：" class="headerlink" title="Drupal的目录结构："></a>Drupal的目录结构：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-core</span><br><span class="line">|  |-modules</span><br><span class="line">|  |-themes</span><br><span class="line">|  |  |-bartik</span><br><span class="line">|  |  |-seven</span><br><span class="line">..</span><br><span class="line">|-modules</span><br><span class="line">|-themes</span><br><span class="line">|  |-contrib</span><br><span class="line">|  |  |-zen</span><br><span class="line">|  |  |-basic</span><br><span class="line">|  |  |-bluemarine</span><br><span class="line">|  |-custom</span><br><span class="line">|  |  |-fluffiness</span><br></pre></td></tr></table></figure>

<h4 id="主题文件夹结构，假设主题名称是：fluffiness"><a href="#主题文件夹结构，假设主题名称是：fluffiness" class="headerlink" title="主题文件夹结构，假设主题名称是：fluffiness"></a>主题文件夹结构，假设主题名称是：fluffiness</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-fluffiness.breakpoints.yml</span><br><span class="line">|-fluffiness.info.yml</span><br><span class="line">|-fluffiness.libraries.yml</span><br><span class="line">|-fluffiness.theme</span><br><span class="line">|-config</span><br><span class="line">|  |-install</span><br><span class="line">|  |  |-fluffiness.settings.yml</span><br><span class="line">|  |-schema</span><br><span class="line">|  |  |-fluffiness.schema.yml</span><br><span class="line">|-css</span><br><span class="line">|  |-style.css</span><br><span class="line">|-js</span><br><span class="line">|  |-fluffiness.js</span><br><span class="line">|-images</span><br><span class="line">|  |-buttons.png</span><br><span class="line">|-logo.png</span><br><span class="line">|-screenshot.png</span><br><span class="line">|-templates</span><br><span class="line">|  |-maintenance-page.html.twig</span><br><span class="line">|  |-node.html.twig</span><br></pre></td></tr></table></figure>

<p>下面，介绍一下主题文件夹中的通用文件。</p>
<h4 id="info-yml"><a href="#info-yml" class="headerlink" title="*.info.yml"></a>*.info.yml</h4><p>主题必须包含*.info.yml文件，此文件定义了meta数据，样式，还有区块和区域信息。</p>
<h4 id="libraries-yml"><a href="#libraries-yml" class="headerlink" title="*.libraries.yml"></a>*.libraries.yml</h4><p>*.libraries.yml文件用于主题启用时需要加载的定义js和css库，详情<a href="https://www.drupal.org/theme-guide/8/adding-javascript">点击这里</a></p>
<h4 id="breakpoints-yml"><a href="#breakpoints-yml" class="headerlink" title="*.breakpoints.yml"></a>*.breakpoints.yml</h4><p>响应式设计相关的设置，详见：<a href="https://www.drupal.org/documentation/modules/breakpoint">*.breakpoints.yml设置</a></p>
<h4 id="theme"><a href="#theme" class="headerlink" title="*.theme"></a>*.theme</h4><p>*.theme文件是一个php文件，包含了所有的逻辑处理代码和输出前的预处理。</p>
<h4 id="css"><a href="#css" class="headerlink" title="css/"></a>css/</h4><p>一个好的建议就是将css文件存放在“css”自目录下。</p>
<h4 id="js"><a href="#js" class="headerlink" title="js/"></a>js/</h4><p>存放着主题需要的js文件。</p>
<h4 id="images"><a href="#images" class="headerlink" title="images/"></a>images/</h4><p>存放主题需要的图片</p>
<h4 id="screenshot-png"><a href="#screenshot-png" class="headerlink" title="screenshot.png"></a>screenshot.png</h4><p>主题的预览图</p>
<h4 id="templates"><a href="#templates" class="headerlink" title="templates/"></a>templates/</h4><h4 id="核心主题Bartik的目录结构："><a href="#核心主题Bartik的目录结构：" class="headerlink" title="核心主题Bartik的目录结构："></a>核心主题Bartik的目录结构：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-bartik.breakpoints.yml</span><br><span class="line">|-bartik.info.yml</span><br><span class="line">|-bartik.libraries.yml</span><br><span class="line">|-bartik.theme</span><br><span class="line">|-color</span><br><span class="line">|  |-color.inc</span><br><span class="line">|  |-preview.css</span><br><span class="line">|  |-preview.html</span><br><span class="line">|  |-preview.js</span><br><span class="line">|-config</span><br><span class="line">|  |-schema</span><br><span class="line">|  |  |-bartik.schema.yml</span><br><span class="line">|-css</span><br><span class="line">|  |-base</span><br><span class="line">|  |  |-elements.css</span><br><span class="line">|  |-components</span><br><span class="line">|  |  |-block.css</span><br><span class="line">|  |  |-book.css</span><br><span class="line">|  |  |-breadcrumb.css</span><br><span class="line">...</span><br><span class="line">|  |-colors.css</span><br><span class="line">|  |-layout.css</span><br><span class="line">|  |-maintenance-page.css</span><br><span class="line">|  |-print.css</span><br><span class="line">|-images</span><br><span class="line">|  |-add.png</span><br><span class="line">|  |-required.svg</span><br><span class="line">|  |-tabs-border.png</span><br><span class="line">|-logo.svg</span><br><span class="line">|-screenshot.png</span><br><span class="line">|-templates</span><br><span class="line">|  |-block--search-form-block.html.twig</span><br><span class="line">|  |-block--system-branding-block.html.twig</span><br><span class="line">|  |-block--system-menu-block.html.twig</span><br><span class="line">|  |-block.html.twig</span><br><span class="line">|  |-comment.html.twig</span><br><span class="line">|  |-field--taxonomy-term-reference.html.twig</span><br><span class="line">|  |-maintenance-page.html.twig</span><br><span class="line">|  |-node.html.twig</span><br><span class="line">|  |-page.html.twig</span><br><span class="line">|  |-status-messages.html.twig</span><br></pre></td></tr></table></figure>

<h3 id="为主题添加区域"><a href="#为主题添加区域" class="headerlink" title="为主题添加区域"></a>为主题添加区域</h3><p>为主题添加区域需要两步：</p>
<ul>
<li>在主题文件.info.yml中添加区域的meta-data</li>
<li>编辑page.html.twig文件打印新的区域</li>
</ul>
<h4 id="info文件中添加区域"><a href="#info文件中添加区域" class="headerlink" title="info文件中添加区域"></a>info文件中添加区域</h4><p>区域定义成ragions键的子元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Regions</span><br><span class="line">regions:</span><br><span class="line">  header: &#39;Header&#39;</span><br><span class="line">  content: &#39;Content&#39;</span><br><span class="line">  footer: &#39;Footer&#39;</span><br></pre></td></tr></table></figure>

<p>Region 键应是个字符串，可以包含下划线“_”。</p>
<h4 id="模版中添加区域"><a href="#模版中添加区域" class="headerlink" title="模版中添加区域"></a>模版中添加区域</h4><p>为了显示区域中的内容，你需要确定新的区域也添加到了page.html.twig模版中。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">header: &#39;Header&#39;</span><br></pre></td></tr></table></figure>

<p>模版中输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; page.header &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>此外，你可以把它们当成是Twig模版的普通变量，可以再任何需要的地方打印输出。</p>
<h4 id="默认区域"><a href="#默认区域" class="headerlink" title="默认区域"></a>默认区域</h4><p>可以在<a href="https://api.drupal.org/api/drupal/core%21modules%21system%21templates%21page.html.twig/8">page.html.twig模版文档</a>中查阅默认的区域</p>
<ol>
<li>page.header</li>
<li>page.primary_menu</li>
<li>page.secondary_menu</li>
<li>page.highlighted</li>
<li>page.help</li>
<li>page.content</li>
<li>page.sidebar_first</li>
<li>page.sidebar_second</li>
<li>page.footer</li>
<li>page.breadcrumb</li>
</ol>
<h3 id="Drupal8主题中添加样式和js"><a href="#Drupal8主题中添加样式和js" class="headerlink" title="Drupal8主题中添加样式和js"></a>Drupal8主题中添加样式和js</h3><h4 id="与Drupal7主题的区别"><a href="#与Drupal7主题的区别" class="headerlink" title="与Drupal7主题的区别"></a>与Drupal7主题的区别</h4><p><strong>有四个比较重要的区别：</strong></p>
<ol>
<li>去掉了THEME.info文件，取而代之的是THEME.info.yml文件</li>
<li>THEME.info.yml文件中的stylesheets属性不复存在，改为库的方式引入</li>
<li>THEME.info.yml文件中的scripts属性不复存在，改为库的方式引入</li>
<li>每一个页面的js只在需要时才加载，默认情况下，Drupal对于匿名用户不会需要js。这意味着，jquery不会再在每个页面自动加载了。因此，如果你的主题需要jquery或者其它的js，你需要通过“声明依赖关系”来告诉Drupal这个js需要加载</li>
</ol>
<p>** 加载css/js的步骤：**</p>
<ol>
<li>将css或者js保存到一个文件</li>
<li>定义一个包含js和css文件的“library”</li>
<li>在钩子中，把这个库追加给渲染数组</li>
</ol>
<h4 id="定义一个库"><a href="#定义一个库" class="headerlink" title="定义一个库"></a>定义一个库</h4><p>在主题文件夹中创建*.libraries.yml文件来添加库（假设你的主题名称是<code>fluffiness</code>，那么文件名就是<code> fluffiness.libraries.yml</code>）。每一个库，都是css和js文件的详情列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cuddly-slider:</span><br><span class="line">  version: 1.x</span><br><span class="line">  css:</span><br><span class="line">    theme:</span><br><span class="line">      css&#x2F;cuddly-slider.css: &#123;&#125;</span><br><span class="line">  js:</span><br><span class="line">    js&#x2F;cuddly-slider.js: &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子中，假设<code>cuddly-slider.js</code>文件位于主题的js子目录中。</p>
<p>然后，需要记住的是，默认情况下，Drupal8不会在每一个页面加载jquery；只在需要时加载。因此，我们需要自己声明，主题的<code>cuddly-slider</code>库依赖<code>jQuery</code>。</p>
<p>因此，为了保证上例的<code>js/cuddly-slider.js</code>可用，我们需要更新下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cuddly-slider:</span><br><span class="line">  version: 1.x</span><br><span class="line">  css:</span><br><span class="line">    theme:</span><br><span class="line">      css&#x2F;cuddly-slider.css: &#123;&#125;</span><br><span class="line">  js:</span><br><span class="line">    js&#x2F;cuddly-slider.js: &#123;&#125;</span><br><span class="line">  dependencies:</span><br><span class="line">    - core&#x2F;jquery</span><br></pre></td></tr></table></figure>

<p>当然，库也可以只包含css，或者只包含js。大部分的主题可能会有一个<code>global-styling</code>库，用于全局加载样式文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global-styling:</span><br><span class="line">  version: 1.x</span><br><span class="line">  css:</span><br><span class="line">    theme:</span><br><span class="line">      css&#x2F;layout.css: &#123;&#125;</span><br><span class="line">      css&#x2F;style.css: &#123;&#125;</span><br><span class="line">      css&#x2F;colors.css: &#123;&#125;</span><br><span class="line">      css&#x2F;print.css: &#123; media: print &#125;</span><br></pre></td></tr></table></figure>

<p>而且，正如你所想，库中定义的css的顺序就是将来加载的顺序。</p>
<p>在Drupal7中，你可以把媒体查询属性(screen, print, all)作为<code>stylesheets</code>属性的子键，而现在你可以把它当作值定义，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">css&#x2F;print.css: &#123; media: print &#125;</span><br></pre></td></tr></table></figure>

<p>现在默认情况下，所有的js文件都在页脚加载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">js-header:</span><br><span class="line">  header: true</span><br><span class="line">  js:</span><br><span class="line">    header.js: &#123;&#125;</span><br><span class="line"></span><br><span class="line">js-footer:</span><br><span class="line">  js:</span><br><span class="line">    footer.js: &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>你得设置<code>header</code>属性为true。</p>
<h4 id="覆盖扩展库"><a href="#覆盖扩展库" class="headerlink" title="覆盖扩展库"></a>覆盖扩展库</h4><p>那些定义在<code>*.libraries.yml</code>文件中的库可以通过主题的<code>*.info.yml</code>文件中的<code>libraries-override</code>和<code>libraries-extend</code>项进行覆写和扩展。</p>
<p><strong>libraries-override</strong></p>
<p><code>libraries-override</code>是定义在库中，主题用来操作css/js的一种方式，包括删除、替换或者删除css/js。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libraries-override:</span><br><span class="line">  # Replace an entire library.</span><br><span class="line">  core&#x2F;drupal.collapse: mytheme&#x2F;collapse</span><br><span class="line">  </span><br><span class="line">  # Replace an asset with another.</span><br><span class="line">  subtheme&#x2F;library:</span><br><span class="line">    css:</span><br><span class="line">      theme:</span><br><span class="line">        css&#x2F;layout.css: css&#x2F;my-layout.css</span><br><span class="line">  </span><br><span class="line">  # Remove an asset.</span><br><span class="line">  drupal&#x2F;dialog:</span><br><span class="line">    css:</span><br><span class="line">      theme:</span><br><span class="line">        dialog.theme.css: false</span><br><span class="line">  </span><br><span class="line">  # Remove an entire library.</span><br><span class="line">  core&#x2F;modernizr: false</span><br></pre></td></tr></table></figure>

<p><strong>libraries-extend</strong></p>
<p><em>libraries-extend</em>为主题提供了一种可以修改库的方式。比如，添加额外的主题依赖的库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extend drupal.user: add assets from classy&#39;s user libraries.</span><br><span class="line">libraries-extend:</span><br><span class="line">  core&#x2F;drupal.user: </span><br><span class="line">    - classy&#x2F;user1</span><br><span class="line">    - classy&#x2F;user2</span><br></pre></td></tr></table></figure>

<h4 id="追加库到页面中"><a href="#追加库到页面中" class="headerlink" title="追加库到页面中"></a>追加库到页面中</h4><p><strong>在Twig模版中追加库</strong></p>
<p>通过调用twig的方法，<code>attach_library()</code>可以在twig模版中追加库，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; attach_library(&#39;fluffiness&#x2F;cuddly-slider&#39;) &#125;&#125;</span><br><span class="line">&lt;div&gt;Some fluffy markup &#123;&#123; message &#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>追加给所有的页面</strong></p>
<p>为了所有页面都加载这个库，需要在主题的<code>*.info.yml</code>文件中，<code>libraries</code>键的下面声明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name: Example</span><br><span class="line">type: theme</span><br><span class="line">core: 8.x</span><br><span class="line">libraries:</span><br><span class="line">  - fluffiness&#x2F;cuddly-slider</span><br></pre></td></tr></table></figure>

<h4 id="为一组页面添加库"><a href="#为一组页面添加库" class="headerlink" title="为一组页面添加库"></a>为一组页面添加库</h4><p>在大部分情况下，你可能不希望所有的页面加载你的库，而是部分页面加载。举个例子来说，你可能只想在某个特定的区块中加载，或者用户访问某个节点类型时加载。</p>
<p>主题可以通过实现<code>THEME_preprocess_HOOK()</code>方法达到这个效果。</p>
<p>例如，你想要在维护页面追加你的库，“HOOK”就是“maintenance_page”，然后你的方法就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function fluffiness_preprocess_maintenance_page(&amp;$variables) &#123;</span><br><span class="line">  $variables[&#39;#attached&#39;][&#39;library&#39;][] &#x3D; &#39;fluffiness&#x2F;cuddly-slider&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>你也可以为主题的其它hook做同样的事情，当然你的函数中也可以包含逻辑处理。</p>
<p><strong>重要提示</strong>：最通用的用法是根据当前的路由来加载库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function fluffiness_preprocess_page(&amp;$variables) &#123;</span><br><span class="line">  $variables[&#39;#cache&#39;][&#39;contexts&#39;][] &#x3D; &#39;route&#39;;</span><br><span class="line">  if (\Drupal::routeMatch()-&gt;getRouteName() &#x3D;&#x3D;&#x3D; &#39;entity.node.preview&#39;) &#123;</span><br><span class="line">    $variables[&#39;#attached&#39;][&#39;library&#39;][] &#x3D; &#39;fluffiness&#x2F;node-preview&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="添加可定制的js"><a href="#添加可定制的js" class="headerlink" title="添加可定制的js"></a>添加可定制的js</h4><p>在某些情况下，你可能想要根据某些php计算信息来加载js。</p>
<p>在这种情况下，像之前一样，创建一个js文件并追加进来，再通过<code>drupalSettings</code>(替换Drupal7中的<code>Drupal.settings</code>)追加一些js设置项并由追加的js文件读取这些设置项。然后，为了使<code>drupalSettings</code>在我们的js文件中生效，我们得像引入jQuery一样操作：我们得在依赖中定义。</p>
<p>就像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cuddly-slider:</span><br><span class="line">  version: 1.x</span><br><span class="line">  js:</span><br><span class="line">    js&#x2F;cuddly-slider.js: &#123;&#125;</span><br><span class="line">  dependencies:</span><br><span class="line">    - core&#x2F;jquery</span><br><span class="line">    - core&#x2F;drupalSettings</span><br></pre></td></tr></table></figure>

<p>以及</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function fluffiness_page_attachments_alter(&amp;$page) &#123;</span><br><span class="line">  $page[&#39;#attached&#39;][&#39;library&#39;][] &#x3D; &#39;fluffiness&#x2F;cuddly-slider&#39;;</span><br><span class="line">  $page[&#39;#attached&#39;][&#39;drupalSettings&#39;][&#39;fluffiness&#39;][&#39;cuddlySlider&#39;][&#39;foo&#39;] &#x3D; &#39;bar&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这样<code>cuddly-slider.js</code>就可以访问<code>drupalSettings.fluffiness.cuddlySlider.foo</code>了(这里 === ‘bar’)。</p>
<h3 id="在模版中使用attributes"><a href="#在模版中使用attributes" class="headerlink" title="在模版中使用attributes"></a>在模版中使用attributes</h3><p>attributes是一个在每个twig模版中都有效的对象。attributes用来存储所有的父容器的相关属性，并提供有用的方法给开发者处理这些数据。</p>
<h4 id="Attribute的方法"><a href="#Attribute的方法" class="headerlink" title="Attribute的方法"></a>Attribute的方法</h4><p><strong>attributes.addClass()</strong></p>
<p>单个类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&#123;&#123;attributes.addClass(&#39;my-class&#39;)&#125;&#125;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>多个类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%</span><br><span class="line">  set classes &#x3D; [</span><br><span class="line">    &#39;red&#39;,</span><br><span class="line">    &#39;green&#39;,</span><br><span class="line">  ]</span><br><span class="line">%&#125;</span><br><span class="line">&lt;div&#123;&#123; attributes.addClass(classes) &#125;&#125;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>将会输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;red green&quot;&gt;&lt;&#x2F;div&gt;.</span><br></pre></td></tr></table></figure>

<p><em>html标签与twig语法之间不能有任何空格！</em></p>
<p><strong>attributes.removeClass()</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;#classes &#x3D; [ &#39;red&#39;, &#39;green&#39;, &#39;blue&#39; ] #&#125;</span><br><span class="line"></span><br><span class="line">&lt;div&#123;&#123; attributes.addClass(classes).removeClass(&#39;green&#39;) &#125;&#125;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>将会输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;red blue&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>attributes.setAttribute($attribute, $value)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&#123;&#123; attributes.setAttribute(&#39;id&#39;, &#39;myID&#39;) &#125;&#125;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>将会输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;myID&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>attributes.removeAttribute($attribute, $value)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&#123;&#123; attributes.removeAttribute(&#39;id&#39;) &#125;&#125;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>attributes.hasClass($class)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if attribute.hasClass(‘myClass&#39;) %&#125;</span><br><span class="line"> &#123;# do stuff #&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="其它有用的代码片段"><a href="#其它有用的代码片段" class="headerlink" title="其它有用的代码片段"></a>其它有用的代码片段</h4><p><strong>链式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% set classes &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;] %&#125;</span><br><span class="line">&#123;% set my_id &#x3D; &#39;specific-id&#39; %&#125;</span><br><span class="line">&#123;% set image_src &#x3D; &#39;https:&#x2F;&#x2F;www.drupal.org&#x2F;files&#x2F;powered-blue-135x42.png&#39; %&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img&#123;&#123; attributes.addClass(classes).removeClass(&#39;green&#39;).setAttribute(&#39;id&#39;, my_id).setAttribute(&#39;src&#39;, image_src) &#125;&#125;&gt;</span><br></pre></td></tr></table></figure>

<p>将会输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img id&#x3D;&quot;specific-id&quot; class&#x3D;&quot;red blue&quot; src&#x3D;&quot;https:&#x2F;&#x2F;www.drupal.org&#x2F;files&#x2F;powered-blue-135x42.png&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>使用without filter</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;”myclass &#123;&#123; attributes.class &#125;&#125;”&#123;&#123;attributes|without(‘class’) &#125;&#125;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Drupal6-7-8主题区别"><a href="#Drupal6-7-8主题区别" class="headerlink" title="Drupal6, 7, 8主题区别"></a>Drupal6, 7, 8主题区别</h3><p>这里列出的是比较重要的Drupal8中的主题变化</p>
<ol>
<li>Drupal8默认输出html5</li>
<li>除了jQuery2.x之外，Drupal8还引入更多的前端框架，例如：<a href="http://modernizr.com/">Modernizr</a>，<a href="http://underscorejs.org/">Underscore.js</a>，以及<a href="http://backbonejs.org/">Backbone.js</a>。</li>
<li>Drupal8引入了Twig，替换了原来的默认模板引擎PHPTemplate。</li>
<li>Drupal8处于性能考虑，默认启用了类似css、js合并之类的默认特性。</li>
<li>在drupal6和drupal7中，可以调用<code>drupal_add_css()</code>和<code>drupal_add_js()</code>函数添加css或者js，现在替换成了在渲染数组中追加<code>#attached</code>属性调用库的方法。</li>
<li>Drupal8不再支持IE6、7、8，启用jQuery2.0，支持现代HTML5/CSS3浏览器。</li>
<li>Drupal8不支持那些不支持SVG的浏览器(包括IE8和安卓浏览器2.3)。</li>
<li>Drupal8的css中，减少了id的使用。</li>
<li>Drupal8的css结构(文件结构)基于<a href="https://smacss.com/">SMACSS</a>和<a href="http://bem.info/">BEM</a></li>
<li>Drupal8将预处理函数中的css类移到了Twig模版中。</li>
</ol>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>theme</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8功能测试</title>
    <url>/2016/06/03/Drupal8%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>Drupal8的功能测试必须要有一个正在运行的站点，并且安装了simpleTest核心模块。<br>本文的测试用例实现的功能为：<br>向user实体增加一个字段，然后检查用户里是否存在这个字段。</p>
<p>##一、PHPUnit和SimpleTest功能测试(BrowserTestBase / WebTestBase)<br>以后的功能测试都是使用phpUnit和BrowserTestBase，Drupal8中很多模块还在用WebTestBase.</p>
<p>BrowserTestBase的主要限制是不能使用JavaScript和AJAX。<br>如果需要测试它们，建议先用WebTestBase。</p>
<p>###1、定义字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim config/install/field.field.user.user.test_status.yml</span><br></pre></td></tr></table></figure>

<p>编辑文件内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">langcode: en</span><br><span class="line">status: <span class="literal">true</span></span><br><span class="line">dependencies:</span><br><span class="line">  config:</span><br><span class="line">    - field.storage.user.test_status</span><br><span class="line">id: user.user.test_status</span><br><span class="line">field_name: test_status</span><br><span class="line">entity_type: user</span><br><span class="line">bundle: user</span><br><span class="line">label: test_status</span><br><span class="line">description: <span class="string">&#x27;&#x27;</span></span><br><span class="line">required: <span class="literal">false</span></span><br><span class="line">translatable: <span class="literal">false</span></span><br><span class="line">default_value:</span><br><span class="line">  -</span><br><span class="line">    value: <span class="number">0</span></span><br><span class="line">default_value_callback: <span class="string">&#x27;&#x27;</span></span><br><span class="line">settings:</span><br><span class="line">  on_label: <span class="string">&#x27;On&#x27;</span></span><br><span class="line">  off_label: <span class="string">&#x27;Off&#x27;</span></span><br><span class="line">field_type: <span class="keyword">boolean</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim config/install/field.storage.user.test_status.yml</span><br></pre></td></tr></table></figure>
<p>编辑内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">langcode: en</span><br><span class="line">status: <span class="literal">true</span></span><br><span class="line">dependencies:</span><br><span class="line">  module:</span><br><span class="line">    - user</span><br><span class="line">id: user.test_status</span><br><span class="line">field_name: test_status</span><br><span class="line">entity_type: user</span><br><span class="line">type: <span class="keyword">boolean</span></span><br><span class="line">settings: &#123;  &#125;</span><br><span class="line">module: test_example</span><br><span class="line">locked: <span class="literal">false</span></span><br><span class="line">cardinality: <span class="number">1</span></span><br><span class="line">translatable: <span class="literal">true</span></span><br><span class="line">indexes: &#123;  &#125;</span><br><span class="line">persist_with_no_fields: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>###2、创建功能测试<br>必须在tests/src/Functional/内创建一个以 Test.php 结尾的文件。<br>创建一个继承 BrowserTestBase 的类创建测试。<br>我们也使用 Drupal\Tests[module_name]\Functional 作为所有测试类的namespace。</p>
<p>编辑src/Functional/TestExampleUserTest.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Contains \Drupal\Tests\test_example\Functional\TestExampleUserTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">Tests</span>\<span class="title">test_example</span>\<span class="title">Functional</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">simpletest</span>\<span class="title">BrowserTestBase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check if our user field works.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@group</span> test_example</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@runTestsInSeparateProcesses</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@preserveGlobalState</span> disabled</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestExampleUserTest</span> <span class="keyword">extends</span> <span class="title">BrowserTestBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> \Drupal\user\Entity\User.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Enabled modules</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$modules</span> = [<span class="string">&#x27;test_example&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::setUp();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;user = <span class="keyword">$this</span>-&gt;drupalCreateUser();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Test that the user has a test_status field.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testUserHasTestStatusField</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertTrue(in_array(<span class="string">&#x27;test_status&#x27;</span>, array_keys(<span class="keyword">$this</span>-&gt;user-&gt;getFieldDefinitions())));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注解<br>所有使用PhpUnit的功能测试必须要有两个注解，@runTestsInSeparateProcesses 和 @preserveGlobalState disabled。</li>
<li>激活模块<br>因为功能测试运行在没有完全构建的Drupal系统内，所以我们需要激活需测试的模块。</li>
<li>setUp<br>必须调用parent::setUp方法，在这个测试用例里，我们调用了drupalCreateUser方法，这样我们可以访问到用户实体。</li>
<li>测试方法<br>和单元测试一样，方法必须以test开头。</li>
<li>断言语句<br>和单元测试一样。在上面这个测试用例，我们检查用户实体里是否存在test_status这个字段。</li>
</ul>
<p>###3、执行功能测试<br>首先设置一下phpstrom</p>
<ul>
<li>打开 PhpStorm</li>
<li>在 Command Line 部分，编辑 Environment  变量。</li>
<li>设置SIMPLETEST_BASE_URL 和值（站点URL)。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20160603/20160603111934_95639.jpg" alt="PhpStorm 功能测试"></li>
</ul>
<p>##二、Ajax功能测试-SimpleTest</p>
<p>phpUnit和simpleTest的主要区别是：</p>
<ul>
<li>文件命名和名字空间</li>
</ul>
<blockquote>
<p>要创建SimpleTest功能测试，你必须在src/Tests/内创建一个以Test.php结尾的文件。<br>一般通过继承基类WebTestBase或KernelTestBase创建测试。<br>使用Drupal[module_name]\Tests作为所有测试类的namespace。</p>
</blockquote>
<p>phpUnit功能测试的文件位于tests/src/Functional内。<br>simpleTest位于srs/Tests内。</p>
<p>下面是一个simpleTest:<br>src/Tests/TestExampleUserTest.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Contains \Drupal\test_example\Tests\TestExampleUserTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">test_example</span>\<span class="title">Tests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">simpletest</span>\<span class="title">WebTestBase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check if our user field works.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@group</span> test_example</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestExampleUserTest</span> <span class="keyword">extends</span> <span class="title">WebTestBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> \Drupal\user\Entity\User.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Enabled modules</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$modules</span> = [<span class="string">&#x27;test_example&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::setUp();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;user = <span class="keyword">$this</span>-&gt;drupalCreateUser();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Test that the user has a test_status field.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testUserHasTestStatusField</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertTrue(in_array(<span class="string">&#x27;test_status&#x27;</span>, array_keys(<span class="keyword">$this</span>-&gt;user-&gt;getFieldDefinitions())));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Drupal8的核心模块有很多测试用例。有想学习的可以多看看。</p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8单元测试</title>
    <url>/2016/06/02/Drupal8%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>单元测试在编程中是非常重要的，而我更倾向于去对那些有意义的错误做测试。<br>在Drupal8中，可以借助phpstorm来帮助进行单元测试。</p>
<p>##一、phpstorm配置</p>
<p>###1）、针对项目进行设置：</p>
<blockquote>
<p>1、选中 PhpStorm &gt; Preferences &gt; Languages &amp; Frameworks &gt; PHP &gt; PHPUnit &gt; Local<br>Window 操作系统是：File &gt; Settings …<br>2、选择 PHPUnit Library &gt; Use custom autoloader<br>3、导航到 /vendor/autoload.php<br>4、选择 Test Runner &gt; Default configuration file<br>5、导航到 /core/phpunit.xml.dist<br>6、点击 Save</p>
</blockquote>
<p>在右上方看到 For current project。接下来完成下面的步骤：</p>
<blockquote>
<p>1、运行： Run &gt; Edit Configurations<br>2、点击 + 图标，选择 PHPUnit<br>3、提供一个名称，例如 Drupal 8: All Tests<br>4、在配置文件内选择 Test Runner &gt; Defined<br>5、保存</p>
</blockquote>
<p>在右上角，选择你的运行配置，按下绿色箭头。也可以操作 Run &gt; Run Drupal 8: All Tests 。</p>
<p>说明：</p>
<blockquote>
<p>如果提示“Interpreter is not specified or invalid”，<br>要去 PhpStorm &gt; Preferences &gt; Languages &amp; Frameworks &gt; PHP 设置下 PHP 解释器。</p>
</blockquote>
<p>当你运行测试时，你会在 PhpStorm 内看到一个新窗口，列出了测试结果。默认情况，通过的测试不会显示出来。你可以操作窗口左上角的 Hide passed 图标显示通过的测试。</p>
<p>###2)、测试一个指定区域</p>
<p>PHPUnit 将运行很多测试。要把测试区域限制为一个文件夹（我们的模块）可以象下面这样做：</p>
<blockquote>
<p>1、运行： Run &gt; Edit Configurations<br>2、点击 + 图标选择 PHPUnit<br>3、提供个名称，例如 Drupal 8: Test Example<br>4、选择 Test Runner &gt; Test Scope &gt; Directory<br>5、浏览 test_example 模块<br>6、点击 Save</p>
</blockquote>
<p>##二、添加单元测试</p>
<p>要进行单元测试，必须在[module_name]/tests/srs/Unit/下创建一个以Test.php结尾的文件。一般都是继承UnitTestCase这个类来创建测试，这个测试类的namespace必须为Drupal\Test[module_name]\Unit。</p>
<p>接下来，我们来书写代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim tests/src/Unit/TestExampleConversionsTest.php</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Contains \Drupal\Tests\test_example\Unit\TestExampleConversionsTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">Tests</span>\<span class="title">test_example</span>\<span class="title">Unit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Tests</span>\<span class="title">UnitTestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Demonstrates how to write tests.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@group</span> test_example</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestExampleConversionsTest</span> <span class="keyword">extends</span> <span class="title">UnitTestCase</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::setUp();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Convert Celsius to Fahrenheit</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> $temp</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">celsiusToFahrenheit</span>(<span class="params"><span class="variable">$temp</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable">$temp</span> * (<span class="number">9</span>/<span class="number">5</span>)) + <span class="number">32</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Convert centimeter to inches.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> $length</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">centimeterToInch</span>(<span class="params"><span class="variable">$length</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$length</span> / <span class="number">2.54</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A simple test that tests our celsiusToFahrenheit() function.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOneConversion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Confirm that 0C = 31F.</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertEquals(<span class="number">31</span>, <span class="keyword">$this</span>-&gt;celsiusToFahrenheit(<span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试方法<br>每个测试方法必须以test开头。</li>
<li>断言<br>断言决定测试是否通过，比较常用的一些断言函数如assertTrue、assertFalse、assertEquals等。<br>文档见 <a href="https://phpunit.de/manual/current/zh_cn/appendixes.assertions.html">https://phpunit.de/manual/current/zh_cn/appendixes.assertions.html</a></li>
<li>setUp()<br>每次测试之前都会执行setUp方法，我们可以创建一个变成或实例。</li>
</ul>
<p>##三、执行单元测试</p>
<p>输出如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failed asserting that 32.0 matches expected 31.</span><br><span class="line">Expected :31</span><br><span class="line">Actual   :32</span><br></pre></td></tr></table></figure>

<p>##四、较复杂的单元测试<br>如果要做比较复杂的单元测试，一个简单的办法是用setUp方法，另一个方案就是使用data provider.</p>
<p>###1)、data provider</p>
<p>PHPUnit中的data provider是为测试方法提供配置的方法，并返回一个测试用例数组。</p>
<p>本例中，我们创建一个data provider叫 providerCentimetersToInches。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Provides data for the testCentimetersToInches method.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">providerCentimetersToInches</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    [<span class="number">2.545</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">254</span>,<span class="number">100</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">    [-<span class="number">2.54</span>,-<span class="number">1</span>],</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Tests centimetersToInches method.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@dataProvider</span> providerCentimetersToInches</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testCentimetersToInches</span>(<span class="params"><span class="variable">$length</span>, <span class="variable">$expectedValue</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;assertEquals(<span class="variable">$expectedValue</span>, <span class="keyword">$this</span>-&gt;centimeterToInch(<span class="variable">$length</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Data Provider注解<br>在测试方法上使用 @dataProvider 注解来连接这个data provider。</p>
</li>
<li><p>Data Provider参数<br>在测试方法中可以添加参数，在上面的测试方法中，我们在数组内传递了两个值，那么在上面的测试方法中有两个对应的参数。</p>
</li>
</ul>
<p>执行run，结果如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failed asserting that 1.0019685039370079 matches expected 1.</span><br><span class="line">Expected :1</span><br><span class="line">Actual   :1.001968503937</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8和symfony2</title>
    <url>/2015/11/12/Drupal8%E5%92%8Csymfony2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>drupal8</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8命名空间(Namespace)</title>
    <url>/2015/12/11/Drupal8%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4-Namespace/</url>
    <content><![CDATA[<p>命名空间是php5.3引进的概念，这边文章主要介绍在Drupal中如何使用命名空间，如果你对命名空间还不熟悉，请移步到<a href="http://php.net/manual/zh/language.namespaces.php" title="PHP:命名空间">这里</a>学习，这篇文章<a href="http://www.sitepoint.com/php-53-namespaces-basics/" title="php53:namespace">article introducing namespaces</a>也讲的不错。</p>
<p>在Drupal中，并不是每一个文件都需要指定命名空间。Drupal8之前为了跟php5.2保持兼容，从未用过命名空间。Drupal8限定了php版本必须是5.5以上，So，让我们尽情的享受OOP的乐趣吧！</p>
<p>###用”use”导入类</p>
<blockquote>
<p>在访问系统内部或包含在命名空间中的类名称时，可以不使用完全限定名称。命名空间和use关键字的声明必须放在文件的开头，并且以反斜杠\做为分隔符。如</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">mymodule</span>\<span class="title">Tests</span>\<span class="title">Foo</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">simpletest</span>\<span class="title">WebTestBase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests that the foo bars.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarTest</span> <span class="keyword">extends</span> <span class="title">WebTestBase</span> </span>&#123;</span><br><span class="line">	<span class="comment">// WebTestBase前不需要加\</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在访问系统内部或不包含在命名空间中的类名称时，必须使用完全限定名称。如</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> \<span class="built_in">Exception</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在一个没有声明命名空间的文件里，就算它是全局命名空间，如果要使用其他非全局命名空间的类，必须使用”use”关键字，并且需要声明在文件的开头哦！</p>
</blockquote>
<blockquote>
<p>当用”use”导入类时，不要在开头加\。大PHP官方也是这么推荐的，见<a href="http://www.php.net/manual/en/language.namespaces.importing.php">PHP documentation</a></p>
</blockquote>
<blockquote>
<p>当在字符串中指定类名时，必须使用带命名空间的全类名，并且不能以\开头。</p>
</blockquote>
<pre><code>如果要在双引号中使用命名空间，必须转义，如：
</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Drupal\\Content\\ContentInterface&quot;</span></span><br></pre></td></tr></table></figure>

<pre><code>在单引号中就不需要转义了，如：
</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Drupal\Context\ContextInterface&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>通常情况下，推荐使用单引号的写法！
</code></pre>
<blockquote>
<p>一个”use”只能声明一个类，不建议使用”use”导入多个类.如这种写法就是不推荐的</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">My</span>\<span class="title">Full</span>\<span class="title">Classname</span>, <span class="title">My</span>\<span class="title">Full</span>\<span class="title">NSname</span>;</span><br></pre></td></tr></table></figure>

<pre><code>而这种写法是推荐的
</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">My</span>\<span class="title">Full</span>\<span class="title">Classname</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在.api.php这种API文件中必须使用类的全名，这样别人要想hook你的类，他们就可以”use”导入了。如</p>
</blockquote>
<p>定义Drupal\Subsystem\Foo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\Subsystem\Foo.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">Subsystem</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This imports just the Cat class from the Drupal\Othersystem namespace.</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Othersystem</span>\<span class="title">Cat</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bar is a class in the Drupal\Subsystem namespace in another file.</span></span><br><span class="line"><span class="comment">// It is already available without any importing.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines a Foo.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs a new Foo object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Bar <span class="variable">$b</span>, Cat <span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Global classes must be prefixed with a \ character.</span></span><br><span class="line">    <span class="variable">$d</span> = <span class="keyword">new</span> \DateTime();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>hook Drupal\Subsystem\Foo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * The Example module.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This file is not part of any namespace, so all global namespaced classes</span></span><br><span class="line"><span class="comment"> *  are automatically available.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Subsystem</span>\<span class="title">Foo</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Does stuff with Foo stuff.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> \Drupal\Subsystem\Foo $f</span></span><br><span class="line"><span class="comment"> *   A Foo object used to bar the baz.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_stuff</span>(<span class="params">Foo <span class="variable">$f</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// The DateTime class does not need to be imported as it is already global</span></span><br><span class="line">  <span class="variable">$d</span> = <span class="keyword">new</span> DateTime();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>###类的别名</p>
<p>php允许导入类的时候使用别名，这样可以避免可恶的重名！一旦两个类重名了，可以将各自命名空间里的上一级的名字拿出来作为相应的前缀。</p>
<p>如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Foo</span>\<span class="title">Bar</span>\<span class="title">Baz</span> <span class="title">as</span> <span class="title">BarBaz</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Stuff</span>\<span class="title">Thing</span>\<span class="title">Baz</span> <span class="title">as</span> <span class="title">ThingBaz</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests stuff for the whichever.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$a</span> = <span class="keyword">new</span> BarBaz(); <span class="comment">// This will be Foo\Bar\Baz</span></span><br><span class="line">  <span class="variable">$b</span> = <span class="keyword">new</span> ThingBaz(); <span class="comment">// This will be Stuff\Thing\Baz</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>###导入的顺序</p>
<p>如果要导入多个类，Drupal8并没有限制导入的顺序。如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">block</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityForm</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Entity</span>\<span class="title">EntityManagerInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Form</span>\<span class="title">FormState</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Form</span>\<span class="title">FormStateInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">DependencyInjection</span>\<span class="title">ContainerInterface</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>###模块</p>
<p>模块中的类必须申明为特定的命名空间，如模块名为example_module。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">example_module</span></span><br></pre></td></tr></table></figure>

<p>要在Drupal8中自动加载(autoload)，还要这些类归置到指定的文件夹下，一般约定在</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">modules/example_module/src</span><br></pre></td></tr></table></figure>

<p>举个简单的例子，如：</p>
<blockquote>
<p>NO.1</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">example_module</span></span><br><span class="line"></span><br><span class="line">// 创建类</span><br><span class="line"><span class="title">class</span> <span class="title">Foo</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>这个对应的文件就是example_module/src/Foo.php。</p>
<blockquote>
<p>NO.2</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">example_module</span>\<span class="title">Foo</span></span><br><span class="line"></span><br><span class="line">// 创建类</span><br><span class="line"><span class="title">class</span> <span class="title">Bar</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>这个对应的文件就是example_module/src/Foo/Bar.php。</p>
<p>以上，就是对Drupal8的命名空间做简单的梳理和介绍。欢迎拍砖交流！</p>
<p>参考文章：<br>1、<a href="https://www.drupal.org/node/1353118">https://www.drupal.org/node/1353118</a><br>2、<a href="https://www.drupal.org/node/2156625">https://www.drupal.org/node/2156625</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>namespace</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8实体(entity)</title>
    <url>/2017/02/28/Drupal8%E5%AE%9E%E4%BD%93-entity/</url>
    <content><![CDATA[<p>Drupal 的 Entity 是一个很重要的概念，暂时把 Entity 翻译成“实体”吧。正确的理解 Entity，有助于理解 Drupal 信息管理结构，对于使用 Drupal 会有很大的帮助，下面将对这个 Entity 做一个通俗的解释。</p>
<h2 id="先简单介绍一下-Entity："><a href="#先简单介绍一下-Entity：" class="headerlink" title="先简单介绍一下 Entity："></a>先简单介绍一下 Entity：</h2><p>什么是 Entity？Entity 包括 Nodes（节点）, Users（用户）, Taxonomy Terms（术语）, Comments（评论），它们都是实体，只是命名和用途不一样而已。下面翻译一下 Drupal 官网找到的几行定义文字：<br>An entity type is a base class<br>一个实体类型是基础类别<br>A bundle is an extended class<br>一个集合是扩展类别<br>A field is a class member, property, variable or field instance (depending on your naming preference)<br>一个字段是一个类别的成员、属性、元素、或者字段实例（取决于你的命名喜好）<br>An entity is an object or instance of a base or extended class<br>一个实体是一个物体，或者是基础类别的实例，或者是扩展类别的实例<br>更多的就不翻译了，免得看得一头雾水。如果你能理解，下面的内容也不用看了。</p>
<h2 id="关于-Entity-的通俗解释："><a href="#关于-Entity-的通俗解释：" class="headerlink" title="关于 Entity 的通俗解释："></a>关于 Entity 的通俗解释：</h2><p>这是根据我对 Entity 的理解来解释的，我觉得我对 Entity 理解得差不多了，不至于对大家造成多大的误导。<br>好了，让我们来打个比方，请充分发挥你的联想能力：<br>把 Entity Type（实体类型） 看做事物——事物有很多种，包括生物、非生物等，比如竹子、蝴蝶、雨花石、空气等。<br>把 Bundle（集合） 看成某一类具体的事物，比如竹类——竹子其实也分很多种，比如水竹、毛竹、紫竹、苦竹等<br>把 Entity（实体）看成某一种具体的事物，比如毛竹——毛竹其实其实是由很多部分组成的，比如主干、竹枝、竹叶、根须等<br>把 Field（字段）看成组成某一具体事物的一部分，比如竹叶<br>这样也许比较好理解吧。你也可以把 Bundle 看成蝴蝶这个大类，Entity 相当于大鸟翼蝶什么的，字段相当于翅膀、触须什么的。以此类推。</p>
<h2 id="Content-Type（内容类型）："><a href="#Content-Type（内容类型）：" class="headerlink" title="Content Type（内容类型）："></a>Content Type（内容类型）：</h2><p>在括号内加解释太乱了，分两行吧，一行翻译成中文，一行不翻译。我个人觉得不翻译的话好理解一点，但是对英语不熟悉的网友看英语可能不好理解。<br>翻译的：内容类型其实就是节点这种实体的集合，默认包括标题、内容两个字段。评论也是一个实体，它和节点这种实体是关联的关系。<br>不翻译：Content Type 其实就是 node 这种 Entity 的 Bundle，默认包括 Title、Body 两个 Filed。</p>
<h2 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h2><p>理解了 Entity（实体）之后，自然就是应用了。可以用 Entity Construction Kit (ECK)  这个模块创建新的Entity（实体），或者简单的，就添加新的 Content Type（内容类型）吧。<br>内容所指的其实不仅仅是文章，图片、音乐、电影、文件、书籍、应用等等都是内容。你想做什么站点就怎么去定义它，它有什么属性就添加几个字段。<br>把内容理解成某些东西就对了，只要它是信息数据都能用 Drupal 来管理。怎么样？知道 Drupal 可以做很多种网站了吧？其实前面说的主要还是资讯类的网站，更多类型的网站该怎么做，就要发挥你的思维力了。思路决定出路，见识改变思维。</p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>entity</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8数据库(database)</title>
    <url>/2016/07/20/Drupal8%E6%95%B0%E6%8D%AE%E5%BA%93-database/</url>
    <content><![CDATA[<p>Drupal8的数据库操作函数跟Drupal7没什么变化，但是，在Drupal9(还没开始开发，但是代码注释中已经有)中会把一些函数移除，比如db_add, db_insert, db_query等，见 <a href="https://api.drupal.org/api/drupal/core%21includes%21database.inc/8" title="D8 database">Drupal8 database</a>。</p>
<p>##Select</p>
<p>###Get single value:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = \Drupal::database()-&gt;select(<span class="string">&#x27;node_field_data&#x27;</span>, <span class="string">&#x27;nfd&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;addField(<span class="string">&#x27;nfd&#x27;</span>, <span class="string">&#x27;nid&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;condition(<span class="string">&#x27;nfd.title&#x27;</span>, <span class="string">&#x27;Potato&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;range(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$nid</span> = <span class="variable">$query</span>-&gt;execute()-&gt;fetchField();</span><br></pre></td></tr></table></figure>

<p>###Get single row:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = \Drupal::database()-&gt;select(<span class="string">&#x27;node_field_data&#x27;</span>, <span class="string">&#x27;nfd&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;fields(<span class="string">&#x27;nfd&#x27;</span>, [<span class="string">&#x27;nid&#x27;</span>, <span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line"><span class="variable">$query</span>-&gt;condition(<span class="string">&#x27;nfd.type&#x27;</span>, <span class="string">&#x27;vegetable&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;range(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$vegetable</span> = <span class="variable">$query</span>-&gt;execute()-&gt;fetchAssoc();</span><br></pre></td></tr></table></figure>

<p>###Using db like:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = \Drupal::database()-&gt;select(<span class="string">&#x27;node_field_data&#x27;</span>, <span class="string">&#x27;nfd&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;fields(<span class="string">&#x27;nfd&#x27;</span>, [<span class="string">&#x27;nid&#x27;</span>, <span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line"><span class="variable">$query</span>-&gt;condition(<span class="string">&#x27;nfd.type&#x27;</span>, <span class="string">&#x27;vegetable&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;condition(<span class="string">&#x27;nfd.title&#x27;</span>, <span class="variable">$query</span>-&gt;escapeLike(<span class="string">&#x27;ca&#x27;</span>) . <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;LIKE&#x27;</span>);</span><br><span class="line"><span class="variable">$vegetable</span> = <span class="variable">$query</span>-&gt;execute()-&gt;fetchAllKeyed();</span><br></pre></td></tr></table></figure>

<p>###Get several rows with JOIN:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = \Drupal::database()-&gt;select(<span class="string">&#x27;node_field_data&#x27;</span>, <span class="string">&#x27;nfd&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;fields(<span class="string">&#x27;nfd&#x27;</span>, [<span class="string">&#x27;nid&#x27;</span>, <span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line"><span class="variable">$query</span>-&gt;addField(<span class="string">&#x27;ufd&#x27;</span>, <span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;join(<span class="string">&#x27;users_field_data&#x27;</span>, <span class="string">&#x27;ufd&#x27;</span>, <span class="string">&#x27;ufd.uid = nfd.uid&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;condition(<span class="string">&#x27;nfd.type&#x27;</span>, <span class="string">&#x27;vegetable&#x27;</span>);</span><br><span class="line"><span class="variable">$vegetable</span> = <span class="variable">$query</span>-&gt;execute()-&gt;fetchAllAssoc(<span class="string">&#x27;nid&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>##Insert</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = \Drupal::database()-&gt;insert(<span class="string">&#x27;flood&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;fields([</span><br><span class="line">  <span class="string">&#x27;event&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;identifier&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="variable">$query</span>-&gt;values([</span><br><span class="line">  <span class="string">&#x27;My event&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;My indentifier&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="variable">$query</span>-&gt;execute();</span><br></pre></td></tr></table></figure>

<p>注：values可以调用多次，如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span>-&gt;values([</span><br><span class="line">  <span class="string">&#x27;My event&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;My indentifier&#x27;</span></span><br><span class="line">])</span><br><span class="line">-&gt;values([</span><br><span class="line">  <span class="string">&#x27;My event1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;My indentifier1&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>##Update</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = \Drupal::database()-&gt;update(<span class="string">&#x27;flood&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;fields([</span><br><span class="line">  <span class="string">&#x27;identifier&#x27;</span> =&gt; <span class="string">&#x27;My new identifier&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="variable">$query</span>-&gt;condition(<span class="string">&#x27;event&#x27;</span>, <span class="string">&#x27;My event&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;execute();</span><br></pre></td></tr></table></figure>

<p>##Upsert</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = \Drupal::database()-&gt;upsert(<span class="string">&#x27;flood&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;fields([</span><br><span class="line">  <span class="string">&#x27;fid&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;identifier&#x27;</span>,</span><br><span class="line">]);</span><br><span class="line"><span class="variable">$query</span>-&gt;values([</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;My indentifier for upsert&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="variable">$query</span>-&gt;key(<span class="string">&#x27;fid&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;execute();</span><br></pre></td></tr></table></figure>

<p>注：upsert，顾名思义就是update+insert的作用。<br>根据条件判断有无记录，有的话就更新记录，没有的话就插入一条记录。</p>
<p>key()用来定义一个已经存在的row, 必须是unique类型，不然永远执行Insert操作.</p>
<p>###Delete</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = \Drupal::database()-&gt;delete(<span class="string">&#x27;flood&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;condition(<span class="string">&#x27;event&#x27;</span>, <span class="string">&#x27;My event&#x27;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;execute();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8模块(module)开发</title>
    <url>/2015/11/12/Drupal8%E6%A8%A1%E5%9D%97-module-%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8模板引擎-twig</title>
    <url>/2015/11/18/Drupal8%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E-twig/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Twig是一个高效、安全并可扩展的PHP模板引擎。</p>
<p>如果你具有Smarty, Django或者Jinja这养的基于文本的模板语言的经验，那么你对Twig会感觉一见如故。在遵循PHP理念的基础之上，提供了具备强大功能的模板环境，不论是对开发者还是设计者来说，这一引擎都具有良好的可用性。</p>
<p>关键特性：</p>
<ul>
<li>快速：Twig把模板编译成为优化后的PHP代码。相对普通PHP代码来说，其额外开销非常轻微。</li>
<li>安全：Twig会使用一个沙箱模式来运行不信任的模板代码。这使得Twig可以在用户可以修改模板设计的应用中工作良好。</li>
<li>弹性：Twig试用了弹性的词法和语法分析器。开发者可以定义自己的标记和过滤，并创建自己的DSL。</li>
</ul>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>Twig需要的最小运行环境为PHP <strong>5.2.4</strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>推荐使用Composer安装Twig：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer require <span class="string">&quot;twig/twig:~1.0&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="基础API用法"><a href="#基础API用法" class="headerlink" title="基础API用法"></a>基础API用法</h3><p>本节对Twig PHP API做一个简单介绍。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;/path/to/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> Twig_Loader_Array(</span><br><span class="line">    <span class="string">&#x27;index&#x27;</span> =&gt; <span class="string">&#x27;Hello &#123;&#123; name &#125;&#125;!&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$twig</span>-&gt;render(<span class="string">&#x27;index&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Fabien&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>Twig使用一个加载器(Twig_Loader_Array)来定位模板文件，使用一个环境(Twig_Environment)来存储配置，render()方法的第一个参数指定了模板，后面的参数则为渲染提供了变量。 模板一般是保存在文件系统中，所以Twig提供了一个文件系统加载器：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> Twig_Loader_Filesystem(<span class="string">&#x27;/path/to/templates&#x27;</span>);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;cache&#x27;</span> =&gt; <span class="string">&#x27;/path/to/compilation_cache&#x27;</span>,</span><br><span class="line">));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$twig</span>-&gt;render(<span class="string">&#x27;index.html&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Fabien&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>如果没有使用 Composer，可以使用 Twig 的内置加载器：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;/path/to/lib/Twig/Autoloader.php&#x27;</span>;</span><br><span class="line">Twig_Autoloader::register();</span><br></pre></td></tr></table></figure>

<h2 id="二、模板设计者的Twig"><a href="#二、模板设计者的Twig" class="headerlink" title="二、模板设计者的Twig"></a>二、模板设计者的Twig</h2><p>本文描述了模板引擎中涉及到的语法和语义，对Twig模板的设计会很有帮助。</p>
<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>模板是一个简单的文本文件。它能够生成任何文本格式（HTML, XML, CSV, LaTeX等）。他没有固定的扩展名，html、xml都没关系。</p>
<p>模板中包含变量和表达式在模板被处理时会被替换为真实的值，tags则对模板的逻辑进行控制。</p>
<p>下面用一个小例子展示一些基础内容，当然，后面会做进一步的深入。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;title&gt;My Webpage&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;ul id=<span class="string">&quot;navigation&quot;</span>&gt;</span><br><span class="line">    &#123;% raw %&#125;</span><br><span class="line">    &#123;% <span class="keyword">for</span> item in navigation %&#125;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;&#123;&#123; item.href &#125;&#125;&quot;</span>&gt;&#123;&#123; item.caption &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &#123;% <span class="keyword">endfor</span> %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &#123;% endraw %&#125;</span><br><span class="line">    &lt;h1&gt;My Webpage&lt;/h1&gt;</span><br><span class="line">    &#123;% raw %&#125;</span><br><span class="line">    &#123;&#123; a_variable &#125;&#125;</span><br><span class="line">    &#123;% endraw %&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


上面代码中有两种分隔符：{% ... %}和{{ ... }}。第一种用于执行for循环之类的语句，第二种用于输出表达式结果。


<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>应用会把变量传递给模板进行处理。变量自身也可以拥有属性或元素供外部访问。变量的具体形态取决于提供变量的应用。</p>
<p>可以利用句点（.）来访问变量的属性（相当于PHP对象的属性或方法，或者PHP数组的成员），或者也可以使用下标语法（[]）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; foo.bar &#125;&#125;</span><br><span class="line">&#123;&#123; foo[<span class="string">&#x27;bar&#x27;</span>] &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>当属性名字中包含了特别字符（例如“-”会被当做减号处理）的时候，可以使用attribute函数来访问变量的属性：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment"># 等价于不能工作的：foo.data-foo #&#125;</span></span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; attribute(foo, <span class="string">&#x27;data-foo&#x27;</span>) &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p><em>大括号是打印指令，而不是变量的组成部分。当在tag中访问变量的时候，不要在Tag中访问变量的时候使用这种语法。</em></p>
<p>在strict_variables选项为false的时候，如果变量或属性不存在，会返回null；而如果该选项设置为true，这种情况就会抛出错误</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>foo.bar在PHP这一层次做了如下事情：</p>
<ul>
<li>检查foo是不是数组，bar是不是其中的一个有效元素；</li>
<li>如果不是，且foo是一个对象，检查bar是不是有效的属性；</li>
<li>如果不是，且foo是一个对象，检查bar是不是有效的方法（即使bar是构造器——所以请使用__construct()）；</li>
<li>如果不是，且foo是一个对象，检查getBar是不是有效的方法；</li>
<li>如果不是，且foo是一个对象，检查isBar是不是有效的方法；</li>
<li>如果都不是，返回null。</li>
</ul>
<p>另一方面，foo[‘bar’]只对PHP数组工作 - 检查foo是不是一个数组，bar是不是一个有效元素； - 如果不是，返回null。</p>
<p><strong>如果要访问变量的动态属性，应该使用attribute()函数。</strong></p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>模板中随时可以使用如下的变量：</p>
<ul>
<li>_self：当前的模板；</li>
<li>_context：当前上下文</li>
<li>_charset：当前编码</li>
</ul>
<h3 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h3><p>可以在代码中为变量赋值。赋值过程使用settag完成：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% set foo = <span class="string">&#x27;foo&#x27;</span> %&#125;</span><br><span class="line">&#123;% set foo = [<span class="number">1</span>, <span class="number">2</span>] %&#125;</span><br><span class="line">&#123;% set foo = &#123;<span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>&#125; %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p>变量可以用filters进行修改。Filters和变量之间用管道符（|）进行分隔，可以用括号来包含参数。多个Filter可能进行链式调用——前一个Filter的输出可作为下一个Filter的输入。</p>
<p>下面的例子清理所有的HTML标记，并做标题大写处理：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; name|striptags|title &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>Filter可以用括号的形式接收参数。这个例子用逗号连接一个列表：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="keyword">list</span>|join(<span class="string">&#x27;, &#x27;</span>) &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>要对一段代码使用Filter，可以用filter tag操作：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% filter upper %&#125;</span><br><span class="line">  This text becomes uppercase</span><br><span class="line">&#123;% endfilter %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>调用函数可以生成内容。调用函数的方式是：函数名称加括号，括号中可能包含参数。</p>
<p>例如range函数返回一个递增的整数列表：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> i in range(<span class="number">0</span>, <span class="number">3</span>) %&#125;</span><br><span class="line">  &#123;&#123; i &#125;&#125;,</span><br><span class="line">&#123;% <span class="keyword">endfor</span> %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>前往<a href="http://twig.sensiolabs.org/doc/functions/index.html">functions</a>一节可以学习更多内置函数的内容。</p>
<h3 id="具名参数"><a href="#具名参数" class="headerlink" title="具名参数"></a>具名参数</h3><p>1.12版中新增</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> i in range(low=<span class="number">1</span>, high=<span class="number">10</span>, step=<span class="number">2</span>) %&#125;</span><br><span class="line">  &#123;&#123; i &#125;&#125;,</span><br><span class="line">&#123;% <span class="keyword">endfor</span> %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>有了具名参数，传递给模板的参数可以更加明确，让模板更加易用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; data|convert_encoding(<span class="string">&#x27;UTF-8&#x27;</span>, <span class="string">&#x27;iso-2022-jp&#x27;</span>) &#125;&#125;</span><br><span class="line">&#123;<span class="comment"># 相比： #&#125;</span></span><br><span class="line">&#123;&#123; data|convert_encoding(<span class="keyword">from</span>=<span class="string">&#x27;iso-2022-jp&#x27;</span>, to=<span class="string">&#x27;UTF-8&#x27;</span>) &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>具名参数还能在不传递某些参数时候直接跳过：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;<span class="comment"># the first argument is the date format, which defaults to the global date format if null is passed #&#125;</span></span><br><span class="line">&#123;&#123; <span class="string">&quot;now&quot;</span>|date(<span class="literal">null</span>, <span class="string">&quot;Europe/Paris&quot;</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># or skip the format value by using a named argument for the time zone #&#125;</span></span><br><span class="line">&#123;&#123; <span class="string">&quot;now&quot;</span>|date(timezone=<span class="string">&quot;Europe/Paris&quot;</span>) &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>还可以用顺序参数和具名参数夹杂的方式进行调用，这里要保证顺序参数必须比具名参数先出现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="string">&quot;now&quot;</span>|date(<span class="string">&#x27;d/m/Y H:i&#x27;</span>, timezone=<span class="string">&quot;Europe/Paris&quot;</span>) &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p><em>每个函数和Filter的文档中，如果该函数或者Filter支持具名参数，都会有一节列出所有的参数名称。</em></p>
<h3 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h3>
控制结构指的是所有能够控制程序流程的元素——条件判断（也就是if/elseif/else）、for循环，以及语句块等。控制结构用{% ... %}包裹


<p>例如，要显示一个users变量中所有的列表成员，使用for：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Members&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &#123;% raw %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> user in users %&#125;</span><br><span class="line">      &lt;li&gt;&#123;&#123; user.username|e &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &#123;% <span class="keyword">endfor</span> %&#125;</span><br><span class="line">  &#123;% endraw %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>可以用if进行条件判断：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> users|length &gt; <span class="number">0</span> %&#125;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &#123;% raw %&#125;</span><br><span class="line">    &#123;% <span class="keyword">for</span> user in users %&#125;</span><br><span class="line">      &lt;li&gt;&#123;&#123; user.username|e &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% <span class="keyword">endfor</span> %&#125;</span><br><span class="line">    &#123;% endraw %&#125;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://twig.sensiolabs.org/doc/tags/index.html">Tags</a>页中描述了各种内置Tag。</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>在模板中进行注释，使用注释语法`：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;<span class="comment"># 注：禁用这一块东西，不再需要了</span></span><br><span class="line">&#123;% <span class="keyword">for</span> user in users %&#125;</span><br><span class="line">  ...</span><br><span class="line">&#123;% <span class="keyword">endfor</span> %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="包含其他模板"><a href="#包含其他模板" class="headerlink" title="包含其他模板"></a>包含其他模板</h3><p>include标签用于包含其它模版，并把该模版的渲染结果返回到当前页面：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">include</span> <span class="string">&#x27;sidebar.html&#x27;</span> %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>缺省状况下，当前的上下文会被传递给被包含的模板。</p>
<p>传递给被包含模板中的上下文包含当前模板中定义的变量：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> box in boxes %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">&quot;render_box.html&quot;</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">endfor</span> %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子中，render_box.html可以访问box变量。</p>
<p>模板文件名的选取，取决于模板加载器。比如Twig_Loader_Filesystem允许通过文件名访问其他的模板。可以使用子目录来访问其他模板：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">include</span> <span class="string">&quot;sections/articles/sidebar.html&quot;</span> %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模版继承"><a href="#模版继承" class="headerlink" title="模版继承"></a>模版继承</h3><p>Twig最强大的能力就是继承。这一个能力可以让你建立一个包含所有基础元素的基础模板，并定义可以被子模板覆盖的block。</p>
<p>这部分内容并不像听起来那么复杂。下面的例子能让你更好的理解这个概念。</p>
<p>我们创建一个名为base.html的基本模板，在其中定义了一个简单的HTML结构，后面可以用在一个简单的两列布局的页面上：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &#123;% raw %&#125;</span><br><span class="line">    &#123;% block head %&#125;</span><br><span class="line">      &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;style.css&quot;</span> /&gt;</span><br><span class="line">      &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125; - My Webpage&lt;/title&gt;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    &#123;% endraw %&#125;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">      &#123;% raw %&#125;</span><br><span class="line">      &#123;% block content %&#125;</span><br><span class="line">      &#123;% endblock %&#125;</span><br><span class="line">      &#123;% endraw %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;footer&quot;</span>&gt;</span><br><span class="line">      &#123;% raw %&#125;</span><br><span class="line">      &#123;% block footer %&#125;</span><br><span class="line">          &amp;copy; Copyright <span class="number">2011</span> by &lt;a href=<span class="string">&quot;http://domain.invalid/&quot;</span>&gt;you&lt;/a&gt;.</span><br><span class="line">      &#123;% endblock %&#125;</span><br><span class="line">      &#123;% endraw %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<a href="http://twig.sensiolabs.org/doc/tags/block.html">Block标记</a>定义了四个Block，子模板可以对这四个Block进行填充。所有的Block标记的作用就在于告诉模板引擎——子模板可能对模板的这一部分进行覆盖。</p>
<p>一个子模板看起来大概是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">extends</span> <span class="string">&quot;base.html&quot;</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Index&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">  &#123;&#123; <span class="built_in">parent</span>() &#125;&#125;</span><br><span class="line">  &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">      .important &#123; color: <span class="comment">#336699; &#125;</span></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;h1&gt;Index&lt;/h1&gt;</span><br><span class="line">  &lt;p class=&quot;important&quot;&gt;</span><br><span class="line">      Welcome to my awesome homepage.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>此处的关键就在于<a href="http://twig.sensiolabs.org/doc/tags/extends.html">Extends tag</a>。他让模板引擎得知这个模板是“扩展自其他模板”。当模板系统处理这一模板的时候，就会首先定位父模板。Extends标记应该是子模板的第一个标记。</p>
<p>另外因为子模板中没有定义footer block，所以此处会继续使用父模板的内容。</p>
<p>也可以用<a href="http://twig.sensiolabs.org/doc/functions/parent.html">Parent函数</a>来渲染父模板Block的内容。这一调用会返回父模板中的Block结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &lt;h3&gt;Table Of Contents&lt;/h3&gt;</span><br><span class="line">  ...</span><br><span class="line">  &#123;&#123; <span class="built_in">parent</span>() &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p><em><a href="http://twig.sensiolabs.org/doc/tags/extends.html">extend文档</a>中介绍了更深入的特性，例如Block嵌套、作用域、动态继承以及条件继承等。</em></p>
<h3 id="HTML转义"><a href="#HTML转义" class="headerlink" title="HTML转义"></a>HTML转义</h3><p>从模板中生成HTML的时候，存在一种风险：一个变量可能包含了HTML代码，会影响到最终的HTML。有两种方式来解决这个问题：人工转义每一个变量，或者缺省情况下自动转义所有变量。Twig对两种方式都支持，缺省开启第二种。</p>
<p><em>自动转义只有在escaper扩展激活的情况下才生效。</em></p>
<ul>
<li><h4 id="人工转义"><a href="#人工转义" class="headerlink" title="人工转义"></a>人工转义</h4></li>
</ul>
<p>如果启用了人工转义，那么对需要进行处理的变量进行转义就成了开发者的责任。那么什么需要被转义呢？答案是所有不信任的变量。人工转义的方法是把变量传送给<a href="http://twig.sensiolabs.org/doc/filters/escape.html">escape filter</a>或者e filter进行处理。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; user.username|e &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="自动转义"><a href="#自动转义" class="headerlink" title="自动转义"></a>自动转义</h4></li>
</ul>
<p>不管是否启用了自动转义，都可以利用<a href="http://twig.sensiolabs.org/doc/tags/autoescape.html">autoescape</a>标记来标记模板中的一段内容。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% autoescape %&#125;</span><br><span class="line">  Everything will be automatically escaped in this block (using the HTML strategy)</span><br><span class="line">&#123;% endautoescape %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>缺省情况下，自动转义使用html策略。如果输出内容属于其他上下文，则需要显式的指定其他的转义策略：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% autoescape <span class="string">&#x27;js&#x27;</span> %&#125;</span><br><span class="line">这个区块中的所有字符都会被自动转义(采用JS策略)</span><br><span class="line">&#123;% endautoescape %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>转义</p>
</blockquote>

让Twig能够忽略一部分本应当做是block或者变量来处理的东西，是个常见甚至必要的需求。例如想要以原始形态输出{{这样被语法占用的关键字，而不想被当做变量的开始，就可以使用一个小技巧。


最简单的方式就是使用一个变量表达式：

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="string">&#x27;&#123;&#123;&#x27;</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

### 宏

在版本1.12中出现：支持缺省参数值。

宏和和其他语言中的函数类似。它可以复用经常使用的HTML片段。

使用[macro标记](http://twig.sensiolabs.org/doc/tags/macro.html)可以定义宏。下面是forms.html中的一个小例子：利用宏渲染一个form元素：

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% macro input(name, value, type, size) %&#125;</span><br><span class="line">  &lt;input type=<span class="string">&quot;&#123;&#123; type|default(&#x27;text&#x27;) &#125;&#125;&quot;</span> name=<span class="string">&quot;&#123;&#123; name &#125;&#125;&quot;</span> value=<span class="string">&quot;&#123;&#123; value|e &#125;&#125;&quot;</span> size=<span class="string">&quot;&#123;&#123; size|default(20) &#125;&#125;&quot;</span> /&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

可以在任何模板中定义宏，然后使用[import标记](http://twig.sensiolabs.org/doc/tags/import.html)进行导入即可：

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% import <span class="string">&quot;forms.html&quot;</span> <span class="keyword">as</span> forms %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; forms.input(<span class="string">&#x27;username&#x27;</span>) &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

在从其他模板中进行引入的时候，还可以利用From标记为其赋予别名：

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">from</span> <span class="string">&#x27;forms.html&#x27;</span> import input <span class="keyword">as</span> input_field %&#125;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;Username&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;&#123;&#123; input_field(<span class="string">&#x27;username&#x27;</span>) &#125;&#125;&lt;/dd&gt;</span><br><span class="line">  &lt;dt&gt;Password&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;&#123;&#123; input_field(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;password&#x27;</span>) &#125;&#125;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

还可以在为宏指定缺省参数：

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% macro input(name, value = <span class="string">&quot;&quot;</span>, type = <span class="string">&quot;text&quot;</span>, size = <span class="number">20</span>) %&#125;</span><br><span class="line">  &lt;input type=<span class="string">&quot;&#123;&#123; type &#125;&#125;&quot;</span> name=<span class="string">&quot;&#123;&#123; name &#125;&#125;&quot;</span> value=<span class="string">&quot;&#123;&#123; value|e &#125;&#125;&quot;</span> size=<span class="string">&quot;&#123;&#123; size &#125;&#125;&quot;</span> /&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

### 表达式

Twig允许使用表达式，工作方式类似普通的PHP，即使你对PHP没那么熟悉，也可以轻松面对。

> 运算符优先级按递增顺序排列如下：
> b-and, b-xor, b-or, or, and, ==, !=, <, >, >=, <=, in, matches, starts with, ends with, .., +, -, ~, *, /, //, %, is, **, |, [], and

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% set greeting = <span class="string">&#x27;Hello &#x27;</span> %&#125;</span><br><span class="line">&#123;% set name = <span class="string">&#x27;Fabien&#x27;</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; greeting ~ name|lower &#125;&#125;   &#123;<span class="comment"># Hello fabien #&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># use parenthesis to change precedence #&#125;</span></span><br><span class="line">&#123;&#123; (greeting ~ name)|lower &#125;&#125; &#123;<span class="comment"># hello fabien #&#125;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

#### 常量

在1.5中新增：支持以名称和表达式作为哈希键

表达式的最简单形式就是常量了。他是PHP类型的一种实现，包含字符串、数字以及数组。以下是一些例子

- "Hello world"：单引号或双引号之间的内容是字符串。可以在任何需要字符串的情况下使用（例如作为函数或者Filter的参数，或者在extend以及include过程中使用）。
- 42 / 42.23：整数和浮点数。有小数点的是浮点数；否则就是整数。
- ["foo", "bar"]：数组由方括号包含的一组逗号分隔的表达式组成。
- {"foo": "bar"}：同数组类似，不过是以花括号进行包装。

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;<span class="comment"># keys as string #&#125;</span></span><br><span class="line">&#123; <span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>: <span class="string">&#x27;bar&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># keys as names (equivalent to the previous hash) -- as of Twig 1.5 #&#125;</span></span><br><span class="line">&#123; foo: <span class="string">&#x27;foo&#x27;</span>, bar: <span class="string">&#x27;bar&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># keys as integer #&#125;</span></span><br><span class="line">&#123; <span class="number">2</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;bar&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># keys as expressions (the expression must be enclosed into parentheses) -- as of Twig 1.5 #&#125;</span></span><br><span class="line">&#123; (<span class="number">1</span> + <span class="number">1</span>): <span class="string">&#x27;foo&#x27;</span>, (a ~ <span class="string">&#x27;b&#x27;</span>): <span class="string">&#x27;bar&#x27;</span> &#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

- true / false：布尔值，你懂的
- null：表明无特定值。当访问一个不存在的变量时，就会返回null，none是null的别名。

数组和哈希可以嵌套：

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% set foo = [<span class="number">1</span>, &#123;<span class="string">&quot;foo&quot;</span>: <span class="string">&quot;bar&quot;</span>&#125;] %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

*字符串使用单双引号对性能没什么影响，但是只有双引号才支持字符串差值。*

#### 算数运算符

Twig可以进行运算。这个功能很少用得到，不过为了完整起见，还是提供了这个功能。目前支持下列操作符：



- +：加法
- -：减法
- /：除法
- %：求余。{{ 11 % 7 }} 等于 4.
- //：整除，返回两个数相除得到的结果的整数部分。{{ 20 // 7 }}等于2
- *： 相乘，{{2 * 2}} 返回 4。
- **：乘方，{{ 2 3}}`等于8。



<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>可以用下面的操作符连接多个表达式：</p>
<ul>
<li>and：与运算</li>
<li>or：或运算</li>
<li>not：非运算</li>
<li>(expr)：为表达式分组</li>
</ul>
<p><em>Twig还支持位操作：（b-and, b-xor 以及 b-or）。</em></p>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>Twig支持的比较运算符：==、!=、&lt;、&gt;、&gt;=、&lt;=，还可以对字符串使用starts with或者end with：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> <span class="string">&#x27;Fabien&#x27;</span> starts with <span class="string">&#x27;F&#x27;</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> <span class="string">&#x27;Fabien&#x27;</span> ends with <span class="string">&#x27;n&#x27;</span> %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p><em>对于复杂的字符串比较，matches操作符提供了正则表达式的匹配能力：</em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> phone matches <span class="string">&#x27;/^[\\d\\.]+$/&#x27;</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="包含操作符"><a href="#包含操作符" class="headerlink" title="包含操作符"></a>包含操作符</h4><p>操作符in提供了包含测试功能。</p>
<p>如果右侧操作数包含左侧的操作数，则返回true：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;<span class="comment"># returns true #&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; <span class="number">1</span> in [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; <span class="string">&#x27;cd&#x27;</span> in <span class="string">&#x27;abcde&#x27;</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>还可以反着用（not in）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> <span class="number">1</span> not in [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] %&#125;</span><br><span class="line">&#123;<span class="comment"># 等价于 #&#125;</span></span><br><span class="line">&#123;% <span class="keyword">if</span> not (<span class="number">1</span> in [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试操作符"><a href="#测试操作符" class="headerlink" title="测试操作符"></a>测试操作符</h4><p>is操作符用于测试。可以用于测试一个变量和表达式，右侧的操作数就是测试的名字：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;<span class="comment"># 检测变量是不是奇数 #&#125;</span></span><br><span class="line">&#123;&#123; name is odd &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>测试也可以接受参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> post.status is constant(<span class="string">&#x27;Post::PUBLISHED&#x27;</span>) %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用is not来进行否定测试：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> post.status is not constant(<span class="string">&#x27;Post::PUBLISHED&#x27;</span>) %&#125;</span><br><span class="line">&#123;<span class="comment"># 等价于 #&#125;</span></span><br><span class="line">&#123;% <span class="keyword">if</span> not (post.status is constant(<span class="string">&#x27;Post::PUBLISHED&#x27;</span>)) %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>可以去<a href="http://twig.sensiolabs.org/doc/tests/index.html">test</a>页面来了解一下内置的测试。</p>
<h4 id="其他操作符"><a href="#其他操作符" class="headerlink" title="其他操作符"></a>其他操作符</h4><p>1.12.0中加入了扩展的三元操作符。</p>
<ul>
<li>|：管道符号，应用一个filter</li>
<li>..：以左右两个操作数为基础生成一个序列</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="number">1</span>.<span class="number">.5</span> &#125;&#125;</span><br><span class="line">&#123;<span class="comment"># 等价于 #&#125;</span></span><br><span class="line">&#123;&#123; range(<span class="number">1</span>, <span class="number">5</span>) &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>


- ~：把所有操作数转换为字符串并连接起来。{{ "Hello " ~ name ~ "!" }}会返回(假设name是'John')Hello John!。
- .,[]：获取对象的属性
- ?:：三元操作符



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; foo ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span> &#125;&#125;</span><br><span class="line">&#123;<span class="comment"># 在Twig 1.12.0中 #&#125;</span></span><br><span class="line">&#123;&#123; foo ?: <span class="string">&#x27;no&#x27;</span> &#125;&#125; 等同于 &#123;&#123; foo ? foo : <span class="string">&#x27;no&#x27;</span> &#125;&#125;</span><br><span class="line">&#123;&#123; foo ? <span class="string">&#x27;yes&#x27;</span> &#125;&#125; 等同于 &#123;&#123; foo ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;&#x27;</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h4><p>字符串差值(#{表达式})允许在双引号内的字符串中插入任何有效的表达式。表达式的结果会出现在最终的字符串中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="string">&quot;foo #&#123;bar&#125; baz&quot;</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">&quot;foo #&#123;1 + 2&#125; baz&quot;</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="空白控制"><a href="#空白控制" class="headerlink" title="空白控制"></a>空白控制</h3><p>twig1.1新增tag级别的空白控制</p>
<p>跟PHP类似，模板标记后面的第一个空行会被自动删除。模板引擎目前已经不再自动清理空白，所有空白（空格、制表符、换行符等）都会原样输出。</p>
<p>使用<code>spaceless</code>标记可以移出html标记之间的空白：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% spaceless %&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;strong&gt;foo bar&lt;/strong&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endspaceless %&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># output will be &lt;div&gt;&lt;strong&gt;foo bar&lt;/strong&gt;&lt;/div&gt; #&#125;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>在spaceless标记之外，还可以在每个标记的级别控制空白。在标记上使用空白控制修饰符，可以清除前导或跟随的空白：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% set value = <span class="string">&#x27;no spaces&#x27;</span> %&#125;</span><br><span class="line">&#123;<span class="comment">#- 取出首位空白 -#&#125;</span></span><br><span class="line">&#123;%- <span class="keyword">if</span> <span class="literal">true</span> -%&#125;</span><br><span class="line">    &#123;&#123;- value -&#125;&#125;</span><br><span class="line">&#123;%- <span class="keyword">endif</span> -%&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># 输出 &#x27;no spaces&#x27; #&#125;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>上面的例子演示了缺省的空白控制修饰符，以及如何移除标记周围的空白。还可以只清除Tag一边的空白：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% set value = <span class="string">&#x27;no spaces&#x27;</span> %&#125;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">  &#123;&#123;- value &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&#123;<span class="comment"># 输出 &#x27;&lt;li&gt;no spaces&lt;/li&gt;&#x27; #&#125;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul>
<li><p>Twig的扩展很方便。</p>
</li>
<li><p>如果你要查找新的标记、filter或者函数，可以浏览官方的<a href="http://github.com/twigphp/Twig-extensions">扩展仓库</a>。</p>
</li>
<li><p>如果想要创建自己的扩展，请阅读创建<a href="https://drupal.fleeto.us/translation/extending-twig">扩展章节</a>。</p>
</li>
</ul>
<h2 id="三、开发者的Twig"><a href="#三、开发者的Twig" class="headerlink" title="三、开发者的Twig"></a>三、开发者的Twig</h2><p>本章讲述的是Twig的API，而不是Twig的模板语言。这些内容会对为应用实现模板接口的工作很有帮助，对模板的制作工作就没什么意义了。</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>Twig的中心对象为<strong>environment</strong>（是Twig_Environment类的实例）。这个类的实例用于存储配置和扩展，并用来从文件系统或者其他位置载入模板。</p>
<p>绝大多数应用需要在应用初始化的时候，创建一个Twig_Environment对象，然后用它来加载模板。在有些案例中，会有多个环境同时并存，用来处理不同的配置。</p>
<p>下面举个简单例子，配置Twig来为应用载入模板：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;/path/to/lib/Twig/Autoloader.php&#x27;</span>;</span><br><span class="line">Twig_Autoloader::register();</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> Twig_Loader_Filesystem(<span class="string">&#x27;/path/to/templates&#x27;</span>);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;cache&#x27;</span> =&gt; <span class="string">&#x27;/path/to/compilation_cache&#x27;</span>,</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<p>上面的代码会创建一个缺省设置的环境，然后加载器会去/path/to/templates/目录查找模板。有不同的加载器可以使用，你可以实现自己的加载器用来从数据库或者其他资源中获取模板。</p>
<p><em>注意，environment的第二个参数是一个数组选项。cache选项声明了一个目录，用于存储Twig编译的模版，以减少解析的开销。这种缓存跟你希望在处理模板过程中加入的缓存是不一样的，所以如果需要自行缓存，请使用其他的PHP缓存库。</em></p>
<p>要从环境中调用模版，只需要调用<code>loadTemplate</code>函数，函数会返回一个<code>Twig_Template </code>实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$template</span> = <span class="variable">$twig</span>-&gt;loadTemplate(<span class="string">&#x27;index.html&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>要渲染带有变量的模版，调用<code>render</code>函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="variable">$template</span>-&gt;render(<span class="keyword">array</span>(<span class="string">&#x27;the&#x27;</span> =&gt; <span class="string">&#x27;variables&#x27;</span>, <span class="string">&#x27;go&#x27;</span> =&gt; <span class="string">&#x27;here&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><em><code>display()</code>方法是用于直接输出模版的快捷方法。</em></p>
<p>你还可以一气呵成加载和渲染模版：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="variable">$twig</span>-&gt;render(<span class="string">&#x27;index.html&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;the&#x27;</span> =&gt; <span class="string">&#x27;variables&#x27;</span>, <span class="string">&#x27;go&#x27;</span> =&gt; <span class="string">&#x27;here&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="环境选项"><a href="#环境选项" class="headerlink" title="环境选项"></a>环境选项</h3><p>当创建一个新的Twig_Environment实例时，可以创建一个选项数组，作为构造函数的第二个参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>, <span class="keyword">array</span>(<span class="string">&#x27;debug&#x27;</span> =&gt; <span class="literal">true</span>));</span><br></pre></td></tr></table></figure>

<p>可用的环境选项：</p>
<ul>
<li>debug：布尔值，设置为true的时候，生成的模版会带有一个<code> __toString()</code>方法，这个方法可以用来显示生成的Node（默认值false）</li>
<li>charset：模版的字符集，默认是utf-8</li>
<li>base_template_class：生成模版时使用的基本模版类，默认Twig_Template</li>
<li>cache：用于存储缓存的绝对路径名，或者false用于禁用缓存（默认是false）</li>
<li>auto_reload：布尔值，当用Twig开发时，源代码有修改时就重新编译对于开发者来说是非常必要的。如果不提供一个auto_reload选项，他会从debug选项中取值。</li>
<li>strict_variables：布尔值，如果设置为false，Twig会忽略无效的变量（无效指的是不存在的变量或者属性/方法），并将其替换为null。如果这个选项设置为true，那么遇到这种情况的时候，Twig会抛出异常。默认值是false</li>
<li>autoescape：字符串或者布尔值，如果设置为true，HTML的自动转义会默认对所有的模版起效，默认值是true。在Twig 1.8中，可以设置转义策略（html或者js，要关闭可以设置为false）。在Twig 1.9中的转义策略，可以设置为css，url，html_attr，甚至还可以设置为PHP回调函数，该函数需要接受一个模板文件名为参数，且必须返回要使用的转义策略，回调命名应该避免同内置的转义策略冲突。</li>
<li>optimizations：整型值，一个标记，用于决定采用哪种优化方式（默认是-1，激活所有的优化方式；设置0的话将会禁用）</li>
</ul>
<h3 id="加载器"><a href="#加载器" class="headerlink" title="加载器"></a>加载器</h3><p>加载器负责从文件系统等资源中加载模版</p>
<h4 id="编译缓存"><a href="#编译缓存" class="headerlink" title="编译缓存"></a>编译缓存</h4><p>所有的模版加载器都会在文件系统中缓存编译的模版，已被将来调用。由于模版只编译一次，所以大大地提升了Twig的速度，如果你还使用了PHP加速器，例如APC，性能的提升将会更加的明显。参考上文提到的<code>Twig_Environment</code>中的<code>cache</code>以及<code>auto_reload</code>选项能够获得更多信息。</p>
<h4 id="内置加载器"><a href="#内置加载器" class="headerlink" title="内置加载器"></a>内置加载器</h4><p>这里有一个Twig提供的内置加载列表：</p>
<ul>
<li><p>Twig_Loader_Filesystem</p>
<p>1.10新增prependPath()以及命名空间支持</p>
</li>
<li><p>Twig_Loader_Filesystem</p>
<p>从文件系统中加载模版。这个加载器可以在文件系统的目录中找到模版，也是推荐使用的加载器：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> Twig_Loader_Filesystem(<span class="variable">$templateDir</span>);</span><br></pre></td></tr></table></figure>

<p>它还可以从目录数组中查找模版：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> Twig_Loader_Filesystem(<span class="keyword">array</span>(<span class="variable">$templateDir1</span>, <span class="variable">$templateDir2</span>));</span><br></pre></td></tr></table></figure>

<p>在这种配置下，Twig会首先在$templateDir1目录下查找模版，如果没有找到，再继续从templateDir2目录下查找。</p>
<p>你可以通过<code>addPath()</code>和<code>prependPath()</code>方法添加或者追加路径</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$loader</span>-&gt;addPath(<span class="variable">$templateDir3</span>);</span><br><span class="line"><span class="variable">$loader</span>-&gt;prependPath(<span class="variable">$templateDir4</span>);</span><br></pre></td></tr></table></figure>

<p>filesystem加载器还支持命名空间模版。这一特性将允许用户把模版放在不同的带有命名空间的目录下。</p>
<p>当使用<code>setPaths()</code>、<code>addPath()</code>以及<code>prependPath()</code>方法时，把命名空间作为第二个参数进行传递（如果没有传递，缺省命名空间为”main”）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$loader</span>-&gt;addPath(<span class="variable">$templateDir</span>, <span class="string">&#x27;admin&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>命名空间模版可以通过类似于<code>@namespace_name/template_path</code>的注解形式来访问。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span>-&gt;render(<span class="string">&#x27;@admin/index.html&#x27;</span>, <span class="keyword">array</span>());</span><br></pre></td></tr></table></figure></li>
<li><p>Twig_Loader_Array</p>
<p>Twig_Loader_Array从PHP数组中加载模版</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> Twig_Loader_Array(<span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;index.html&#x27;</span> =&gt; <span class="string">&#x27;Hello &#123;&#123; name &#125;&#125;!&#x27;</span>,));</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$twig</span>-&gt;render(<span class="string">&#x27;index.html&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Fabien&#x27;</span>));</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>这个加载器对于单元测试非常有用。这个加载器适合于那些需要把所有的模版都存在在一个单独php文件的小型项目中。</p>
</li>
<li><p>Twig_Loader_Chain</p>
<p>Twig_Loader_Chain委托其它加载器加在模版</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="variable">$loader1</span> = <span class="keyword">new</span> Twig_Loader_Array(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;base.html&#x27;</span> =&gt; <span class="string">&#x27;&#123;% block content %&#125;&#123;% endblock %&#125;&#x27;</span>,</span><br><span class="line">));</span><br><span class="line"><span class="variable">$loader2</span> = <span class="keyword">new</span> Twig_Loader_Array(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;index.html&#x27;</span> =&gt; <span class="string">&#x27;&#123;% extends &quot;base.html&quot; %&#125;&#123;% block content %&#125;Hello &#123;&#123; name &#125;&#125;&#123;% endblock %&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;base.html&#x27;</span>  =&gt; <span class="string">&#x27;Will never be loaded&#x27;</span>,</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> Twig_Loader_Chain(<span class="keyword">array</span>(<span class="variable">$loader1</span>, <span class="variable">$loader2</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>当搜索模版的时候，Twig会依次尝试每一个加载器，一旦找到匹配模版，立即返回。当渲染上述例子中的index.html模版时，Twig会在$loader2中加载它，但是对于base.html模版，Twig会从$loader1中加载。</p>
<p>Twig_Loader_Chain接受任何实现了Twig_LoaderInterface接口的加载器</p>
<p><em>你还可以通过addLoader()方法添加加载器</em></p>
</li>
</ul>
<h4 id="创建自己的加载器"><a href="#创建自己的加载器" class="headerlink" title="创建自己的加载器"></a>创建自己的加载器</h4><p>实现了Twig_LoaderInterface接口的加载器：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Twig_LoaderInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Gets the source code of a template, given its name.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  string $name string The name of the template to load</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string The template source code</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSource</span>(<span class="params"><span class="variable">$name</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Gets the cache key to use for the cache for a given template name.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  string $name string The name of the template to load</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string The cache key</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span>(<span class="params"><span class="variable">$name</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns true if the template is still fresh.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string    $name The template name</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> timestamp $time The last modification time of the cached template</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isFresh</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$time</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果当前的缓存模版还是最新的，isFresh()方法必须返回true，否则应该返回最后一次的修改时间，或者直接false</p>
<p><em>Twig 1.11.0，还可以实现Twig_ExistsLoaderInterface接口，让加载器在同链式加载器协同工作时稍快一些。</em></p>
<h3 id="使用扩展"><a href="#使用扩展" class="headerlink" title="使用扩展"></a>使用扩展</h3><p>Twig扩展是打包起来的一些新功能。使用扩展很简单，调用addExtension()方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span>-&gt;addExtension(<span class="keyword">new</span> Twig_Extension_Sandbox());</span><br></pre></td></tr></table></figure>

<p>Twig自带了以下扩展：</p>
<ul>
<li><p>Twig_Extension_Core：定义了Twig的所有核心特性</p>
</li>
<li><p>Twig_Extension_Escaper：添加自动输出转义，以及代码库可能需要的转义或者反转义</p>
</li>
<li><p>Twig_Extension_Sandbox：为Twig环境添加一个默认的沙盒模式，使不信任的可以安全的运行</p>
</li>
<li><p>Twig_Extension_Profiler：启用内置的Twig profiler</p>
</li>
<li><p>Twig_Extension_Optimizer：编译前优化节点树</p>
</li>
</ul>
<p>核心、转义、以及优化扩展不需要添加到Twig环境中，他们默认就是启用的</p>
<h3 id="内置扩展"><a href="#内置扩展" class="headerlink" title="内置扩展"></a>内置扩展</h3><p>这块儿将会描述内置扩展带来的新特性</p>
<h4 id="核心扩展"><a href="#核心扩展" class="headerlink" title="核心扩展"></a>核心扩展</h4><p>core扩展定义了Twig的所有核心特性：</p>
<ul>
<li><p><a href="http://twig.sensiolabs.org/doc/tags/index.html">Tags</a></p>
</li>
<li><p><a href="http://twig.sensiolabs.org/doc/filters/index.html">Filters</a></p>
</li>
<li><p><a href="http://twig.sensiolabs.org/doc/functions/index.html">Functions</a></p>
</li>
<li><p><a href="http://twig.sensiolabs.org/doc/tests/index.html">Tests</a></p>
</li>
</ul>
<h4 id="转义扩展"><a href="#转义扩展" class="headerlink" title="转义扩展"></a>转义扩展</h4><p>escaper扩展为Twig带来了自动输出转义，它定义了autoescape标记，raw filter。</p>
<p>自行创建escaper扩展时，你可以打开或者关闭全局的转义策略：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$escaper</span> = <span class="keyword">new</span> Twig_Extension_Escaper(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line"><span class="variable">$twig</span>-&gt;addExtension(<span class="variable">$escaper</span>);</span><br></pre></td></tr></table></figure>

<p>如果设置成html，模版中所有的变量都会转义，除了那些raw filter输出的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; article.to_html|raw &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>通过使用autoescape标记，你可以改变转移模式（参考<a href="http://twig.sensiolabs.org/doc/tags/autoescape.html">autoescape文档</a>）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% autoescape <span class="string">&#x27;html&#x27;</span> %&#125;</span><br><span class="line">&#123;&#123; <span class="keyword">var</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="keyword">var</span>|raw &#125;&#125;      &#123;<span class="comment"># var 不会被转义 #&#125;</span></span><br><span class="line">&#123;&#123; <span class="keyword">var</span>|escape &#125;&#125;   &#123;<span class="comment"># var 不会被再次转义 #&#125;</span></span><br><span class="line">&#123;% endautoescape %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p><em>autoescape标记对包含进来的模版无效</em></p>
<p>转义规则是这样实现的：</p>
<ul>
<li>模板中的常量（整数、布尔、数组…）会直接当做变量或filter的参数，不会被自动转义：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="string">&quot;Twig&lt;br /&gt;&quot;</span> &#125;&#125; &#123;<span class="comment"># won&#x27;t be escaped #&#125;</span></span><br><span class="line">&#123;% set text = <span class="string">&quot;Twig&lt;br /&gt;&quot;</span> %&#125;</span><br><span class="line">&#123;&#123; text &#125;&#125; &#123;<span class="comment"># will be escaped #&#125;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对于一个结果是常量的表达式，或者一个标记为安全的变量也不会自动转义：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; foo ? <span class="string">&quot;Twig&lt;br /&gt;&quot;</span> : <span class="string">&quot;&lt;br /&gt;Twig&quot;</span> &#125;&#125; &#123;<span class="comment"># won&#x27;t be escaped #&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% set text = <span class="string">&quot;Twig&lt;br /&gt;&quot;</span> %&#125;</span><br><span class="line">&#123;&#123; foo ? text : <span class="string">&quot;&lt;br /&gt;Twig&quot;</span> &#125;&#125; &#123;<span class="comment"># will be escaped #&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% set text = <span class="string">&quot;Twig&lt;br /&gt;&quot;</span> %&#125;</span><br><span class="line">&#123;&#123; foo ? text|raw : <span class="string">&quot;&lt;br /&gt;Twig&quot;</span> &#125;&#125; &#123;<span class="comment"># won&#x27;t be escaped #&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% set text = <span class="string">&quot;Twig&lt;br /&gt;&quot;</span> %&#125;</span><br><span class="line">&#123;&#123; foo ? text|escape : <span class="string">&quot;&lt;br /&gt;Twig&quot;</span> &#125;&#125; &#123;<span class="comment"># the result of the expression won&#x27;t be escaped #&#125;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>转义发生在打印之前，filter之后：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="keyword">var</span>|upper &#125;&#125; &#123;<span class="comment"># 等价于 &#123;&#123; var|upper|escape &#125;&#125; #&#125;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>raw filter应该在filter链的最后使用：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="keyword">var</span>|raw|upper &#125;&#125; &#123;<span class="comment"># 会转义 #&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; <span class="keyword">var</span>|upper|raw &#125;&#125; &#123;<span class="comment"># 不转义 #&#125;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果最后一个filter在当前上下文中（例如html或者js）被标记为安全，escape和escape(‘html’)被HTML标记为安全，escape(‘js’)被JavaScript标记为安全，raw对所有内容都被标记为安全。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% autoescape <span class="string">&#x27;js&#x27;</span> %&#125;</span><br><span class="line">  &#123;&#123; <span class="keyword">var</span>|escape(<span class="string">&#x27;html&#x27;</span>) &#125;&#125; &#123;<span class="comment"># will be escaped for HTML and JavaScript #&#125;</span></span><br><span class="line">  &#123;&#123; <span class="keyword">var</span> &#125;&#125; &#123;<span class="comment"># will be escaped for JavaScript #&#125;</span></span><br><span class="line">  &#123;&#123; <span class="keyword">var</span>|escape(<span class="string">&#x27;js&#x27;</span>) &#125;&#125; &#123;<span class="comment"># won&#x27;t be double-escaped #&#125;</span></span><br><span class="line">&#123;% endautoescape %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>


*注意自动转义是是在表达式运行之后发生，因此有局限性的。例如当进行连续操作时，{{ foo|raw ~ bar }}因为转义是最后发生的，因此无法给出期待的结果（这里的raw filter没有任何效果）。*


<h4 id="沙盒扩展"><a href="#沙盒扩展" class="headerlink" title="沙盒扩展"></a>沙盒扩展</h4><p>沙箱扩展用于运行不受信任的代码,会限制访问不安全的属性和方法。沙箱安全性由一个策略实例来管理。缺省情况下，Twig会带有一个策略类：Twig_Sandbox_SecurityPolicy。这个类允许把某些标记、Filter、属性以及方法放入白名单：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tags</span> = <span class="keyword">array</span>(<span class="string">&#x27;if&#x27;</span>);</span><br><span class="line"><span class="variable">$filters</span> = <span class="keyword">array</span>(<span class="string">&#x27;upper&#x27;</span>);</span><br><span class="line"><span class="variable">$methods</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;Article&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;getTitle&#x27;</span>, <span class="string">&#x27;getBody&#x27;</span>),</span><br><span class="line">);</span><br><span class="line"><span class="variable">$properties</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;Article&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;body&#x27;</span>),</span><br><span class="line">);</span><br><span class="line"><span class="variable">$functions</span> = <span class="keyword">array</span>(<span class="string">&#x27;range&#x27;</span>);</span><br><span class="line"><span class="variable">$policy</span> = <span class="keyword">new</span> Twig_Sandbox_SecurityPolicy(<span class="variable">$tags</span>, <span class="variable">$filters</span>, <span class="variable">$methods</span>, <span class="variable">$properties</span>, <span class="variable">$functions</span>);</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，安全策略只允许使用if标签和upper过滤器。另外，模版只能调用<code>Article</code>对象的<code>getTitle()</code>方法和<code>getBody()</code>方法，只能访问<code>title</code>和<code>body</code>这俩个公共属性。其它的都被禁止访问，如果尝试访问，则会抛出一个<code>Twig_Sandbox_SecurityError</code>异常。</p>
<p>策略对象是沙盒构造器的第一个参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sandbox</span> = <span class="keyword">new</span> Twig_Extension_Sandbox(<span class="variable">$policy</span>);</span><br><span class="line"><span class="variable">$twig</span>-&gt;addExtension(<span class="variable">$sandbox</span>);</span><br></pre></td></tr></table></figure>

<p>默认情况下，沙盒模式处于禁用状态。当包含的模版中含有不可信的代码时，使用<code>sandbox</code>标签激活沙盒模式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% sandbox %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">&#x27;user.html&#x27;</span> %&#125;</span><br><span class="line">&#123;% endsandbox %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>你可以通过将扩展构造器的第二个参数传值true来对所有的模版启用沙盒模式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sandbox</span> = <span class="keyword">new</span> Twig_Extension_Sandbox(<span class="variable">$policy</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h4 id="简介扩展"><a href="#简介扩展" class="headerlink" title="简介扩展"></a>简介扩展</h4><p>Twig1.18新增简介扩展</p>
<p>profiler扩展为Twig模版开启一个profiler，它应该只在开发机器上使用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$profile</span> = <span class="keyword">new</span> Twig_Profiler_Profile();</span><br><span class="line"><span class="variable">$twig</span>-&gt;addExtension(<span class="keyword">new</span> Twig_Extension_Profiler(<span class="variable">$profile</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$dumper</span> = <span class="keyword">new</span> Twig_Profiler_Dumper_Text();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dumper</span>-&gt;dump(<span class="variable">$profile</span>);</span><br></pre></td></tr></table></figure>

<p>一个profile包含了模版，块以及宏扩展的耗时和内存消耗信息。</p>
<p>你还可以以<a href="https://blackfire.io/">blackfire.io</a>兼容格式dump这些数据。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$dumper</span> = <span class="keyword">new</span> Twig_Profiler_Dumper_Blackfire();</span><br><span class="line">file_put_contents(<span class="string">&#x27;/path/to/profile.prof&#x27;</span>, <span class="variable">$dumper</span>-&gt;dump(<span class="variable">$profile</span>));</span><br></pre></td></tr></table></figure>

<p>上传并显示它(先创建个<a href="https://blackfire.io/signup">免费帐号</a>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blackfire --slot=7 upload /path/to/profile.prof</span><br></pre></td></tr></table></figure>

<h4 id="优化扩展"><a href="#优化扩展" class="headerlink" title="优化扩展"></a>优化扩展</h4><p>optimizer扩展会在编译模板之前对节点树进行优化：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span>-&gt;addExtension(<span class="keyword">new</span> Twig_Extension_Optimizer());</span><br></pre></td></tr></table></figure>

<p>默认情况下，所有的优化都是启用的。你也可以在构造器中传递您需要激活的扩展。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$optimizer</span> = <span class="keyword">new</span> Twig_Extension_Optimizer(Twig_NodeVisitor_Optimizer::OPTIMIZE_FOR);</span><br><span class="line"></span><br><span class="line"><span class="variable">$twig</span>-&gt;addExtension(<span class="variable">$optimizer</span>);</span><br></pre></td></tr></table></figure>

<p>Twig支持下列优化：</p>
<ul>
<li>Twig_NodeVisitor_Optimizer：OPTIMIZE_ALL  默认值，启用所有优化</li>
<li>Twig_NodeVisitor_Optimizer：OPTIMIZE_NONE  禁用所有的优化，这回减少编译时间，但是会增加执行时间和内存消耗。</li>
<li>Twig_NodeVisitor_Optimizer::OPTIMIZE_FOR  尽可能减少loop变量的创建，以提高for标记的效率。</li>
<li>Twig_NodeVisitor_Optimizer::OPTIMIZE_RAW_FILTER  尽可能移出raw filter</li>
<li>Twig_NodeVisitor_Optimizer::OPTIMIZE_VAR_ACCESS  尽可能的简化编译模版中变量的创建和访问</li>
</ul>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>Twig能抛出的异常：</p>
<ul>
<li>Twig_Error：所有异常</li>
<li>Twig_Error_Syntax：语法错误</li>
<li>Twig_Error_Runtime：运行时错误（当前实例中不包含某个filter）</li>
<li>Twig_Error_Loader：模板载入时的异常</li>
<li>Twig_Sandbox_SecurityError: 沙盒模式下出现了不允许使用的标记，filter或者调用了不允许调用的方法抛出的异常</li>
</ul>
<h2 id="扩展Twig"><a href="#扩展Twig" class="headerlink" title="扩展Twig"></a>扩展Twig</h2><p><em>本章描述了如何对Twig 1.12进行扩展。如果你在使用一个旧版本，请移步到<a href="http://twig.sensiolabs.org/doc/advanced_legacy.html">过往文档</a>继续阅读。</em></p>
<p>有多重扩展Twig的方法，可以加入额外的标记、Filter、Test、操作符、全局变量以及函数，甚至还能利用Node visitors对解析器本身进行扩展。</p>
<p><em>本文的第一章节会介绍如何简单地扩展Twig。如果你想要在不同项目中进行复用，或者共享给他人使用，你应该按照接下来章节描述的那样创建一个扩展。</em></p>
<p>在开始之前，你必须理解不同扩展点的区别及其应用场景。</p>
<p>首先，你需要记住的是，Twig有两个主要的语法结构：</p>

- {{}}：用来输出一个表达式的结果
- {%%}：用来执行语句


<p>要理解为什么Twig提供这么多扩展点，先让我们看一下如何实现一个<code>Lorem ipsum</code>生成器。</p>
<p>你可以使用一个名为<code>lipsum</code>的标记：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% lipsum <span class="number">40</span> %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>这样的确可以起到效果，但是，使用<code>lipsum</code>标记的确不是一个好主意，因为：</p>
<ul>
<li>lipsum不是一个语言结构</li>
<li>这个标记输出了东西</li>
<li>这个标记不够灵活，不能在表达式中复用</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="string">&#x27;some text&#x27;</span> ~ &#123;% lipsum <span class="number">40</span> %&#125; ~ <span class="string">&#x27;some more text&#x27;</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>事实上，你很少会使用标记；不过这也是个好消息——Tag的扩展是Twig扩展方式中最复杂的一种。</p>
<p>接下来，我们来试试filter的方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="number">40</span>|lipsum &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>再一次，它达到了效果，但是却看上去很古怪。filter用来把输入转换成输出，但是这里我们输入了的值是用于指示生成单词的数量——也就是说，40是一个参数，但不是我们转换的目标。</p>
<p>接下来，我们使用<code>lipsum</code>函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; lipsum(<span class="number">40</span>) &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们也成功了。对于这个例子来说，这个扩展点的选择是合适的。现在可以在任何接受表达式的地方使用它了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="string">&#x27;some text&#x27;</span> ~ lipsum(<span class="number">40</span>) ~ <span class="string">&#x27;some more text&#x27;</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% set lipsum = lipsum(<span class="number">40</span>) %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>最后，还可以使用带有方法的全局对象来生成这些文字：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; text.lipsum(<span class="number">40</span>) &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="全局变量-1"><a href="#全局变量-1" class="headerlink" title="全局变量"></a>全局变量</h3><p>全局变量和其它的模版变量类似，只不过全局变量在所有的模版和宏定义中都有效：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line"><span class="variable">$twig</span>-&gt;addGlobal(<span class="string">&#x27;text&#x27;</span>, <span class="keyword">new</span> Text());</span><br></pre></td></tr></table></figure>

<p>接下来你就可以在任何地方使用<code>text</code>变量了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; text.lipsum(<span class="number">40</span>) &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Filters-1"><a href="#Filters-1" class="headerlink" title="Filters"></a>Filters</h3><p>创建一个filter就是简单的给一个PHP回调一个名字：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;rot13&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_rot13(<span class="variable">$string</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者一个简单的php函数</span></span><br><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;rot13&#x27;</span>, <span class="string">&#x27;str_rot13&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者一个类的方法</span></span><br><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;rot13&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;SomeClass&#x27;</span>, <span class="string">&#x27;rot13Filter&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>传递给<code>Twig_SimpleFilter</code>构造器的第一个参数是将要在模版中使用的filter的名字，第二个参数是关于这个参数的php回调函数。</p>
<p>接下来，将filter加入到你的Twig环境中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line"><span class="variable">$twig</span>-&gt;addFilter(<span class="variable">$filter</span>);</span><br></pre></td></tr></table></figure>

<p>然后就可以在模版中使用了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="string">&#x27;Twig&#x27;</span>|rot13 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># 输出： Gjvt #&#125;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>当Twig调用的时候，会把管道符左边的值作为第一个参数，并把括号中的Filter参数作为附加参数传递给回调。</p>
<p>例如，下面的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="string">&#x27;TWIG&#x27;</span>|lower &#125;&#125;</span><br><span class="line">&#123;&#123; now|date(<span class="string">&#x27;d/m/Y&#x27;</span>) &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>会被编译成下面这个样子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> strtolower(<span class="string">&#x27;TWIG&#x27;</span>) <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> twig_date_format_filter(<span class="variable">$now</span>, <span class="string">&#x27;d/m/Y&#x27;</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>Twig_SimpleFilter</code>类将选项数组作为它的最后一个参数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;rot13&#x27;</span>, <span class="string">&#x27;str_rot13&#x27;</span>, <span class="variable">$options</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Filter环境感知"><a href="#Filter环境感知" class="headerlink" title="Filter环境感知"></a>Filter环境感知</h4><p>如果要在filter中访问当前的environment实例，需要在option中设置needs_environment为true；这样Twig就会把当前环境作为第一个参数传给filter：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;rot13&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Twig_Environment <span class="variable">$env</span>, <span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前实例的字符集</span></span><br><span class="line">    <span class="variable">$charset</span> = <span class="variable">$env</span>-&gt;getCharset();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_rot13(<span class="variable">$string</span>);</span><br><span class="line">&#125;, <span class="keyword">array</span>(<span class="string">&#x27;needs_environment&#x27;</span> =&gt; <span class="literal">true</span>));</span><br></pre></td></tr></table></figure>

<h4 id="Filter上下文感知"><a href="#Filter上下文感知" class="headerlink" title="Filter上下文感知"></a>Filter上下文感知</h4><p>在Twig中访问上下文，则需要在option中设置needs_context为true，Twig就会吧当前上下文作为第一个参数（如果还设置了needs_environment为true，那么就会是第二个参数）进行传递：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;rot13&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$context</span>, <span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;, <span class="keyword">array</span>(<span class="string">&#x27;needs_context&#x27;</span> =&gt; <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;rot13&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Twig_Environment <span class="variable">$env</span>, <span class="variable">$context</span>, <span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;, <span class="keyword">array</span>(<span class="string">&#x27;needs_context&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;needs_environment&#x27;</span> =&gt; <span class="literal">true</span>));</span><br></pre></td></tr></table></figure>

<h4 id="自动转义-1"><a href="#自动转义-1" class="headerlink" title="自动转义"></a>自动转义</h4><p>如果启用了自动转义，filter的输出会在打印之前被转义。如果你的filter就是作为一个转义器（或者显式的输出HTML以及JavaScript代码），那么就需要输出原文。这种情况下，可以使用is_safe选项：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;nl2br&#x27;</span>, <span class="string">&#x27;nl2br&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;is_safe&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;html&#x27;</span>)));</span><br></pre></td></tr></table></figure>

<h4 id="参数可变的Filters"><a href="#参数可变的Filters" class="headerlink" title="参数可变的Filters"></a>参数可变的Filters</h4><p>Twig1.19中新增可变参数filters</p>
<p>当需要一个filter接收的参数个数可变时，设置<code>is_variadic</code>选项为true；Twig会把余下的参数作为一个数组传递给filter的最后一个参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;thumbnail&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$file</span>, <span class="keyword">array</span> <span class="variable">$options</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;, <span class="keyword">array</span>(<span class="string">&#x27;is_variadic&#x27;</span> =&gt; <span class="literal">true</span>));</span><br></pre></td></tr></table></figure>

<h4 id="动态Filters"><a href="#动态Filters" class="headerlink" title="动态Filters"></a>动态Filters</h4><p>名字中带有特殊字符”*“的filter就是一个动态filter：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;*_path&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面定义的动态filter将会匹配下述列表：</p>
<ul>
<li>product_path</li>
<li>category_path</li>
</ul>
<p>动态Filter能够定义一个或者多个通配符部分：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filter</span> = <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;*_path_*&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$name</span>, <span class="variable">$suffix</span>, <span class="variable">$arguments</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这个Filter能够接受所有的动态值，并摆放在（环境和上下文之后）其他参数之前。例如，对’foo’|a_path_b()的调用，会传递这些参数：(‘a’, ‘b’, ‘foo’)。</p>
<h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><p>函数的定义类似于filter，但是你需要创建一个<code>Twig_SimpleFunction</code>的实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line"><span class="variable">$function</span> = <span class="keyword">new</span> Twig_SimpleFunction(<span class="string">&#x27;function_name&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$twig</span>-&gt;addFunction(<span class="variable">$function</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h3><p>Tests的定义和filter和函数的定义方法相同，你只需要创建一个<code>Twig_SimpleTest</code>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> Twig_SimpleTest(<span class="string">&#x27;test_name&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$twig</span>-&gt;addTest(<span class="variable">$test</span>);</span><br></pre></td></tr></table></figure>

<p>Tests允许创建自定义的带有逻辑处理的应用来处理布尔值的条件判断。举个简单的例子，创建一个Twig test来检测对象是否是‘red’：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> Twig_SimpleTest(<span class="string">&#x27;red&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$value</span>-&gt;color) &amp;&amp; <span class="variable">$value</span>-&gt;color == <span class="string">&#x27;red&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$value</span>-&gt;paint) &amp;&amp; <span class="variable">$value</span>-&gt;paint == <span class="string">&#x27;red&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$twig</span>-&gt;addTest(<span class="variable">$test</span>);</span><br></pre></td></tr></table></figure>

<p>Test函数只返回true/false。</p>
<p>当创建Test的时候，可以使用node_class选项来提供自定义的测试编制。如果你的test可以编译成PHP原语，这个办法就很有用了，这个办法在很多Twig的内置Test中使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> Twig_SimpleTest(</span><br><span class="line">    <span class="string">&#x27;odd&#x27;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">&#x27;node_class&#x27;</span> =&gt; <span class="string">&#x27;Twig_Node_Expression_Test_Odd&#x27;</span>));</span><br><span class="line"><span class="variable">$twig</span>-&gt;addTest(<span class="variable">$test</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Twig_Node_Expression_Test_Odd</span> <span class="keyword">extends</span> <span class="title">Twig_Node_Expression_Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">Twig_Compiler <span class="variable">$compiler</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable">$compiler</span></span><br><span class="line">      -&gt;raw(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">      -&gt;subcompile(<span class="keyword">$this</span>-&gt;getNode(<span class="string">&#x27;node&#x27;</span>))</span><br><span class="line">      -&gt;raw(<span class="string">&#x27; % 2 == 1&#x27;</span>)</span><br><span class="line">      -&gt;raw(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><p>Twig最令人激动的特性就是可以定义新的语言结构。这也是你需要理解的关于Twig最复杂的关于如何工作的特性。</p>
<p>让我们创建一个简单的set标记，这个标记用来在模板中定义一个简单变量，这个标记的用法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% set name = <span class="string">&quot;value&quot;</span> %&#125;</span><br><span class="line">&#123;&#123; name &#125;&#125;</span><br><span class="line">&#123;<span class="comment"># 输出 value #&#125;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>三个步骤即可定义一个新的标记：</p>
<ul>
<li>定义一个Token解析器（用来解析模板代码）</li>
<li>定义一个节点类(用于把解析的结果转换成PHP)</li>
<li>注册这个标记</li>
</ul>
<h4 id="注册一个新的标记"><a href="#注册一个新的标记" class="headerlink" title="注册一个新的标记"></a>注册一个新的标记</h4><p>简单的调用<code>Twig_Environment</code>实例的<code>addTokenParser</code>方法即可添加一个标记：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line"><span class="variable">$twig</span>-&gt;addTokenParser(<span class="keyword">new</span> Project_Set_TokenParser());</span><br></pre></td></tr></table></figure>

<h4 id="定义一个token解析器"><a href="#定义一个token解析器" class="headerlink" title="定义一个token解析器"></a>定义一个token解析器</h4><p>来看下代码实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project_Set_TokenParser</span> <span class="keyword">extends</span> <span class="title">Twig_TokenParser</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">Twig_Token <span class="variable">$token</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable">$parser</span> = <span class="keyword">$this</span>-&gt;parser;</span><br><span class="line">    <span class="variable">$stream</span> = <span class="variable">$parser</span>-&gt;getStream();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$stream</span>-&gt;expect(Twig_Token::NAME_TYPE)-&gt;getValue();</span><br><span class="line">    <span class="variable">$stream</span>-&gt;expect(Twig_Token::OPERATOR_TYPE, <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    <span class="variable">$value</span> = <span class="variable">$parser</span>-&gt;getExpressionParser()-&gt;parseExpression();</span><br><span class="line">    <span class="variable">$stream</span>-&gt;expect(Twig_Token::BLOCK_END_TYPE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Project_Set_Node(<span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$token</span>-&gt;getLine(), <span class="keyword">$this</span>-&gt;getTag());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;set&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getTag()</code>方法必须返回我们要解析的标记，这里返回的就是<code>set</code>.</p>
<p><code>parse()</code>方法在解析器遇到<code>set</code>标记的时候就会被调用。这个方法应该返回一个<code>Twig_Node</code>实例用于显示这个结点。</p>
<p>Token流（$this-&gt;parser-&gt;getStream()）提供了一系列方法，简化了解析过程：</p>
<ul>
<li>getCurrent()：从流中获取当前的token</li>
<li>next()：移动到流中的下一个Token，并返回之前的一个</li>
<li>test($type), test($value）或者test($type, $value)：判断当前token是不是某种类型或值（或同时满足）。值可以是一个包含很多值的数组。</li>
<li>expect($type[, $value[, $message]])：如果当前token不是指定的类型或值，就给出一个语法错误。否则，如果值和类型都正确，则返回当前token，并移动到下一个Token。</li>
<li>look()：查看但不使用下一个token</li>
</ul>
<p>像set标记这样，通过调用<code>parseExpression()</code>完成对表达式的解析。</p>
<h4 id="定义一个节点"><a href="#定义一个节点" class="headerlink" title="定义一个节点"></a>定义一个节点</h4><p>Project_Set_Node类很简单：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project_Set_Node</span> <span class="keyword">extends</span> <span class="title">Twig_Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, Twig_Node_Expression <span class="variable">$value</span>, <span class="variable">$line</span>, <span class="variable">$tag</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::__construct(<span class="keyword">array</span>(<span class="string">&#x27;value&#x27;</span> =&gt; <span class="variable">$value</span>), <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$name</span>), <span class="variable">$line</span>, <span class="variable">$tag</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">Twig_Compiler <span class="variable">$compiler</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable">$compiler</span></span><br><span class="line">        -&gt;addDebugInfo(<span class="keyword">$this</span>)</span><br><span class="line">        -&gt;write(<span class="string">&#x27;$context[\&#x27;&#x27;</span>.<span class="keyword">$this</span>-&gt;getAttribute(<span class="string">&#x27;name&#x27;</span>).<span class="string">&#x27;\&#x27;] = &#x27;</span>)</span><br><span class="line">        -&gt;subcompile(<span class="keyword">$this</span>-&gt;getNode(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">        -&gt;raw(<span class="string">&quot;;\n&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译器实现了一套接口和方法用于帮助开发者生成美观易读的PHP代码：</p>
<ul>
<li>subcompile()：编译一个结点</li>
<li>raw()：原文输出字符串</li>
<li>write()：输出首行缩进的字符串</li>
<li>string()：输出引用字符</li>
<li>repr()：输出php结果值</li>
<li>addDebugInfo()：把与当前节点相关的原始模板文件当作注释添加进来</li>
<li>indent()：缩进生成的代码</li>
<li>outdent()：伸出生成的代码</li>
</ul>
<h3 id="创建一个扩展"><a href="#创建一个扩展" class="headerlink" title="创建一个扩展"></a>创建一个扩展</h3><p>开发扩展的一个主要目的可能就是为了将经常使用的功能规范称一个可复用的类，比如说，国际化支持。一个扩展可以指定标记、Filter、Test、运算符、全局变量、函数以及Node visitors。</p>
<p>扩展还可以分离编译时和运行时的代码，加快代码的运行速度。</p>
<p>大多数时候，创建一个单独的包含所有标记和filters的扩展将对你的项目很有用。</p>
<p>一个扩展就是一个实现了下面这个接口的类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Twig_ExtensionInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Initializes the runtime environment.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * This is where you can load some file that contains filter functions for instance.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> Twig_Environment $environment The current Twig_Environment instance</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@deprecated</span> since 1.23 (to be removed in 2.0), implement Twig_Extension_InitRuntimeInterace instead</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">initRuntime</span>(<span class="params">Twig_Environment <span class="variable">$environment</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the token parser instances to add to the existing list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> array An array of Twig_TokenParserInterface or Twig_TokenParserBrokerInterface instances</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTokenParsers</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the node visitor instances to add to the existing list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> array An array of Twig_NodeVisitorInterface instances</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getNodeVisitors</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a list of filters to add to the existing list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> array An array of filters</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFilters</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a list of tests to add to the existing list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> array An array of tests</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTests</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a list of functions to add to the existing list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> array An array of functions</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFunctions</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a list of operators to add to the existing list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> array An array of operators</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getOperators</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a list of global variables to add to the existing list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> array An array of global variables</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@deprecated</span> since 1.23 (to be removed in 2.0), implement Twig_Extension_GlobalsInterface instead</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getGlobals</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the name of the extension.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string The extension name</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了保持扩展类的整洁与稳定，还可以只继承内置的<code>Twig_Extension</code>类而不需要实现所有的接口。采用这种该方式的话，你只需要实现<code>getName()</code>方法。</p>
<p><code>getName()</code>方法必须返回这个扩展的唯一标识符</p>
<p>现在我们来是一个最简单的扩展：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project_Twig_Extension</span> <span class="keyword">extends</span> <span class="title">Twig_Extension</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;project&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Twig不关心你的扩展存在何处，因为所有的扩展都需要显示的注册。通过调用<code>Environment</code>对象的<code>addExtension()</code>方法即可注册一个扩展。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> Twig_Environment(<span class="variable">$loader</span>);</span><br><span class="line"><span class="variable">$twig</span>-&gt;addExtension(<span class="keyword">new</span> Project_Twig_Extension());</span><br></pre></td></tr></table></figure>

<h4 id="全局变量-2"><a href="#全局变量-2" class="headerlink" title="全局变量"></a>全局变量</h4><p>通过调用<code>getGlobals()</code>方法即可以在扩展中注册全局变量：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project_Twig_Extension</span> <span class="keyword">extends</span> <span class="title">Twig_Extension</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getGlobals</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;text&#x27;</span> =&gt; <span class="keyword">new</span> Text(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数-2"><a href="#函数-2" class="headerlink" title="函数"></a>函数</h4><p>通过调用<code>getFunctions()</code>方法即可以在扩展中注册函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project_Twig_Extension</span> <span class="keyword">extends</span> <span class="title">Twig_Extension</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFunctions</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">        <span class="keyword">new</span> Twig_SimpleFunction(<span class="string">&#x27;lipsum&#x27;</span>, <span class="string">&#x27;generate_lipsum&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Filters-2"><a href="#Filters-2" class="headerlink" title="Filters"></a>Filters</h4><p>为了将filter添加到一个扩展中，你需要覆写<code>getFilters()</code>方法。这个方法必须返回一个添加到Twig环境的filters数组：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project_Twig_Extension</span> <span class="keyword">extends</span> <span class="title">Twig_Extension</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilters</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">        <span class="keyword">new</span> Twig_SimpleFilter(<span class="string">&#x27;rot13&#x27;</span>, <span class="string">&#x27;str_rot13&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h4><p>通过覆写<code>getTokenParsers()</code>方法就可以将一个标记添加到一个扩展中。这个方法必须返回一个天极到Twig环境的tags数组：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project_Twig_Extension</span> <span class="keyword">extends</span> <span class="title">Twig_Extension</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTokenParsers</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(<span class="keyword">new</span> Project_Set_TokenParser());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><p><code>getOperators()</code>方法用来新增新的操作符。下面的例子是如何添加!，||以及&amp;&amp;操作符：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project_Twig_Extension</span> <span class="keyword">extends</span> <span class="title">Twig_Extension</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOperators</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">      <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;!&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;precedence&#x27;</span> =&gt; <span class="number">50</span>, <span class="string">&#x27;class&#x27;</span> =&gt; <span class="string">&#x27;Twig_Node_Expression_Unary_Not&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;precedence&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;class&#x27;</span> =&gt; <span class="string">&#x27;Twig_Node_Expression_Binary_Or&#x27;</span>, <span class="string">&#x27;associativity&#x27;</span> =&gt; Twig_ExpressionParser::OPERATOR_LEFT),</span><br><span class="line">        <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;precedence&#x27;</span> =&gt; <span class="number">15</span>, <span class="string">&#x27;class&#x27;</span> =&gt; <span class="string">&#x27;Twig_Node_Expression_Binary_And&#x27;</span>, <span class="string">&#x27;associativity&#x27;</span> =&gt; Twig_ExpressionParser::OPERATOR_LEFT),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Tests-1"><a href="#Tests-1" class="headerlink" title="Tests"></a>Tests</h4><p>getTests()方法用来添加新的Test函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project_Twig_Extension</span> <span class="keyword">extends</span> <span class="title">Twig_Extension</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTests</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">        <span class="keyword">new</span> Twig_SimpleTest(<span class="string">&#x27;even&#x27;</span>, <span class="string">&#x27;twig_test_even&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>twig</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8注解(Annotations)语法</title>
    <url>/2015/12/12/Drupal8%E6%B3%A8%E8%A7%A3-Annotations-%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>写过java代码的同学，相信大家对注解都不陌生。有些PHP框架也是支持注解的，如Symfony2使用注解定义路由规则，Doctrine使用注解来添加ORM元数据。PHP注解RFC见<a href="https://wiki.php.net/rfc/annotations" title="rfc">rfc-annotations</a>。</p>
<p>Drupal8的注解依照<a href="http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html">Doctrine</a>的规范。</p>
<p>本文主要对Drupal8中所用到的注解做分析，欢迎拍砖交流！</p>
<p>###一、注解的争议<br>目前对注解的争议主要有这么几点。<br>####1、如何区分注解和注释？<br>####2、为什么要把业务逻辑放在注释中？难道他们不是一个核心语言语义的一部分？<br>####3、注解和注释代码容易混淆，如果开发人员忘记定义了注解，程序并不会报错，但是可能不会像预期的工作。<br>####4、注解不好测试、调试。</p>
<p>###二、注解的优势<br>####1、不用写很多代码就可以实现注入。如：</p>
<p>我们要把weapon对象注入到soldier实例中。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weapon</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shoot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;... shooting ...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soldier</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$weapon</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWeapon</span>(<span class="params"><span class="variable">$weapon</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;weapon = <span class="variable">$weapon</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;weapon-&gt;shoot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要实现这个功能，要这样写代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$weapon</span> = <span class="keyword">new</span> Weapon();</span><br><span class="line"></span><br><span class="line"><span class="variable">$soldier</span> = <span class="keyword">new</span> Soldier();</span><br><span class="line"><span class="variable">$soldier</span>-&gt;setWeapon(<span class="variable">$weapon</span>); </span><br><span class="line"><span class="variable">$soldier</span>-&gt;fight();</span><br></pre></td></tr></table></figure>

<p>如果我们用注解，就变得简单多了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soldier</span> </span>&#123;  </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@inject</span> $weapon Weapon</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWeapon</span>(<span class="params"><span class="variable">$weapon</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;weapon = <span class="variable">$weapon</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只需要2行代码就可以了</span></span><br><span class="line"><span class="variable">$soldier</span> = <span class="keyword">new</span> Soldier();</span><br><span class="line"><span class="variable">$soldier</span>-&gt;fight();</span><br></pre></td></tr></table></figure>

<p>####2、Drupal8执行时，内存使用大大减少。在Drupal7中，通过hook定义元数据，这样就导致每个请求都需要把所有的模块加载到内存中，而Drupal8仅解析注解，并加载进内存，这样就可以占用很小的内存。</p>
<p>###三、语法<br>注解的数据结构是类似json key-value。<br>让我们来看text模块的TextDefaultFormatter.php文件中的定义。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Plugin implementation of the &#x27;text_default&#x27; formatter.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FieldFormatter</span>(</span></span><br><span class="line"><span class="comment"> *   id = &quot;text_default&quot;,</span></span><br><span class="line"><span class="comment"> *   label = <span class="doctag">@Translation</span>(&quot;Default&quot;),</span></span><br><span class="line"><span class="comment"> *   field_types = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;text&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;text_long&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;text_with_summary&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   quickedit = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;editor&quot; = &quot;plain_text&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextDefaultFormatter</span> <span class="keyword">extends</span> <span class="title">FormatterBase</span> </span>&#123;  </span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>以下是一些规范：</p>
<p>####1、必须以一个唯一的id开始，类似Drupal7的machine name<br>####2、顶级的Keys可以使用双引号<br>####3、下级的Keys必须使用双引号<br>####4、必须使用双引号，单引号会造成语法错误<br>####5、value允许的数据类型<br>        &gt; 字符串(string)：必须使用双引号,如”foo”，使用一对双引号包含双引号字符，如”The “”On”” value “<br>        &gt; 数字(number)：不能使用引号，如果使用引号，会被解析成字符串<br>        &gt; 布尔型(bool)：不能使用引号，如果使用引号，会被解析成字符串<br>        &gt; list：必须使用花括号，末尾不能使用逗号。如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">field_types = &#123;</span><br><span class="line">	<span class="string">&quot;text&quot;</span>,</span><br><span class="line">	<span class="string">&quot;text_long&quot;</span>,</span><br><span class="line">	<span class="string">&quot;text_with_summary&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>    &gt; map: 必须使用花括号，key-value用＝号分割，默认不能使用逗号。如：    
        
</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">quickedit = &#123;</span><br><span class="line">	<span class="string">&quot;editor&quot;</span> = <span class="string">&quot;plain_text&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>    &gt; 允许定义常量
    
</code></pre>
<p>###四、自定义注解类<br>Drupal8中的一些基础plugin如entity,views等会被自动加载。当然，你可以在自定义的类中给plugin提供文档和参数。</p>
<p>我们还是以text模块举例说明，在text/src/Plugin/field/formatter/TextPlainFormatter.php中定义了plaintext，并且自定义了一个叫FieldFormatter的注解类。</p>
<p>注意：所有的注解类都是继承自 \Drupal\Component\Annotation\Plugin。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Plugin implementation of the &#x27;text_plain&#x27; formatter.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FieldFormatter</span>(</span></span><br><span class="line"><span class="comment"> *   id = &quot;text_plain&quot;,</span></span><br><span class="line"><span class="comment"> *   label = <span class="doctag">@Translation</span>(&quot;Plain text&quot;),</span></span><br><span class="line"><span class="comment"> *   field_types = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;text&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;text_long&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;text_with_summary&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   edit = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;editor&quot; = &quot;direct&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextPlainFormatter</span> </span>&#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>###五、自定义插件类型中使用注解</p>
<p>如果你想在自定义plugin类型中使用注解，可以用AnnotatedClassDiscovery类。</p>
<p>AnnotatedClassDiscovery构造函数的第一个参数是这个plugin类型所存放的目录结构。</p>
<p>如下面的代码，plugin在目录$module/src/Plugin/field/formatter中。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Plugin</span>\<span class="title">Discovery</span>\<span class="title">AnnotatedClassDiscovery</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormatterPluginManager</span> <span class="keyword">extends</span> <span class="title">PluginManagerBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs a FormatterPluginManager object.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> array $namespaces</span></span><br><span class="line"><span class="comment">   *   An array of paths keyed by their corresponding namespaces.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$namespaces</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// This is the essential line you have to use in your manager.</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;discovery = <span class="keyword">new</span> AnnotatedClassDiscovery(<span class="string">&#x27;Plugin/field/formatter&#x27;</span>, <span class="variable">$namespaces</span>);</span><br><span class="line">    <span class="comment">// Every other line is a good practice.</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;discovery = <span class="keyword">new</span> ProcessDecorator(<span class="keyword">$this</span>-&gt;discovery, [<span class="keyword">$this</span>, <span class="string">&#x27;processDefinition&#x27;</span>]);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;discovery = <span class="keyword">new</span> AlterDecorator(<span class="keyword">$this</span>-&gt;discovery, <span class="string">&#x27;field_formatter_info&#x27;</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;discovery = <span class="keyword">new</span> CacheDecorator(<span class="keyword">$this</span>-&gt;discovery, <span class="string">&#x27;field_formatter_types&#x27;</span>, <span class="string">&#x27;field&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>注入的命名空间来自于依赖注入容器，如FieldBundle：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains Drupal\field\FieldBundle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">field</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">DependencyInjection</span>\<span class="title">ContainerBuilder</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Bundle</span>\<span class="title">Bundle</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Field dependency injection container.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FieldBundle</span> <span class="keyword">extends</span> <span class="title">Bundle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Overrides Symfony\Component\HttpKernel\Bundle\Bundle::build().</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params">ContainerBuilder <span class="variable">$container</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Register the plugin managers for our plugin types with the dependency injection container.</span></span><br><span class="line">    <span class="variable">$container</span>-&gt;register(<span class="string">&#x27;plugin.manager.field.widget&#x27;</span>, <span class="string">&#x27;Drupal\field\Plugin\Type\Widget\WidgetPluginManager&#x27;</span>)</span><br><span class="line">      -&gt;addArgument(<span class="string">&#x27;%container.namespaces%&#x27;</span>);</span><br><span class="line">    <span class="variable">$container</span>-&gt;register(<span class="string">&#x27;plugin.manager.field.formatter&#x27;</span>, <span class="string">&#x27;Drupal\field\Plugin\Type\Formatter\FormatterPluginManager&#x27;</span>)</span><br><span class="line">      -&gt;addArgument(<span class="string">&#x27;%container.namespaces%&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>要调用自定义的plugin管理器，需要在构造函数调用的时候注入命名空间。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$type</span> = <span class="keyword">new</span> CustomPluginManager(\Drupal::getContainer()-&gt;getParameter(<span class="string">&#x27;container.namespaces&#x27;</span>)); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>###六、Entity注解</p>
<p>Entity类型不管是配置还是内容实体都必须用注解定义。</p>
<p>如：core/modules/user/src/Entity/User.php:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines the user entity class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The base table name here is plural, despite Drupal table naming standards,</span></span><br><span class="line"><span class="comment"> * because &quot;user&quot; is a reserved word in many databases.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ContentEntityType</span>(</span></span><br><span class="line"><span class="comment"> *   id = &quot;user&quot;,</span></span><br><span class="line"><span class="comment"> *   label = <span class="doctag">@Translation</span>(&quot;User&quot;),</span></span><br><span class="line"><span class="comment"> *   handlers = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;storage&quot; = &quot;Drupal\user\UserStorage&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;storage_schema&quot; = &quot;Drupal\user\UserStorageSchema&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;access&quot; = &quot;Drupal\user\UserAccessControlHandler&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;list_builder&quot; = &quot;Drupal\user\UserListBuilder&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;view_builder&quot; = &quot;Drupal\Core\Entity\EntityViewBuilder&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;views_data&quot; = &quot;Drupal\user\UserViewsData&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;route_provider&quot; = &#123;</span></span><br><span class="line"><span class="comment"> *       &quot;html&quot; = &quot;Drupal\user\Entity\UserRouteProvider&quot;,</span></span><br><span class="line"><span class="comment"> *     &#125;,</span></span><br><span class="line"><span class="comment"> *     &quot;form&quot; = &#123;</span></span><br><span class="line"><span class="comment"> *       &quot;default&quot; = &quot;Drupal\user\ProfileForm&quot;,</span></span><br><span class="line"><span class="comment"> *       &quot;cancel&quot; = &quot;Drupal\user\Form\UserCancelForm&quot;,</span></span><br><span class="line"><span class="comment"> *       &quot;register&quot; = &quot;Drupal\user\RegisterForm&quot;</span></span><br><span class="line"><span class="comment"> *     &#125;,</span></span><br><span class="line"><span class="comment"> *     &quot;translation&quot; = &quot;Drupal\user\ProfileTranslationHandler&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   admin_permission = &quot;administer user&quot;,</span></span><br><span class="line"><span class="comment"> *   base_table = &quot;users&quot;,</span></span><br><span class="line"><span class="comment"> *   data_table = &quot;users_field_data&quot;,</span></span><br><span class="line"><span class="comment"> *   label_callback = &quot;user_format_name&quot;,</span></span><br><span class="line"><span class="comment"> *   translatable = TRUE,</span></span><br><span class="line"><span class="comment"> *   entity_keys = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;id&quot; = &quot;uid&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;langcode&quot; = &quot;langcode&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;uuid&quot; = &quot;uuid&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   links = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;canonical&quot; = &quot;/user/&#123;user&#125;&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;edit-form&quot; = &quot;/user/&#123;user&#125;/edit&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;cancel-form&quot; = &quot;/user/&#123;user&#125;/cancel&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;collection&quot; = &quot;/admin/people&quot;,</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   field_ui_base_route = &quot;entity.user.admin_form&quot;,</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">ContentEntityBase</span> <span class="keyword">implements</span> <span class="title">UserInterface</span> </span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>@ConfigEntityType继承自Drupal\Core\Config\Entity\ConfigEntityBase类。</p>
<p>参考文章：<br>1、<a href="https://www.drupal.org/node/1882526">https://www.drupal.org/node/1882526</a><br>2、<a href="https://www.drupal.org/node/2207559">https://www.drupal.org/node/2207559</a><br>3、<a href="https://www.drupal.org/node/1638040">https://www.drupal.org/node/1638040</a><br>4、<a href="http://lakshminp-lakshminp.rhcloud.com/annotations-in-drupal-8/">http://lakshminp-lakshminp.rhcloud.com/annotations-in-drupal-8/</a><br>5、<a href="https://docs.phalconphp.com/zh/latest/reference/annotations.html">https://docs.phalconphp.com/zh/latest/reference/annotations.html</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8相对Drupal7的变化</title>
    <url>/2015/12/26/Drupal8%E7%9B%B8%E5%AF%B9Drupal7%E7%9A%84%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>Drupal 8已经正式发布，与Drupal 7相比，Drupal 8在实现机制上发生了根本性的改变。最本质的改变，应该就是从主要以面向过程的编码方式转为了主要以面向对象的编码方式。虽然Drupal 8仍然保留了部分面向过程的文件，比如.module文件，但是可以预见，在Drupal 9中，这些面向过程的代码将被全部移除，所以在使用Drupal 8做开发的时候，应该尽量避免引用面向过程的代码，以免从Drupal 8升级到Drupal 9的过程中增加不必要的麻烦。</p>
<p>本文将从模块开发的角度（而非其他角度，比如网站编辑、性能优劣等）讨论Drupal 8 与Drupal 7的不同之处，通过对Drupal 8的研究，我将Drupal 8模块开发与Drupal 7的不同点概括为以下几点：</p>
<ol>
<li>目录结构；</li>
<li>配置文件；</li>
<li>路由方式；</li>
<li>主题；</li>
<li>表单；</li>
<li>钩子机制在Drupal 8中的变化及实现；</li>
<li>Drupal 8中的新增机制。</li>
</ol>
<p>下面将详细论述这些不同点。</p>
<h3 id="2、目录结构"><a href="#2、目录结构" class="headerlink" title="2、目录结构"></a>2、目录结构</h3><p>Drupal 7的目录结构为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-includes</span><br><span class="line">|-misc</span><br><span class="line">|-modules</span><br><span class="line">|-scripts</span><br><span class="line">|-sites</span><br><span class="line">|  |-all</span><br><span class="line">|  |  |-modules</span><br><span class="line">|  |  |-themes</span><br><span class="line">|  |-default</span><br><span class="line">|-themes</span><br></pre></td></tr></table></figure>

<p>Drupal 8的目录结构为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-core</span><br><span class="line">|  |-assets</span><br><span class="line">|  |-config</span><br><span class="line">|  |-includes</span><br><span class="line">|  |-lib</span><br><span class="line">|  |-misc</span><br><span class="line">|  |-modules</span><br><span class="line">|  |-profiles</span><br><span class="line">|  |-scripts</span><br><span class="line">|  |-themes</span><br><span class="line">|-modules</span><br><span class="line">|-sites</span><br><span class="line">|  |-default</span><br><span class="line">|-themes</span><br><span class="line">|-vendor</span><br></pre></td></tr></table></figure>

<p>可以看出，Drupal 8与Drupal 7的目录结构大不相同，在Drupal7中核心的代码都直接放在根目录下，比如includes等，核心模块放在根目录下的modules目录下，核心主题放在根目录下的themes目录下。用户自定义或者第三方的模块放在sites\all\modules、主题放在sites\all\themes目录下。</p>
<p>而在Drupal 8里面，核心的东西都被移到根目录下的core目录下，原来用来放核心模块和主题的modules、themes目录分别用来放用户自定义的模块和主题。按照约定俗称的规则，一般在modules目录下新建contrib和custom目录，分别用来放贡献和自定义模块。</p>
<h3 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><p>在Drupal模块开发中，很多功能的实现都要靠配置文件来实现，比如模块的基本信息在Drupal 7中就必须配置在*.info文件中。在Drupal 8中，配置文件的使用得到了进一步的扩充，可以说，Drupal 8的几乎所有功能都离不开配置文件。</p>
<p>但是同时配置文件的格式也与Drupal 7有所不同。Drupal 7中的配置文件主要是.info文件，.info文件采用使用等号隔开的键值对的形式配置信息，例如模块信息的配置文件demo.info：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">core            &#x3D; &quot;7.x&quot;</span><br><span class="line">description     &#x3D; &quot;Demo Module&quot;</span><br><span class="line">dependencies[] &#x3D; system </span><br><span class="line">name            &#x3D; &quot;demo&quot;</span><br><span class="line">package         &#x3D; &quot;demo&quot;</span><br><span class="line">version &#x3D; &quot;7.x-1.0&quot;</span><br></pre></td></tr></table></figure>

<p>Drupal 8中配置文件广泛使用yaml格式的文件，例如模块信息的配置文件demo.info.yml:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name: demo</span><br><span class="line">type: module</span><br><span class="line">description: &quot;demo module&quot;</span><br><span class="line">package: demo</span><br><span class="line">core: 8.x</span><br><span class="line">dependencies:</span><br><span class="line">  - rest</span><br></pre></td></tr></table></figure>

<p>对比Drupal 7和Drupal 8的配置文件，不难看出，里面的内容基本一致，所不同的只是文件格式的不同。需要注意的是Drupal 8的配置文件后缀名都是.yml，表明这是一个yaml文件。Drupal 8的模块配置信息比Drupal 7的多一项type: module，这是因为Drupal 8的主题也是用同样格式的配置文件，为了区分这是一个主题还是模块，该项是必须的。</p>
<p>Drupal 8 不仅需要模块信息配置文件，还需要各种其他的配置文件，比如后面将要讲到的路由配置文件*.routing.yml、服务配置文件*.services.yml等。</p>
<h3 id="3、路由方式"><a href="#3、路由方式" class="headerlink" title="3、路由方式"></a>3、路由方式</h3><p>Drupal 7和Drupal 8的路由也存在很大的区别。Drupal 7 使用Hook的方式，而Drupal 8使用Symfony框架的路由配置文件的方式。本文只讨论Drupal 8和Drupal 7 的不同之处，更深入的介绍请参考<a href="http://verynull.com/2015/12/23/Drupal8-routing/" title="Drupal8路由">http://verynull.com/2015/12/23/Drupal8-routing/</a>和<a href="http://verynull.com/2015/12/23/Drupal8-Controller/" title="Drupal8控制器">http://verynull.com/2015/12/23/Drupal8-Controller/</a></p>
<p>Drupal 7需要在module_name.module中实现hook_menu钩子来将某个url和请求处理方法关联起来，示例代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo_menu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$items</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable">$items</span>[<span class="string">&#x27;demo&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;示例&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;page callback&#x27;</span> =&gt; <span class="string">&#x27;theme&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;page arguments&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;demo&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;access callback&#x27;</span> =&gt; <span class="string">&#x27;user_is_logged_in&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span> =&gt; MENU_CALLBACK</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$items</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码表示，当用户访问/demo路径时。调用theme方法渲染demo主题，主题需要在hook_theme中注册，这一点Drupal 8没有变化。</p>
<p>实现同样的功能，Drupal 8 首先需要配置module_name.routing.yml，将路径和控制器中的某个action关联起来，然后编写控制器，实现里面的action。这里需要提到一个概念MVC，MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码。Drupal 8里面的控制器就是MVC中controller，用于衔接界面（view）和数据（model），即在控制器里面，接收参数，然后读取数据，传递给界面，最后返回给终端用户。</p>
<p>example.rounting.yml格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example.demo:</span><br><span class="line">  path: &#39;&#x2F;demo&#x2F;&#123;name&#125;&#39;</span><br><span class="line">  defaults:</span><br><span class="line">    _controller: &#39;\Drupal\example\Controller\ExampleController::demo&#39;</span><br><span class="line">    _title: &#39;test drupal 8 routing&#39;</span><br><span class="line">  requirements:</span><br><span class="line">    _permission: &#39;access content&#39;</span><br></pre></td></tr></table></figure>

<p>example.demo为路由的机读名称，格式为”模块名.路由”，path是实际的url路径，其中{name}，表示参数，该参数会传递给action，参数名称就是name。</p>
<p>defaults下有的_controller: ‘\Drupal\example\Controller\ExampleController::demo’表示控制器为\Drupal\example\Controller\ExampleController，action为demo方法。</p>
<p>defaults下的_title: ‘test drupal 8 routing’表示页面标题为：test drupal 8 routing。</p>
<p>requirements下的_permission表示可以访问该路径的权限。</p>
<p>ExampleController的代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains ExampleController</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">example</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Controller</span>\<span class="title">ControllerBase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides route responses for example.module.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleController</span> <span class="keyword">extends</span> <span class="title">ControllerBase</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 展示hello &#123;name&#125;.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> $name</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;#markup&#x27;</span> =&gt; t(<span class="string">&#x27;Hello &#x27;</span> . <span class="variable">$name</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当完成上述代码后，清除缓存，在浏览器中访问<a href="http://yourdomain/demo/World%EF%BC%8C%E7%95%8C%E9%9D%A2%E5%B0%B1%E4%BC%9A%E6%98%BE%E7%A4%BAHello">http://yourdomain/demo/World，界面就会显示Hello</a> World。example.info.yml、example.routing.yml和ExampleController就构成了Drupal 8中的一个最基本模块，一般来说，这三类文件是必须的。</p>
<h3 id="4、主题"><a href="#4、主题" class="headerlink" title="4、主题"></a>4、主题</h3><p>Drupal 8和Drupal 7相比，主题上也发生了本质的变化，首先是主题引擎的变化，其次是配置方式的变化，最后是js、css引入方式的变化。本文只讨论Drupal 8 与Drupal 7主题的不同之处，主题更深入的介绍请参考<a href="http://verynull.com/2015/11/19/Drupal8%E4%B8%BB%E9%A2%98-theme/" title="Drupal8主题">http://verynull.com/2015/11/19/Drupal8主题-theme/</a>和<a href="http://verynull.com/2015/11/18/Drupal8%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E-twig/" title="Drupal8的模板引擎-twig">http://verynull.com/2015/11/18/Drupal8模板引擎-twig/</a>。</p>
<h4 id="4-1、模板引擎的变化"><a href="#4-1、模板引擎的变化" class="headerlink" title="4.1、模板引擎的变化"></a>4.1、模板引擎的变化</h4><p>Drupal 7使用的模板引擎是PHPTemplate，该模板引擎的特点是模板里面可以写php代码。这种模板的缺点显而易见，可能会产生XSS和SQL注入等攻击，如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果$name = ‘&lt;script&gt;js语句&lt;/script&gt;’，这样输出到页面中就会执行script标签中的js代码，这样就会被黑客利用来攻击网站。</p>
<p>而Drupal 8则使用twig模板引擎，twig模板相对于PHPTemplate引擎，主要有以下有点：</p>
<ol>
<li>快速：Twig把模板编译成为优化后的PHP代码。相对普通PHP代码来说，其额外开销非常轻微。</li>
<li>安全：Twig会使用一个沙箱模式来运行不信任的模板代码。这使得Twig可以在用户可以修改模板设计的应用中工作良好。</li>
<li>弹性：Twig试用了弹性的词法和语法分析器。开发者可以定义自己的标记和过滤，并创建自己的DSL。</li>
</ol>
<p>可以看出，twig里面不能写php代码，他有一套自己的语法，并且最终被编译为php，运行在安全沙箱中，一句话，就是安全。像上面的输出变量，在twig中如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; name &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这样会自动把不安全的字符过滤掉。下面来比较PHPTemplate和twig的典型的不同之处。</p>
<p>1.后缀名</p>
<p>PHPTemplate的后缀名是.tpl.php，twig的后缀名为.html.twig.</p>
<p>2.变量</p>
<p>输出一个变量</p>
<p>PHPTemplate:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;&lt;?php print $content; ?&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;content&quot;&gt;&#123;&#123; content &#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>输出一个哈希键值</p>
<p>PHPTemplate:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">print</span> <span class="variable">$item</span>[<span class="string">&#x27;#item&#x27;</span>][<span class="string">&#x27;alt&#x27;</span>]; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; item[&#39;#item&#39;].alt &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>变量赋值</p>
<p>PHPTemplate:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$custom_var</span> = <span class="variable">$content</span>-&gt;comments; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% set custom_var &#x3D; content.comments %&#125;</span><br></pre></td></tr></table></figure>

<p>数组初始化</p>
<p>PHPTemplate:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$args</span> = <span class="keyword">array</span>(<span class="string">&#x27;!author&#x27;</span> =&gt; <span class="variable">$author</span>, <span class="string">&#x27;!date&#x27;</span> =&gt; <span class="variable">$created</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% set args &#x3D; &#123;&#39;!author&#39;: author, &#39;!date&#39;: created&#125; </span><br></pre></td></tr></table></figure>

<p>3.条件判断</p>
<p>PHPTemplate:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="variable">$content</span>-&gt;comments): <span class="keyword">endif</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if content.comments %&#125; &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>PHPTemplate:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$content</span>-&gt;comments)): <span class="keyword">endif</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if content.comments is not empty %&#125; &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>PHPTemplate:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$content</span>-&gt;comments)): <span class="keyword">endif</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if content.comments is defined %&#125; &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>PHPTemplate:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="variable">$count</span> &gt; <span class="number">0</span>): <span class="keyword">endif</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if count &gt; 0 %&#125; &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>4.控制结构</p>
<p>PHPTemplate:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span> (<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>) &#123;&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for user in users %&#125; &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>5.过滤</p>
<p>check_plain：</p>
<p>PHPTemplate:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">print</span> check_plain(<span class="variable">$title</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; title|striptags &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>Translate：</p>
<p>PHPTemplate:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">print</span> t(<span class="string">&#x27;Home&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Twig:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#39;Home&#39;|t &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>更深入的介绍请参考上述文章。</p>
<h4 id="4-2、主题配置"><a href="#4-2、主题配置" class="headerlink" title="4.2、主题配置"></a>4.2、主题配置</h4><p>Drupal 7的主题配置文件bartik.info格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name &#x3D; Bartik</span><br><span class="line">description &#x3D; A flexible, recolorable theme with many regions.</span><br><span class="line">package &#x3D; Core</span><br><span class="line">version &#x3D; VERSION</span><br><span class="line">core &#x3D; 7.x</span><br><span class="line"></span><br><span class="line">stylesheets[all][] &#x3D; css&#x2F;layout.css</span><br><span class="line">stylesheets[all][] &#x3D; css&#x2F;style.css</span><br><span class="line">stylesheets[all][] &#x3D; css&#x2F;colors.css</span><br><span class="line">stylesheets[print][] &#x3D; css&#x2F;print.css</span><br><span class="line"></span><br><span class="line">regions[header] &#x3D; Header</span><br><span class="line">regions[help] &#x3D; Help</span><br><span class="line">regions[page_top] &#x3D; Page top</span><br><span class="line">regions[page_bottom] &#x3D; Page bottom</span><br><span class="line">regions[highlighted] &#x3D; Highlighted</span><br><span class="line"></span><br><span class="line">regions[featured] &#x3D; Featured</span><br><span class="line">regions[content] &#x3D; Content</span><br><span class="line">regions[sidebar_first] &#x3D; Sidebar first</span><br><span class="line">regions[sidebar_second] &#x3D; Sidebar second</span><br><span class="line"></span><br><span class="line">regions[triptych_first] &#x3D; Triptych first</span><br><span class="line">regions[triptych_middle] &#x3D; Triptych middle</span><br><span class="line">regions[triptych_last] &#x3D; Triptych last</span><br><span class="line"></span><br><span class="line">regions[footer_firstcolumn] &#x3D; Footer first column</span><br><span class="line">regions[footer_secondcolumn] &#x3D; Footer second column</span><br><span class="line">regions[footer_thirdcolumn] &#x3D; Footer third column</span><br><span class="line">regions[footer_fourthcolumn] &#x3D; Footer fourth column</span><br><span class="line">regions[footer] &#x3D; Footer</span><br><span class="line"></span><br><span class="line">settings[shortcut_module_link] &#x3D; 0</span><br></pre></td></tr></table></figure>

<p>本文第二章节已经提到，Drupal 8 的配置文件都是用yaml文件，bartik.info.yml：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name: Bartik</span><br><span class="line">type: theme</span><br><span class="line">base theme: classy</span><br><span class="line">description: &#39;A flexible, recolorable theme with many regions and a responsive, mobile-first layout.&#39;</span><br><span class="line">package: Core</span><br><span class="line"># version: VERSION</span><br><span class="line"># core: 8.x</span><br><span class="line">libraries:</span><br><span class="line">  - bartik&#x2F;global-styling</span><br><span class="line">ckeditor_stylesheets:</span><br><span class="line">  - css&#x2F;base&#x2F;elements.css</span><br><span class="line">  - css&#x2F;components&#x2F;captions.css</span><br><span class="line">  - css&#x2F;components&#x2F;table.css</span><br><span class="line">regions:</span><br><span class="line">  header: Header</span><br><span class="line">  primary_menu: &#39;Primary menu&#39;</span><br><span class="line">  secondary_menu: &#39;Secondary menu&#39;</span><br><span class="line">  page_top: &#39;Page top&#39;</span><br><span class="line">  page_bottom: &#39;Page bottom&#39;</span><br><span class="line">  highlighted: Highlighted</span><br><span class="line">  featured_top: &#39;Featured top&#39;</span><br><span class="line">  breadcrumb: Breadcrumb</span><br><span class="line">  content: Content</span><br><span class="line">  sidebar_first: &#39;Sidebar first&#39;</span><br><span class="line">  sidebar_second: &#39;Sidebar second&#39;</span><br><span class="line">  featured_bottom_first: &#39;Featured bottom first&#39;</span><br><span class="line">  featured_bottom_second: &#39;Featured bottom second&#39;</span><br><span class="line">  featured_bottom_third: &#39;Featured bottom third&#39;</span><br><span class="line">  footer_first: &#39;Footer first&#39;</span><br><span class="line">  footer_second: &#39;Footer second&#39;</span><br><span class="line">  footer_third: &#39;Footer third&#39;</span><br><span class="line">  footer_fourth: &#39;Footer fourth&#39;</span><br><span class="line">  footer_fifth: &#39;Footer fifth&#39;</span><br></pre></td></tr></table></figure>

<p>从以上可以看出，Drupal 7 和Drupal 8 的主题配置文件大致相同，只是格式不一致，主要的不同有两点：</p>
<p>1.Drupal 8的配置文件多了type: theme，这是用来表明这是一个主题，而不是模块。</p>
<p>2.js、css的全局引入，Drupal 7可以直接引入单个js、css文件，而Drupal 8需要先将css、js设置成library，然后在主题配置文件中引入library，如上例中的：<br>    libraries:<br>      - bartik/global-styling</p>
<p>表示引入bartik主题下的global-styling库。library库是在theme_name.libraries.yml文件中定义的，bartik.libraries.yml的部分代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">color.preview:</span><br><span class="line">  version: VERSION</span><br><span class="line">  css:</span><br><span class="line">    theme:</span><br><span class="line">      color&#x2F;preview.css: &#123;&#125;</span><br><span class="line">  js:</span><br><span class="line">    color&#x2F;preview.js: &#123;&#125;</span><br><span class="line">  dependencies:</span><br><span class="line">    - color&#x2F;drupal.color</span><br><span class="line"></span><br><span class="line">maintenance_page:</span><br><span class="line">  version: VERSION</span><br><span class="line">  css:</span><br><span class="line">    theme:</span><br><span class="line">      css&#x2F;maintenance-page.css: &#123;&#125;</span><br><span class="line">  dependencies:</span><br><span class="line">    - system&#x2F;maintenance</span><br><span class="line">    - bartik&#x2F;global-styling</span><br></pre></td></tr></table></figure>

<p>其中color.preview、maintenance_page就表示一个library，每个library下可以有css、js、dependencies等键，分别表示引入css、引入js和引入依赖的库。</p>
<h4 id="4-3、引入js、css"><a href="#4-3、引入js、css" class="headerlink" title="4.3、引入js、css"></a>4.3、引入js、css</h4><p>在4.2节中已经提到，Drupal 8中引入js和css必须使用library，不能单独引入单个js或css文件。在主题配置文件中引入全局的库也已经在4.2节中阐述，那在单个页面中引入js和css有何不同呢？</p>
<p>我们在Drupal 7中通常通过drupal_add_js和drupal_add_css来引入js和css，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">drupal_add_js(drupal_get_path(<span class="string">&#x27;module&#x27;</span>, <span class="string">&#x27;demo&#x27;</span>) . <span class="string">&#x27;/js/demo.js&#x27;</span>);</span><br><span class="line">drupal_add_css(drupal_get_path(<span class="string">&#x27;module&#x27;</span>, <span class="string">&#x27;demo&#x27;</span>) . <span class="string">&#x27;/css/demo.css&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在Drupal 8中，我们首先将js、css配置成库，如demo.libraries.yml:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">base:</span><br><span class="line">  version: VERSION</span><br><span class="line">  css:</span><br><span class="line">    theme:</span><br><span class="line">      css&#x2F;demo.css: &#123;&#125;</span><br><span class="line">  js:</span><br><span class="line">    js&#x2F;demo.js: &#123;&#125;</span><br><span class="line">  dependencies:</span><br><span class="line">    - core&#x2F;jquery</span><br></pre></td></tr></table></figure>

<p>上面配置了一个base库，Drupal 8中除了要配置库，还要在渲染数组中使用#attached才能将库加到页面中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&#x27;#theme&#x27;</span> =&gt; <span class="string">&#x27;example_demo&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#attached&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;library&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;example/base&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上述代码表示，渲染example_demo主题，并且加载example/base’库。</p>
<h3 id="5、表单"><a href="#5、表单" class="headerlink" title="5、表单"></a>5、表单</h3><p>我们将以一个简单的示例来分析Drupal 7和Drupal 8表单的异同。<br>在Drupal 7中要实现表单的展示、提交，首先需要配置菜单，将路径和表单函数关联起来在hook_menu中定义如下菜单：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$items</span>[<span class="string">&#x27;demo/form&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;Create demo form&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;page callback&#x27;</span> =&gt; <span class="string">&#x27;drupal_get_form&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;page arguments&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;demo_form&#x27;</span>),</span><br><span class="line">  <span class="string">&#x27;access callback&#x27;</span> =&gt; <span class="string">&#x27;access content&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;type&#x27;</span> =&gt; MENU_LOCAL_TASK,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>接下来，定义表单函数demo_form：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo_form</span>(<span class="params"><span class="variable">$form</span>, &amp;<span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$form</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;textfield&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#title&#x27;</span> =&gt; <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable">$form</span>[<span class="string">&#x27;actions&#x27;</span>][<span class="string">&#x27;#type&#x27;</span>] = <span class="string">&#x27;actions&#x27;</span>;</span><br><span class="line">  <span class="variable">$form</span>[<span class="string">&#x27;actions&#x27;</span>][<span class="string">&#x27;submit&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;submit&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#value&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Save&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;#button_type&#x27;</span> =&gt; <span class="string">&#x27;primary&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="variable">$form</span>[<span class="string">&#x27;#validate&#x27;</span>][] = <span class="string">&#x27;demo_validate&#x27;</span>;</span><br><span class="line">  <span class="variable">$form</span>[<span class="string">&#x27;#submit&#x27;</span>][] = <span class="string">&#x27;demo_submit&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$form</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码表明表单有一个文本框，一个提交按钮，表单的验证函数书demo_validate，提交处理函数是demo_submit。</p>
<p>下面实现demo_validate、demo_submit：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo_validate</span>(<span class="params"><span class="variable">$form</span>, &amp;<span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$name</span> = <span class="variable">$form_state</span>[<span class="string">&#x27;value&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$name</span> != <span class="string">&#x27;world&#x27;</span>) &#123;</span><br><span class="line">    form_set_error(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;参数错误&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo_submit</span>(<span class="params"><span class="variable">$form</span>, &amp;<span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$name</span> = <span class="variable">$form_state</span>[<span class="string">&#x27;value&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">  drupal_set_message(<span class="string">&#x27;Hello&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里，我们就可以访问demo/form了，在文本框中输入world，则界面就会显示Hello world，但是输入其他的文本，则会报错“参数错误”。</p>
<p>接下来，我们来看一下Drupal 8中的表单是如何实现的，首先我们要配置一个路由指向表单，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example.demo_form:</span><br><span class="line">  path: &#39;&#x2F;demo&#x2F;form&#39;</span><br><span class="line">  defaults:</span><br><span class="line">    _form: &#39;\Drupal\example\Form\ExampleForm&#39;</span><br><span class="line">    _title: &#39;test drupal 8 form&#39;</span><br><span class="line">  requirements:</span><br><span class="line">    _permission: &#39;access content&#39;</span><br></pre></td></tr></table></figure>

<p>path：’/demo/form’表示表单路径是/demo/form，_form: ‘\Drupal\example\Form\ExampleForm’表示表单类是\Drupal\example\Form\ExampleForm，那么下面就来实现这个类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment">	 * contains Drupal\example\Form\ExampleForm</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">example</span>\<span class="title">Form</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Form</span>\<span class="title">FormBase</span>;</span><br><span class="line">	<span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Form</span>\<span class="title">FormStateInterface</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">ExampleForm</span> <span class="keyword">extends</span> <span class="title">FormBase</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">	  <span class="comment">/**</span></span><br><span class="line"><span class="comment">	   * <span class="doctag">@inheritdoc</span></span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">	  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> <span class="string">&#x27;example_form&#x27;</span>;</span><br><span class="line">	  &#125;</span><br><span class="line">	</span><br><span class="line">	  <span class="comment">/**</span></span><br><span class="line"><span class="comment">	   * <span class="doctag">@inheritdoc</span></span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">	  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildForm</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">	    <span class="variable">$form</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">	      <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;textfield&#x27;</span>,</span><br><span class="line">	      <span class="string">&#x27;#title&#x27;</span> =&gt; <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line">	    );</span><br><span class="line">	    <span class="variable">$form</span>[<span class="string">&#x27;actions&#x27;</span>][<span class="string">&#x27;#type&#x27;</span>] = <span class="string">&#x27;actions&#x27;</span>;</span><br><span class="line">	    <span class="variable">$form</span>[<span class="string">&#x27;actions&#x27;</span>][<span class="string">&#x27;submit&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">	      <span class="string">&#x27;#type&#x27;</span> =&gt; <span class="string">&#x27;submit&#x27;</span>,</span><br><span class="line">	      <span class="string">&#x27;#value&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;t(<span class="string">&#x27;Save&#x27;</span>),</span><br><span class="line">	      <span class="string">&#x27;#button_type&#x27;</span> =&gt; <span class="string">&#x27;primary&#x27;</span>,</span><br><span class="line">	    );</span><br><span class="line">	    <span class="keyword">return</span> <span class="variable">$form</span>;</span><br><span class="line">	  &#125;</span><br><span class="line">	</span><br><span class="line">	  <span class="comment">/**</span></span><br><span class="line"><span class="comment">	   * <span class="doctag">@inheritdoc</span></span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">	  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateForm</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">	    <span class="built_in">parent</span>::validateForm(<span class="variable">$form</span>, <span class="variable">$form_state</span>);</span><br><span class="line">	    <span class="keyword">if</span>(<span class="variable">$form_state</span>-&gt;getValue(<span class="string">&#x27;name&#x27;</span>) != <span class="string">&#x27;world&#x27;</span>) &#123;</span><br><span class="line">	      <span class="variable">$a</span> = <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">	      <span class="variable">$form_state</span>-&gt;setErrorByName(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;参数错误&#x27;</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	</span><br><span class="line">	  <span class="comment">/**</span></span><br><span class="line"><span class="comment">	   * <span class="doctag">@inheritdoc</span></span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">	  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">submitForm</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$form</span>, FormStateInterface <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">	    <span class="variable">$name</span> = <span class="variable">$form_state</span>-&gt;getValue(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">	    drupal_set_message(<span class="string">&#x27;Hello&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>可见，Drupal 8中的表单就是一个类，继承自formBase，需要覆写父类的四个方法：getFormId、buildForm、validateForm和submitForm。</p>
<p>1.getFormId</p>
<p>返回表单ID，对应于Drupal 7中的表单的方法名；</p>
<p>2.buildForm</p>
<p>构造并返回表单，对应于Drupal 7中的表单函数。</p>
<p>3.validateForm</p>
<p>表单验证方法，对应于Drupal 7中的$form[‘#validate’][] = ‘demo_validate’中指定的方法</p>
<p>4.submitForm<br>表单提交处理方法，对应于Drupal 7 中$form[‘#submit’][] = ‘demo_submit’中指定的方法。</p>
<p>通过对比可以发现，Drupal 8将表单的各个元素组织在一个类里面，结构清晰，逻辑分明，相对于Drupal 7松散的代码是很大的进步。</p>
<h3 id="6、钩子机制在Drupal-8中的变化及实现"><a href="#6、钩子机制在Drupal-8中的变化及实现" class="headerlink" title="6、钩子机制在Drupal 8中的变化及实现"></a>6、钩子机制在Drupal 8中的变化及实现</h3><p>钩子机制在Drupal 7中起着举足轻重的作用，主要体现在两个方面：</p>
<p>一是info类的钩子，例如hook_menu、hook_theme、hook_services_resources等，起到关联信息的作用，比如hook_menu告诉系统URL路径和处理方法的对应关系以便用户访问某个路径的时候找到正确的函数来处理；</p>
<p>二是调用类钩子，例如hook_user_delete等，调用类钩子的作用是系统在做了某个操作之后通过module_invoke_all来调用其他模块中实现的钩子函数。比如，删除某个用户之后，可能需要删除该用户关联的其他资源，则模块需要通过实现hook_user_delete钩子。</p>
<p>Drupal 8中这两类钩子都有了相应的替代方法，info类型的钩子大部分被插件（Plugin）代替，调用类型的钩子则被事件（Event）代替。下面分别针对两种钩子选择具有代表性的功能做分析。</p>
<h4 id="6-1、调用钩子的替代与实现"><a href="#6-1、调用钩子的替代与实现" class="headerlink" title="6.1、调用钩子的替代与实现"></a>6.1、调用钩子的替代与实现</h4><p>调用钩子在Drupal 7 中最有代表性的应用是用户的删除，实现需要分两步：</p>
<p>1.实现hook_user_delete方法，以demo模块为例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo_user_delete</span>(<span class="params"><span class="variable">$account</span></span>) </span>&#123;</span><br><span class="line">  db_delete(<span class="string">&#x27;user_demo&#x27;</span>, <span class="string">&#x27;ud&#x27;</span>)</span><br><span class="line">  -&gt;condition(<span class="string">&#x27;ud.uid&#x27;</span>, <span class="variable">$account</span>-&gt;uid)</span><br><span class="line">  -&gt;execute();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>2.在用户删除的方法里面通过module_invoke_all来调用钩子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">module_invoke_all(<span class="string">&#x27;user_delete&#x27;</span>, <span class="variable">$account</span>);</span><br></pre></td></tr></table></figure>

<p>只需要两步就实现了用户删除之后，删除关联资源的功能。</p>
<p>Drupal 8里面的事件的三个要素：事件、事件监听和事件触发。</p>
<p>要实现事件机制，首先我们必须先定义一个事件（Event），比如站点配置保存事件，其次有了这个事件后，需要有订阅者来监听这个事件，最后在某个时间点触发这个事件，将事件传递给所有监听这个事件的订阅者。</p>
<p>我们以站点配置保存事件为例，介绍事件订阅的实现：</p>
<p>1.定义事件</p>
<p>Drupal 8的核心模块Config模块中定义了ConfigEvent，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\Core\Config\ConfigEvents.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Config</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines events for the configuration system.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigCrudEvent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigEvents</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Name of the event fired when saving a configuration object.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * This event allows modules to perform an action whenever a configuration</span></span><br><span class="line"><span class="comment">   * object is saved. The event listener method receives a</span></span><br><span class="line"><span class="comment">   * \Drupal\Core\Config\ConfigCrudEvent instance.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * See hook_update_N() documentation for safe configuration API usage and</span></span><br><span class="line"><span class="comment">   * restrictions as this event will be fired when configuration is saved by</span></span><br><span class="line"><span class="comment">   * hook_update_N().</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Event</span></span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigCrudEvent</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\Config::save()</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigFactory::onConfigSave()</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> hook_update_N()</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> SAVE = <span class="string">&#x27;config.save&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Name of the event fired when deleting a configuration object.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * This event allows modules to perform an action whenever a configuration</span></span><br><span class="line"><span class="comment">   * object is deleted. The event listener method receives a</span></span><br><span class="line"><span class="comment">   * \Drupal\Core\Config\ConfigCrudEvent instance.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * See hook_update_N() documentation for safe configuration API usage and</span></span><br><span class="line"><span class="comment">   * restrictions as this event will be fired when configuration is deleted by</span></span><br><span class="line"><span class="comment">   * hook_update_N().</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Event</span></span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigCrudEvent</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\Config::delete()</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigFactory::onConfigDelete()</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> hook_update_N()</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> DELETE = <span class="string">&#x27;config.delete&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Name of the event fired when renaming a configuration object.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * This event allows modules to perform an action whenever a configuration</span></span><br><span class="line"><span class="comment">   * object&#x27;s name is changed. The event listener method receives a</span></span><br><span class="line"><span class="comment">   * \Drupal\Core\Config\ConfigRenameEvent instance.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * See hook_update_N() documentation for safe configuration API usage and</span></span><br><span class="line"><span class="comment">   * restrictions as this event will be fired when configuration is renamed by</span></span><br><span class="line"><span class="comment">   * hook_update_N().</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Event</span></span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigRenameEvent</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigFactoryInterface::rename()</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> hook_update_N()</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> RENAME = <span class="string">&#x27;config.rename&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Name of the event fired when validating imported configuration.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * This event allows modules to perform additional validation operations when</span></span><br><span class="line"><span class="comment">   * configuration is being imported. The event listener method receives a</span></span><br><span class="line"><span class="comment">   * \Drupal\Core\Config\ConfigImporterEvent instance.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Event</span></span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigImporterEvent</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigImporter::validate().</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\EventSubscriber\ConfigImportSubscriber::onConfigImporterValidate().</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> IMPORT_VALIDATE = <span class="string">&#x27;config.importer.validate&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Name of the event fired when importing configuration to target storage.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * This event allows modules to perform additional actions when configuration</span></span><br><span class="line"><span class="comment">   * is imported. The event listener method receives a</span></span><br><span class="line"><span class="comment">   * \Drupal\Core\Config\ConfigImporterEvent instance.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Event</span></span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigImporterEvent</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigImporter::import().</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\EventSubscriber\ConfigSnapshotSubscriber::onConfigImporterImport().</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> IMPORT = <span class="string">&#x27;config.importer.import&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Name of event fired when missing content dependencies are detected.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Events subscribers are fired as part of the configuration import batch.</span></span><br><span class="line"><span class="comment">   * Each subscribe should call</span></span><br><span class="line"><span class="comment">   * \Drupal\Core\Config\MissingContentEvent::resolveMissingContent() when they</span></span><br><span class="line"><span class="comment">   * address a missing dependency. To address large amounts of dependencies</span></span><br><span class="line"><span class="comment">   * subscribers can call</span></span><br><span class="line"><span class="comment">   * \Drupal\Core\Config\MissingContentEvent::stopPropagation() which will stop</span></span><br><span class="line"><span class="comment">   * calling other events and guarantee that the configuration import batch will</span></span><br><span class="line"><span class="comment">   * fire the event again to continue processing missing content dependencies.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigImporter::processMissingContent()</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\MissingContentEvent</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> IMPORT_MISSING_CONTENT = <span class="string">&#x27;config.importer.missing_content&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Name of event fired to collect information on all config collections.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * This event allows modules to add to the list of configuration collections</span></span><br><span class="line"><span class="comment">   * retrieved by \Drupal\Core\Config\ConfigManager::getConfigCollectionInfo().</span></span><br><span class="line"><span class="comment">   * The event listener method receives a</span></span><br><span class="line"><span class="comment">   * \Drupal\Core\Config\ConfigCollectionInfo instance.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Event</span></span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigCollectionInfo</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigManager::getConfigCollectionInfo()</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> \Drupal\Core\Config\ConfigFactoryOverrideBase</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> COLLECTION_INFO = <span class="string">&#x27;config.collection_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该事件类中定义了一系列的事件，例如const SAVE = ‘config.save’的意思即定义了配置保存事件，当配置保存完成后触发该事件。</p>
<p>有了事件之后，我们就需要有事件订阅者来监听这个事件，一旦配置保存，则执行相应的代码。我们仍然以demo模块为例，假设配置保存后，我们的demo模块需要记录一条日志，那demo模块需要实现相应的事件订阅类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\demo\EventSubscriber\ConfigSubscriber.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>\<span class="title">EventSubscriber</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Config</span>\<span class="title">ConfigFactoryInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Config</span>\<span class="title">ConfigCrudEvent</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">Core</span>\<span class="title">Config</span>\<span class="title">ConfigEvents</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">EventDispatcher</span>\<span class="title">EventSubscriberInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记录日志，如果配置保存了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigSubscriber</span> <span class="keyword">implements</span> <span class="title">EventSubscriberInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 日志记录</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> ConfigCrudEvent $event</span></span><br><span class="line"><span class="comment">   *   The configuration event.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onConfigSave</span>(<span class="params">ConfigCrudEvent <span class="variable">$event</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$saved_config</span> = <span class="variable">$event</span>-&gt;getConfig();</span><br><span class="line">    <span class="variable">$logger</span> = \Drupal::logger(<span class="string">&#x27;config save&#x27;</span>);</span><br><span class="line">    <span class="variable">$logger</span>-&gt;notice(<span class="variable">$saved_config</span>-&gt;getName() . <span class="string">&#x27;保存了&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getSubscribedEvents</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$events</span>[ConfigEvents::SAVE][] = <span class="keyword">array</span>(<span class="string">&#x27;onConfigSave&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$events</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个事件订阅类实现了EventSubscriberInterface，这个接口只有一个方法getSubscribedEvents，这个方法返回事件对用的处理方法，比如$events[ConfigEvents::SAVE][] = array(‘onConfigSave’, 0)表示ConfigEvents::SAVE事件的处理方法为onConfigSave，后面的第二个参数0表示优先级，越大越先执行。</p>
<p>实现了这个订阅类之后，为了让事件调度器（event dispacher）知道这个订阅者，我们需要把这个订阅类配置成服务，在demo.services.yml中我们增加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">demo.config_subscriber:</span><br><span class="line">  class: Drupal\demo\EventSubscriber\ConfigSubscriber</span><br><span class="line">  arguments: []</span><br><span class="line">  tags:</span><br><span class="line">    - &#123; name: event_subscriber &#125;</span><br></pre></td></tr></table></figure>

<p>到此事件订阅的工作就完成了，要触发事件，必须要在配置保存的时候使用事件调度器将事件传递给订阅者，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="variable">$has_trusted_data</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// Validate the configuration object name before saving.</span></span><br><span class="line">	<span class="built_in">static</span>::validateName(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// If there is a schema for this configuration object, cast all values to</span></span><br><span class="line">	<span class="comment">// conform to the schema.</span></span><br><span class="line">	<span class="keyword">if</span> (!<span class="variable">$has_trusted_data</span>) &#123;</span><br><span class="line">	  <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;typedConfigManager-&gt;hasConfigSchema(<span class="keyword">$this</span>-&gt;name)) &#123;</span><br><span class="line">	    <span class="comment">// Ensure that the schema wrapper has the latest data.</span></span><br><span class="line">	    <span class="keyword">$this</span>-&gt;schemaWrapper = <span class="literal">NULL</span>;</span><br><span class="line">	    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;data <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">	      <span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>] = <span class="keyword">$this</span>-&gt;castValue(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="keyword">else</span> &#123;</span><br><span class="line">	    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;data <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">	      <span class="keyword">$this</span>-&gt;validateValue(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">$this</span>-&gt;storage-&gt;write(<span class="keyword">$this</span>-&gt;name, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;isNew) &#123;</span><br><span class="line">	  Cache::invalidateTags(<span class="keyword">$this</span>-&gt;getCacheTags());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">$this</span>-&gt;isNew = <span class="literal">FALSE</span>;</span><br><span class="line">	<span class="keyword">$this</span>-&gt;eventDispatcher-&gt;dispatch(ConfigEvents::SAVE, <span class="keyword">new</span> ConfigCrudEvent(<span class="keyword">$this</span>));</span><br><span class="line">	<span class="keyword">$this</span>-&gt;originalData = <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">	<span class="comment">// Potentially configuration schema could have changed the underlying data&#x27;s</span></span><br><span class="line">	<span class="comment">// types.</span></span><br><span class="line">	<span class="keyword">$this</span>-&gt;resetOverriddenData();</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码为Config模块中配置保存的方法，其中的$this-&gt;eventDispatcher-&gt;dispatch(ConfigEvents::SAVE, new ConfigCrudEvent($this))这句代码就是讲事件传递给所有监听了ConfigEvents::SAVE事件的订阅者，当然也包括我们demo模块里面的订阅者。</p>
<p>关于自定义事件的实现请参考<a href="http://www.sitepoint.com/drupal-8-hooks-symfony-event-dispatcher/" title="自定义事件">http://www.sitepoint.com/drupal-8-hooks-symfony-event-dispatcher/</a></p>
<h4 id="6-2、info类钩子的替换与实现"><a href="#6-2、info类钩子的替换与实现" class="headerlink" title="6.2、info类钩子的替换与实现"></a>6.2、info类钩子的替换与实现</h4><p>info类钩子的一个重要应用是web services。在Drupal 7中，内核不带rest，需要第三方模块。而在drupal8中，核心自带rest，除了rest界面管理模块（rest UI）外，不需要第三方模块。</p>
<p>Drupal 7中实现一个web services需要以下几步：</p>
<p>1.下载Services、REST Server、Chaos tools、OAuth Authentication第三方模块放入相应目录，进入后台-&gt;模块，勾选这几个模块保存启用。</p>
<p>2.实现hook_services_resources,代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_services_resources().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo_services_resources</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;demo&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;actions&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;add&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">          <span class="string">&#x27;help&#x27;</span> =&gt; <span class="string">&#x27;创建示例&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;file&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;file&#x27;</span> =&gt; <span class="string">&#x27;inc&#x27;</span>, <span class="string">&#x27;module&#x27;</span> =&gt; <span class="string">&#x27;demo&#x27;</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;demo.apis&#x27;</span>),</span><br><span class="line">          <span class="string">&#x27;callback&#x27;</span> =&gt; <span class="string">&#x27;demo_add_resources&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;access arguments&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;access_to_demo_api&#x27;</span>),</span><br><span class="line">          <span class="string">&#x27;args&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">              <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;data&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;source&#x27;</span> =&gt; <span class="string">&#x27;data&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;optional&#x27;</span> =&gt; <span class="literal">FALSE</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),           </span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中数组的第一层表示接口地址的第一个参数，actions下的每一个键表示一个接口，同时也是接口地址的第二个参数，例如上面的例子表示demo/add接口，callback表示接口的处理函数。file表示接口方法所在的文件。</p>
<p>接下来，我们就要实现demo_add_resources方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo_add_resources</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$return</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;code&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;操作失败&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后我们要进入系统管理界面-》结构-》services添加一个端点，我们将机读名称设置为api，服务器选择rest，端点路径设为API，保存，则端点新建成功。点击编辑，将我们刚才新建的接口勾选，保存。这时，接口就发布成功，访问路径为API/demo/add。</p>
<p>Drupal 8中，web services用插件的形式实现，具体步骤：</p>
<p>1.下载rest UI第三方模块，放入相应目录，进入后台-》扩展，勾选rest UI、RESTful Web Services、Serialization、HAL、HTTP Basic Authentication，保存。</p>
<p>2.新建一个自定义的反序列化类。因为Drupal 8 在处理web service的请求时，首先将接收的数据反序列化为某个类，然后处理数据，最后将返回值序列化为json或者xml等数据返回给客户端。所以必须要有反序列化和序列化的类。但是Drupal 8核心中的反序列化类只支持将数据反序列化为entity，这样，对于写接口会非常不便，比如，某个API传递的参数可能并不能和某个entity对应，这样这个接口就没法实现，所以必须要自定义一个反序列化的类，比如可以将数据反序列化为数组。代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\demo\Normalizer\CustomNormalizer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>\<span class="title">Normalizer</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomNormalizer</span> <span class="keyword">extends</span> <span class="title">AbstractNormalizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">supportsNormalization</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$format</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">normalize</span>(<span class="params"><span class="variable">$object</span>, <span class="variable">$format</span> = <span class="literal">null</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">supportsDenormalization</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$type</span>, <span class="variable">$format</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$type</span> == <span class="string">&#x27;Array&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">denormalize</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$class</span>, <span class="variable">$format</span> = <span class="literal">null</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable">$array</span> = (<span class="keyword">array</span>) <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现上述类之后，我们需要将该类定义为service，在demo.services.yml中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">demo.normalizer.custom:</span><br><span class="line">  class: Drupal\demo\Normalizer\CustomNormalizer</span><br><span class="line">  tags:</span><br><span class="line">    - &#123; name: normalizer &#125;</span><br></pre></td></tr></table></figure>

<p>接下来，再实现插件，插件其实是一个类，该类继承自该种插件的基类，并且需要用注解表明该类的插件性质。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * Contains \Drupal\demo\Plugin\rest\resource\ExampleResource</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Drupal</span>\<span class="title">demo</span>\<span class="title">Plugin</span>\<span class="title">rest</span>\<span class="title">resource</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">rest</span>\<span class="title">Plugin</span>\<span class="title">ResourceBase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Drupal</span>\<span class="title">rest</span>\<span class="title">ResourceResponse</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents demo as resources.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RestResource</span>(</span></span><br><span class="line"><span class="comment"> *   id = &quot;demo&quot;,</span></span><br><span class="line"><span class="comment"> *   label = <span class="doctag">@Translation</span>(&quot;Demo Resource&quot;),</span></span><br><span class="line"><span class="comment"> *   serialization_class = &quot;Array&quot;,</span></span><br><span class="line"><span class="comment"> *   uri_paths = &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;canonical&quot; = &quot;/API/demo&quot;,</span></span><br><span class="line"><span class="comment"> *     </span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleResource</span> <span class="keyword">extends</span> <span class="title">ResourceBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Responds to GET requests.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> array $data</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> Symfony\Component\HttpFoundation\Request $request</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> \Drupal\rest\ResourceResponse</span></span><br><span class="line"><span class="comment">   *   The response containing the entity with its accessible fields.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$data</span>, Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$logger</span> = \Drupal::logger(<span class="string">&#x27;rest_get&#x27;</span>);</span><br><span class="line">    <span class="variable">$logger</span>-&gt;notice(<span class="variable">$request</span>-&gt;get(<span class="string">&#x27;sid&#x27;</span>));</span><br><span class="line">    <span class="variable">$return</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;code&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">      <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;这是get方法&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">new</span> ResourceResponse(<span class="variable">$return</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Responds to POST requests.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> array $data</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> Symfony\Component\HttpFoundation\Request $request</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> \Drupal\rest\ResourceResponse</span></span><br><span class="line"><span class="comment">   *   The response containing the entity with its accessible fields.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params"><span class="variable">$data</span>, Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$logger</span> = \Drupal::logger(<span class="string">&#x27;rest_post&#x27;</span>);</span><br><span class="line">    <span class="variable">$logger</span>-&gt;notice(<span class="string">&#x27;&lt;pre&gt;&#x27;</span> . print_r(<span class="variable">$data</span>, <span class="literal">TRUE</span>). <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>);</span><br><span class="line">    <span class="variable">$return</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;code&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">      <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;这是post方法&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;data&#x27;</span> =&gt; <span class="variable">$data</span></span><br><span class="line">    );</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">new</span> ResourceResponse(<span class="variable">$return</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Responds to DELETE requests.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> array $data</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> Symfony\Component\HttpFoundation\Request $request</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> \Drupal\rest\ResourceResponse</span></span><br><span class="line"><span class="comment">   *   The response containing the entity with its accessible fields.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params"><span class="variable">$data</span>, Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$logger</span> = \Drupal::logger(<span class="string">&#x27;rest_delete&#x27;</span>);</span><br><span class="line">    <span class="variable">$logger</span>-&gt;notice(<span class="string">&#x27;&lt;pre&gt;&#x27;</span> . print_r(<span class="variable">$data</span>, <span class="literal">TRUE</span>). <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>);</span><br><span class="line">    <span class="variable">$return</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;code&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">      <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;这是delete方法&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;data&#x27;</span> =&gt; <span class="variable">$data</span></span><br><span class="line">    );</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">new</span> ResourceResponse(<span class="variable">$return</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面我们来分析一下上述代码，</p>
<p>1.@RestResource注解表示该类是RestResource类型的插件，也就是该类实现rest web services；</p>
<p>2.注解中的ID是该插件的ID，label是插件的名称；</p>
<p>3.serialization_class就是序列化和反序列化的类，我们这里设置为“Array”，则代码会自动调用我们的自定义的反序列化类来反序列化数据；</p>
<p>4.”canonical” = “/API/demo”表示api的路径是/API/demo；”<a href="https://www.drupal.org/link-relations/create&quot;">https://www.drupal.org/link-relations/create&quot;</a> = “/API/demo”，表示POST方法提交时的路径，当用POST方法提交时，会覆盖canonical指定路径。</p>
<p>这个web services插件内部实现了三个方法，get、post、delete，分别对应以get方法、post方法和delete方法提交的处理方法。换句话说，如果我以get方法访问API/demo，则调用get，以post方法访问API/demo，则调用post，以delete方法访问API/demo则调用delete。</p>
<p>到目前为止，我们的代码就全部写完，要使用该API，需要进入后台-》配置-》rest，启用这个api，您可以选择性的启用get、post和delete方法，同时选择请求和返回的数据格式，比如hal_json、json、xml，点击保存后，您就可以访问该api了。</p>
<h3 id="7、Drupal-8中的新增机制"><a href="#7、Drupal-8中的新增机制" class="headerlink" title="7、Drupal 8中的新增机制"></a>7、Drupal 8中的新增机制</h3><p>Drupal 8采用了面向对象的方法，自然也会引入很多面向对象的新特性，比如依赖注入、服务容器，本文只是提出这些新特性，更深入的介绍请参考相应的文章。</p>
<ol>
<li>依赖注入和服务容器，请参考<a href="http://verynull.com/2015/12/15/Drupal8-Service-DependencyInjection/" title="依赖注入和服务容器">http://verynull.com/2015/12/15/Drupal8-Service-DependencyInjection/</a></li>
<li>注解，请参考<a href="http://verynull.com/2015/12/12/Drupal8%E6%B3%A8%E8%A7%A3-Annotations-%E8%AF%AD%E6%B3%95/" title="注解">http://verynull.com/2015/12/12/Drupal8注解-Annotations-语法/</a></li>
<li>content entity，请参考<a href="http://verynull.com/2015/12/22/Drupal8-Content-Entity/" title="content entity">http://verynull.com/2015/12/22/Drupal8-Content-Entity/</a></li>
<li>configuration entity，请参考<a href="http://verynull.com/2015/12/21/Drupal8-configuration-Entity/" title="Configuration Entity">http://verynull.com/2015/12/21/Drupal8-configuration-Entity/</a></li>
</ol>
<p>参考文献</p>
<ol>
<li><a href="http://drupalchina.cn/node/3122">http://drupalchina.cn/node/3122</a></li>
<li><a href="https://www.drupal.org/node/2216195">https://www.drupal.org/node/2216195</a></li>
<li><a href="https://drupalize.me/blog/201409/unravelling-drupal-8-plugin-system">https://drupalize.me/blog/201409/unravelling-drupal-8-plugin-system</a></li>
<li><a href="http://www.sitepoint.com/drupal-8-hooks-symfony-event-dispatcher/">http://www.sitepoint.com/drupal-8-hooks-symfony-event-dispatcher/</a></li>
<li><a href="http://drupalchina.cn/node/3353">http://drupalchina.cn/node/3353</a></li>
<li><a href="https://dev.acquia.com/blog/introduction-restful-web-services-drupal-8">https://dev.acquia.com/blog/introduction-restful-web-services-drupal-8</a></li>
</ol>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>drupal8</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal8面向对象(OOP)</title>
    <url>/2015/11/16/Drupal8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-OOP/</url>
    <content><![CDATA[<p>这是学习Drupal8的系列的开篇文章，在这里我们将介绍和探讨Drupal OOP。<br>OOP的最大优势就是解耦，Drupal8中使用大量的OOP(interface, class, etc…)，这里仅对Drupal中常见的一些概念做一下介绍。</p>
<p>###一、数据类型<br>什么是对象？我们先来看字符串，一个字符串就是一个数据类型，可以改变或获取字符串的一些信息，如要获取长度，我们一般是用strlen()函数。<br>但是对于其他的数据类型，如整形(int)等，这种方式就不适用。</p>
<p>而OOP的优势在于，它允许你自定义数据类型。这些数据类型也称之为”类”，在类中包含一些内部结构，如:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">// 下面是人的成员属性</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$name</span>; <span class="comment">// 人的名子</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$sex</span>; <span class="comment">// 人的性别</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$age</span>; <span class="comment">// 人的年龄</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$sex</span>, <span class="variable">$age</span></span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">  	<span class="keyword">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">  	<span class="keyword">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPerson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name . <span class="string">&#x27;，性别：&#x27;</span> . <span class="keyword">$this</span>-&gt;sex . <span class="string">&#x27;，年龄：&#x27;</span> . <span class="keyword">$this</span>-&gt;age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码定义了一个名叫Person的类，包含三个属性$name, $sex, $age，也包含2个方法。实例化如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="string">&#x27;王鹏&#x27;</span>;</span><br><span class="line"><span class="variable">$sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="variable">$age</span> = <span class="number">30</span>;</span><br><span class="line"><span class="variable">$myperson</span> = <span class="keyword">new</span> Person(<span class="variable">$name</span>, <span class="variable">$sex</span>, <span class="variable">$age</span>);</span><br></pre></td></tr></table></figure>
<p>$myperson现在就是一个对象实例。对于Drupal来说，类和对象的关系就类似内容类型和内容之间的关系。</p>
<p>###二、类的结构(class)<br>类的概念：类是具有相同属性和服务的一组对象的集合。它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和服务两个主要部分。在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性说明和服务说明两个主要部分。</p>
<p>这段文字是摘抄自google，比较晦涩难懂。<br>简单说，方法是可以在对象上执行的操作。比如在Person类，我们有一个方法叫getPerson()，我们可以通过引用对象调用TA。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$person</span> = <span class="variable">$myperson</span>-&gt;getPerson();</span><br></pre></td></tr></table></figure>
<p>当然，我们不能用$myperson-&gt;name或$myperson-&gt;sex来引用这些属性。我们先来看一些关键词public、protected，他们定义了方法或者属性的可见性。public方法或者属性可以外部访问调用，如getPerson()。但是protected仅限于在类或子类的内部调用。而private就只能在类自己内部调用，而不能在它的子类中。</p>
<p>Drupal中一般声明属性protected,方法声明为public或protected，private一般不赞成使用。</p>
<p>###三、接口(interface)<br>接口是一种特殊的抽象类，抽象类又是一种特殊的类，所以接口也是一种特殊的类，为 什么说接口是一种特殊的抽象类呢？如果一个抽象类里面的所有的方法都是抽象方法，那么我们就换一种声明方法使用“接口”；也就是说接口里面所有的方法必须 都是声明为抽象方法，另外接口里面不能声明变量(但可声明常量constant)，而且接口里面所有的成员都是public权限的。所以子类在实现的时候 也一定要使用public权限实限。</p>
<p>在类中，Person定义的对象大抵是这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPerson</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那如何定义接口呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonInterface</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPerson</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">PersonInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> __construct(<span class="variable">$name</span>, <span class="variable">$sex</span>, <span class="variable">$age</span>);</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPerson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">/*..........*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就像用户界面定义了人和程序如何交互，而接口定义了方法和对象的交互过程。当然你不能创建一个接口对象，而必须一个接口类。</p>
<p>说简单点。就是—接口定义了方法，类实现了方法。</p>
<p>###四、构造方法(constructor)<br>我们再来看Person类中的方法__construct()，它是用两个下划线作为前缀。这是PHP5中引入的。当创建一个对象的时候，会自动调用构造函数，也就是用new这个关键字实例化对象的时候自动调用构造函数。<br>在一个类中只能声明一个构造方法，而是只有在每次创建对象的时候都会去调用一次构造方法，不能主动的调用这个方法，所以通常用它执行一些有用的初始化任务。比如对成属性在创建对象的时候赋初值。如我们上面的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myperson</span> = <span class="keyword">new</span> Person(<span class="variable">$name</span>, <span class="variable">$sex</span>, <span class="variable">$age</span>);</span><br></pre></td></tr></table></figure>
<p>它是如何执行的呢？<br>1、在内存中创建一个Person对象<br>2、用new关键字调用__construct方法<br>3、把Person对象复制给$this属性<br>4、创建一个名为$myperson的变量，他并不是一个对象，他用来处理对象<br>5、把$myperson指向内存中的Person对象</p>
<p>注意：不要在接口中定义构造方法，这样会导致代码逻辑混乱！</p>
<p>###五、继承(inherit)<br>继承是OOP的一个重要的特性，继承是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$sex</span>, <span class="variable">$age</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$mystudent</span> = <span class="keyword">new</span> Student(<span class="variable">$name</span>, <span class="variable">$sex</span>, <span class="variable">$age</span>);</span><br></pre></td></tr></table></figure>
<p>这里声明了Student类是Person的子类，我们这里没有定义getPerson方法，这意味着这个方法继承自Person类，如$mystudent-&gt;getPerson()和$mypeson-&gt;getPerson()执行的结果是一样的。我们这里也没有定义$name, $sex, $age这些属性，他们也是继承自Person父类。</p>
<p>在C++语言中，一个派生类可以从一个基类派生，也可以从多个基类派生。从一个基类派生的继承称为单继承；从多个基类派生的继承称为多继承。</p>
<p>但是在PHP和Java语言里面没有多继承，只有单继承，也就是说，一个类只能直接从一个类中继承数据， 这就是我们所说的单继承。</p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>oop</tag>
      </tags>
  </entry>
  <entry>
    <title>drupal动静分离</title>
    <url>/2015/01/16/Drupal%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_file_url_alter().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modulename_file_url_alter</span>(<span class="params">&amp;<span class="variable">$uri</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$resource_server</span> = variable_get(<span class="string">&#x27;static_server&#x27;</span>, <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">    <span class="variable">$resource_extensions</span> = <span class="keyword">array</span>(<span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>);</span><br><span class="line">    <span class="comment">// Most CDNs don&#x27;t support private file transfers without a lot of hassle,</span></span><br><span class="line">    <span class="comment">// so don&#x27;t support this in the common case.</span></span><br><span class="line">    <span class="variable">$schemes</span> = <span class="keyword">array</span>(<span class="string">&#x27;public&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$scheme</span> = file_uri_scheme(<span class="variable">$uri</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only serve shipped files and public created files from the static_server.</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$scheme</span> || in_array(<span class="variable">$scheme</span>, <span class="variable">$schemes</span>)) &#123;</span><br><span class="line">      <span class="comment">// Shipped files.</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable">$scheme</span>) &#123;</span><br><span class="line">        <span class="variable">$path</span> = <span class="variable">$uri</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Public created files.</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$wrapper</span> = file_stream_wrapper_get_instance_by_scheme(<span class="variable">$scheme</span>);</span><br><span class="line">        <span class="variable">$path</span> = <span class="variable">$wrapper</span>-&gt;getDirectoryPath() . <span class="string">&#x27;/&#x27;</span> . file_uri_target(<span class="variable">$uri</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Clean up Windows paths.</span></span><br><span class="line">      <span class="variable">$path</span> = str_replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Serve files with one of the resource extensions from resource_server </span></span><br><span class="line">      <span class="variable">$pathinfo</span> = pathinfo(<span class="variable">$path</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$pathinfo</span>[<span class="string">&#x27;extension&#x27;</span>]) &amp;&amp; in_array(<span class="variable">$pathinfo</span>[<span class="string">&#x27;extension&#x27;</span>], <span class="variable">$resource_extensions</span>)) &#123;</span><br><span class="line">        <span class="variable">$uri</span> = <span class="variable">$resource_server</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$path</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>动静分离</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal导入翻译</title>
    <url>/2013/12/11/Drupal%E5%AF%BC%E5%85%A5%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<p>有的时候po文件太大，导入的时候会出现503错误。这是因为php请求超时了。还好，有drush,用drush 导入文件非常简单。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">drush dl drush_language</span><br></pre></td></tr></table></figure>

<p>Usage</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">drush language-add &lt;langcode&gt;</span><br><span class="line">&gt; Add <span class="keyword">and</span> import a <span class="keyword">new</span> language definition.</span><br><span class="line">drush language-enable &lt;langcode&gt;</span><br><span class="line">&gt; Enable an existing language.</span><br><span class="line">drush language-disable &lt;langcode&gt;</span><br><span class="line">&gt; Disable an enabled language.</span><br><span class="line">drush language-<span class="keyword">default</span> &lt;langcode&gt;</span><br><span class="line">&gt; Assign an enabled language <span class="keyword">as</span> <span class="keyword">default</span>.</span><br><span class="line">drush language-import &lt;langcode&gt; &lt;file.po&gt; [--replace] [--group=&lt;text-group&gt;]</span><br><span class="line">&gt; Import a .po file to a language.</span><br><span class="line">drush language-export &lt;langcode&gt; &lt;file.po&gt; [--group=&lt;text-group&gt;]</span><br><span class="line">&gt; Export a language to a .po file.</span><br></pre></td></tr></table></figure>

<p>比如导入一个翻译文件，命令如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">drush language-import zh-hans xxxx/drupal-<span class="number">7.22</span>.zh-hans.po </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>drush</tag>
      </tags>
  </entry>
  <entry>
    <title>drupal的.gitignore文件</title>
    <url>/2014/04/16/Drupal%E7%9A%84gitignore%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ignore configuration files that may contain sensitive information.</span></span><br><span class="line"><span class="comment">#sites/*/*settings*.php</span></span><br><span class="line">settings.php</span><br><span class="line"><span class="keyword">default</span>.settings.php</span><br><span class="line"></span><br><span class="line">*~</span><br><span class="line">*.*~</span><br><span class="line">*.lock</span><br><span class="line">*.DS_Store</span><br><span class="line">*.swp</span><br><span class="line">*.out</span><br><span class="line">*.swo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ignore paths that contain generated content.</span></span><br><span class="line">cache/</span><br><span class="line">files/</span><br><span class="line">sites<span class="comment">/*/files</span></span><br><span class="line"><span class="comment">sites/*/</span><span class="keyword">private</span></span><br><span class="line">files/.htaccess</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ignore default text files</span></span><br><span class="line">.htaccess</span><br><span class="line">robots.txt</span><br><span class="line">/CHANGELOG.txt</span><br><span class="line">/COPYRIGHT.txt</span><br><span class="line">/INSTALL*.txt</span><br><span class="line">/LICENSE.txt</span><br><span class="line">/MAINTAINERS.txt</span><br><span class="line">/UPGRADE.txt</span><br><span class="line">/README.txt</span><br><span class="line">sites/all/README.txt</span><br><span class="line">sites/all/modules/README.txt</span><br><span class="line">sites/all/themes/README.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ignore everything but the &quot;sites&quot; folder ( for non core developer )</span></span><br><span class="line">web.config</span><br><span class="line">authorize.php</span><br><span class="line">cron.php</span><br><span class="line">index.php</span><br><span class="line">install.php</span><br><span class="line">update.php</span><br><span class="line">xmlrpc.php</span><br><span class="line">/includes</span><br><span class="line">/misc</span><br><span class="line">/modules</span><br><span class="line">/profiles</span><br><span class="line">/scripts</span><br><span class="line">/themes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>把该文件放在/root/目录下。执行以下命令设置到全局选项里。<br>git config –global core.excludesfile /root/.gitignore</p>
]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>gitignore</tag>
      </tags>
  </entry>
  <entry>
    <title>Drush的安装配置和应用</title>
    <url>/2013/12/11/Drush%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>###安装方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">pear channel-update pear.php.net</span><br><span class="line">pear channel-discover pear.drush.org</span><br><span class="line">pear install drush/drush</span><br></pre></td></tr></table></figure>

<p>用drush help即可查看相关命令。</p>
<p>###经常使用的几个命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">drush cc all: 清除缓存</span><br><span class="line">drush updb: 更新数据库.</span><br><span class="line">drush up或者 drush pm-update更新核心代码或者模块.</span><br><span class="line"></span><br><span class="line">drush up的备份代码默认在 ~/drush-backups </span><br><span class="line">cd  ~/drush-backups 即可看到原来的代码</span><br></pre></td></tr></table></figure>

<p>###打印Drupal函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">drush ev <span class="string">&quot;print_r(module_implements(&#x27;menu&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>

<p>###执行php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">drush php-<span class="keyword">eval</span> <span class="string">&#x27;print_r(file(&quot;/xxxx.log&quot;));&#x27;</span> </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>drush</tag>
      </tags>
  </entry>
  <entry>
    <title>Haproxy web负载均衡</title>
    <url>/2016/02/26/Haproxy-web%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install haproxy</span><br></pre></td></tr></table></figure>

<p>修改日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/rsyslog.conf</span><br></pre></td></tr></table></figure>

<p>这一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#*.info;mail.none;authpriv.none;cron.none                /var/log/messages</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.info;mail.none;authpriv.none;cron.none;local2.none                /var/<span class="built_in">log</span>/messages</span><br></pre></td></tr></table></figure>

<p>再增加一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># haproxy</span></span><br><span class="line">local2.*                                                /var/<span class="built_in">log</span>/haproxy.log</span><br></pre></td></tr></table></figure>

<h3 id="二、haproxy配置详解"><a href="#二、haproxy配置详解" class="headerlink" title="二、haproxy配置详解"></a>二、haproxy配置详解</h3><p>HAProxy配置中分五大部分：<br>global：全局配置参数，进程级的，用来控制Haproxy启动前的一些进程及系统设置<br>defaults：配置一些默认的参数，可以被frontend，backend，listen段继承使用<br>frontend：用来匹配接收客户所请求的域名，uri等，并针对不同的匹配，做不同的请求处理<br>backend：定义后端服务器集群，以及对后端服务器的一些权重、队列、连接数等选项的设置，我将其理解为Nginx中的upstream块<br>listen：frontend和backend的组合体</p>
<p>配置案例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global   <span class="comment"># 全局参数的设置 </span></span><br><span class="line">     <span class="built_in">log</span> 127.0.0.1 local0 info </span><br><span class="line">     <span class="comment"># log语法：log [max_level_1] </span></span><br><span class="line">     <span class="comment"># 全局的日志配置，使用log关键字，指定使用127.0.0.1上的syslog服务中的local0日志设备，</span></span><br><span class="line">     记录日志等级为info的日志 </span><br><span class="line">     user haproxy </span><br><span class="line">     group haproxy </span><br><span class="line">     <span class="comment"># 设置运行haproxy的用户和组，也可使用uid，gid关键字替代之 </span></span><br><span class="line">     daemon </span><br><span class="line">     <span class="comment"># 以守护进程的方式运行 </span></span><br><span class="line">     nbproc 16</span><br><span class="line">     <span class="comment"># 设置haproxy启动时的进程数，根据官方文档的解释，我将其理解为：该值的设置应该和服务</span></span><br><span class="line">     <span class="comment">#器的CPU核心数一致，即常见的2颗8核心CPU的服务器，即共有16核心，则可以将其值设置为：</span></span><br><span class="line">     <span class="comment">#&lt;=16 ，创建多个进程数，可以减少每个进程的任务队列，但是过多的进程数也可能会导致进程</span></span><br><span class="line">     <span class="comment">#的崩溃。这里我设置为16 </span></span><br><span class="line">     maxconn 4096 </span><br><span class="line">     <span class="comment"># 定义每个haproxy进程的最大连接数 ，由于每个连接包括一个客户端和一个服务器端，所以单</span></span><br><span class="line">     <span class="comment">#个进程的TCP会话最大数目将是该值的两倍。 </span></span><br><span class="line">     <span class="comment">#ulimit -n 65536 </span></span><br><span class="line">     <span class="comment"># 设置最大打开的文件描述符数，在1.4的官方文档中提示，该值会自动计算，所以不建议进行</span></span><br><span class="line">     <span class="comment">#设置 </span></span><br><span class="line">     pidfile /var/run/haproxy.pid </span><br><span class="line">     <span class="comment"># 定义haproxy的pid</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">defaults <span class="comment"># 默认部分的定义</span></span><br><span class="line">     mode http</span><br><span class="line">     <span class="comment"># mode语法：mode &#123;http|tcp|health&#125; 。http是七层模式，tcp是四层模式，health是健康检测</span></span><br><span class="line">     <span class="comment">#，返回OK</span></span><br><span class="line">     <span class="built_in">log</span> 127.0.0.1 local2 err</span><br><span class="line">     <span class="comment"># 使用127.0.0.1上的syslog服务的local3设备记录错误信息</span></span><br><span class="line">     retries 3</span><br><span class="line">     <span class="comment"># 定义连接后端服务器的失败重连次数，连接失败次数超过此值后将会将对应后端服务器标记为</span></span><br><span class="line">     <span class="comment">#不可用</span></span><br><span class="line">		 option http-server-close</span><br><span class="line">		 <span class="comment"># 打开http协议中服务器端关闭功能，使得支持长连接，使得会话可以被重用，使得每一个日志记录都会被记录。</span></span><br><span class="line">		 option forwardfor except 127.0.0.0/8</span><br><span class="line">		 <span class="comment"># 如果上游服务器上的应用程序想记录客户端的真实IP地址，haproxy会把客户端的IP信息发送给上游服务器，在HTTP请求中添加”X-Forwarded-For”字段,但当是haproxy自身的健康检测机制去访问上游服务器时是不应该把这样的访问日志记录到日志中的，所以用except来排除127.0.0.0，即haproxy身。</span></span><br><span class="line"></span><br><span class="line">     option httplog</span><br><span class="line">     <span class="comment"># 启用日志记录HTTP请求，默认haproxy日志记录是不记录HTTP请求的，只记录“时间[Jan 5 13</span></span><br><span class="line">     <span class="comment">#:23:46] 日志服务器[127.0.0.1] 实例名已经pid[haproxy[25218]] 信息[Proxy http_80_in s</span></span><br><span class="line">     <span class="comment">#topped.]”，日志格式很简单。</span></span><br><span class="line">     option redispatch</span><br><span class="line">     <span class="comment"># 当使用了cookie时，haproxy将会将其请求的后端服务器的serverID插入到cookie中，以保证</span></span><br><span class="line">     <span class="comment">#会话的SESSION持久性；而此时，如果后端的服务器宕掉了，但是客户端的cookie是不会刷新的</span></span><br><span class="line">     <span class="comment">#，如果设置此参数，将会将客户的请求强制定向到另外一个后端server上，以保证服务的正常</span></span><br><span class="line">     option abortonclose</span><br><span class="line">     <span class="comment"># 当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接</span></span><br><span class="line">     option dontlognull</span><br><span class="line">     <span class="comment"># 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器或者监控系统为了</span></span><br><span class="line">     <span class="comment">#探测该服务是否存活可用时，需要定期的连接或者获取某一固定的组件或页面，或者探测扫描</span></span><br><span class="line">     <span class="comment">#端口是否在监听或开放等动作被称为空连接；官方文档中标注，如果该服务上游没有其他的负</span></span><br><span class="line">     <span class="comment">#载均衡器的话，建议不要使用该参数，因为互联网上的恶意扫描或其他动作就不会被记录下来</span></span><br><span class="line">     option httpclose</span><br><span class="line">     <span class="comment"># 这个参数我是这样理解的：使用该参数，每处理完一个request时，haproxy都会去检查http头</span></span><br><span class="line">     <span class="comment">#中的Connection的值，如果该值不是close，haproxy将会将其***，如果该值为空将会添加为：</span></span><br><span class="line">     <span class="comment">#Connection: close。使每个客户端和服务器端在完成一次传输后都会主动关闭TCP连接。与该</span></span><br><span class="line">     <span class="comment">#参数类似的另外一个参数是“option forceclose”，该参数的作用是强制关闭对外的服务通道</span></span><br><span class="line">     <span class="comment">#，因为有的服务器端收到Connection: close时，也不会自动关闭TCP连接，如果客户端也不关</span></span><br><span class="line">     <span class="comment">#闭，连接就会一直处于打开，直到超时。</span></span><br><span class="line">		timeout http-request 10s</span><br><span class="line">		<span class="comment"># 客户端发送http请求的超时时间。</span></span><br><span class="line">		timeout queue 1m</span><br><span class="line">		<span class="comment"># 当上游服务器在高负载响应haproxy时，会把haproxy发送来的请求放进一个队列中，timeout queue定义放入这个队列的超时时间。</span></span><br><span class="line">		timeout connect 5s</span><br><span class="line">		<span class="comment"># haproxy与后端服务器连接超时时间，如果在同一个局域网可设置较小的时间。</span></span><br><span class="line">		timeout client 1m</span><br><span class="line">		<span class="comment"># 定义客户端与haproxy连接后，数据传输完毕，不再有数据传输，即非活动连接的超时时间。</span></span><br><span class="line">		timeout server 1m</span><br><span class="line">		<span class="comment"># 定义haproxy与上游服务器非活动连接的超时时间。</span></span><br><span class="line">		timeout http-keep-alive 10s</span><br><span class="line">		<span class="comment"># 设置新的http请求连接建立的最大超时时间，时间较短时可以尽快释放出资源，节约资源。</span></span><br><span class="line">		timeout check 10s</span><br><span class="line">		<span class="comment"># 健康检测的时间的最大超时时间。</span></span><br><span class="line">     contimeout 5000</span><br><span class="line">     <span class="comment"># 设置成功连接到一台服务器的最长等待时间，默认单位是毫秒，新版本的haproxy使用timeout</span></span><br><span class="line">     <span class="comment">#connect替代，该参数向后兼容</span></span><br><span class="line">     clitimeout 3000</span><br><span class="line">     <span class="comment"># 设置连接客户端发送数据时的成功连接最长等待时间，默认单位是毫秒，新版本haproxy使用</span></span><br><span class="line">     <span class="comment">#timeout client替代。该参数向后兼容</span></span><br><span class="line">     srvtimeout 3000</span><br><span class="line">     <span class="comment"># 设置服务器端回应客户度数据发送的最长等待时间，默认单位是毫秒，新版本haproxy使用</span></span><br><span class="line">     <span class="comment">#timeout server替代。该参数向后兼容</span></span><br><span class="line">      </span><br><span class="line">listen status </span><br><span class="line">     <span class="comment"># 定义一个名为status的部分，可以在listen指令指定的区域中定义匹配规则和后端服务器ip，</span></span><br><span class="line">     <span class="comment">#相当于需要在其中配置frontend，backend的功能。一般做tcp转发比较合适，不用太多的规则</span></span><br><span class="line">     <span class="comment">#匹配。</span></span><br><span class="line">     <span class="built_in">bind</span> 0.0.0.0:1080</span><br><span class="line">     <span class="comment"># 定义监听的套接字</span></span><br><span class="line">     mode http</span><br><span class="line">     <span class="comment"># 定义为HTTP模式</span></span><br><span class="line">     <span class="built_in">log</span> global</span><br><span class="line">     <span class="comment"># 继承global中log的定义</span></span><br><span class="line">     stats refresh 30s</span><br><span class="line">     <span class="comment"># stats是haproxy的一个统计页面的套接字，该参数设置统计页面的刷新间隔为30s</span></span><br><span class="line">     stats uri /admin?stats</span><br><span class="line">     <span class="comment"># 设置统计页面的uri为/admin?stats</span></span><br><span class="line">     stats realm Private lands</span><br><span class="line">     <span class="comment"># 设置统计页面认证时的提示内容</span></span><br><span class="line">     stats auth admin:password</span><br><span class="line">     <span class="comment"># 设置统计页面认证的用户和密码，如果要设置多个，另起一行写入即可</span></span><br><span class="line">     stats hide-version</span><br><span class="line">     <span class="comment"># 隐藏统计页面上的haproxy版本信息</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">frontend http_80_in <span class="comment"># 定义一个名为http_80_in的前端部分，haproxy会监听bind的端口</span></span><br><span class="line">     <span class="built_in">bind</span> 0.0.0.0:80</span><br><span class="line">     <span class="comment"># http_80_in定义前端部分监听的套接字</span></span><br><span class="line">     mode http</span><br><span class="line">     <span class="comment"># 定义为HTTP模式</span></span><br><span class="line">     <span class="built_in">log</span> global</span><br><span class="line">     <span class="comment"># 继承global中log的定义</span></span><br><span class="line">     option forwardfor</span><br><span class="line">     <span class="comment"># 启用X-Forwarded-For，在requests头部插入客户端IP发送给后端的server，使后端server获</span></span><br><span class="line">     <span class="comment">#取到客户端的真实IP</span></span><br><span class="line">     acl static_down nbsrv(static_server) lt 1</span><br><span class="line">     <span class="comment"># 定义一个名叫static_down的acl，当backend static_sever中存活机器数小于1时会被匹配到</span></span><br><span class="line">     acl php_web url_reg /*.php$</span><br><span class="line">     <span class="comment">#acl php_web path_end .php</span></span><br><span class="line">     <span class="comment"># 定义一个名叫php_web的acl，当请求的url末尾是以.php结尾的，将会被匹配到，上面两种写</span></span><br><span class="line">     <span class="comment">#法任选其一</span></span><br><span class="line">     acl static_web url_reg /*.(css|jpg|png|jpeg|js|gif)$</span><br><span class="line">     <span class="comment">#acl static_web path_end .gif .png .jpg .css .js .jpeg</span></span><br><span class="line">     <span class="comment"># 定义一个名叫static_web的acl，当请求的url末尾是以.css、.jpg、.png、.jpeg、.js、.gif</span></span><br><span class="line">     <span class="comment">#结尾的，将会被匹配到，上面两种写法任选其一</span></span><br><span class="line">     use_backend php_server <span class="keyword">if</span> static_down</span><br><span class="line">     <span class="comment"># 如果满足策略static_down时，就将请求交予backend php_server</span></span><br><span class="line">     use_backend php_server <span class="keyword">if</span> php_web</span><br><span class="line">     <span class="comment"># 如果满足策略php_web时，就将请求交予backend php_server</span></span><br><span class="line">     use_backend static_server <span class="keyword">if</span> static_web</span><br><span class="line">     <span class="comment"># 如果满足策略static_web时，就将请求交予backend static_server</span></span><br><span class="line">     default_backend             defaultbackserver</span><br><span class="line">     <span class="comment">#如果acl全部不满足，启用默认后端的地址池</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">backend php_server <span class="comment">#定义一个名为php_server的后端部分，frontend定义的请求会到到这里处理</span></span><br><span class="line">     mode http</span><br><span class="line">     <span class="comment"># 设置为http模式</span></span><br><span class="line">     balance <span class="built_in">source</span></span><br><span class="line">     <span class="comment"># 设置haproxy的调度算法为源地址hash</span></span><br><span class="line">     cookie SERVERID</span><br><span class="line">     <span class="comment"># 允许向cookie插入SERVERID，每台服务器的SERVERID可在下面使用cookie关键字定义</span></span><br><span class="line">     option httpchk GET /<span class="built_in">test</span>/index.php</span><br><span class="line">     <span class="comment"># 开启对后端服务器的健康检测，通过GET /test/index.php来判断后端服务器的健康情况</span></span><br><span class="line">     server php_server_1 10.12.25.68:80 cookie 1 check inter 2000 rise 3 fall 3 weight 2</span><br><span class="line">     server php_server_2 10.12.25.72:80 cookie 2 check inter 2000 rise 3 fall 3 weight 1</span><br><span class="line">     server php_server_bak 10.12.25.79:80 cookie 3 check inter 1500 rise 3 fall 3 backup</span><br><span class="line">     <span class="comment"># server语法：server [:port] [param*]</span></span><br><span class="line">     <span class="comment"># 使用server关键字来设置后端服务器；为后端服务器所设置的内部名称[php_server_1]，该名</span></span><br><span class="line">     <span class="comment">#称将会呈现在日志或警报中、后端服务器的IP地址，支持端口映射[10.12.25.68:80]、指定该</span></span><br><span class="line">     <span class="comment">#服务器的SERVERID为1[cookie 1]、接受健康监测[check]、监测的间隔时长，单位毫秒[inter </span></span><br><span class="line">     <span class="comment">#2000]、监测正常多少次后被认为后端服务器是可用的[rise 3]、监测失败多少次后被认为后端</span></span><br><span class="line">     <span class="comment">#服务器是不可用的[fall 3]、分发的权重[weight 2]、最为备份用的后端服务器，当正常的服</span></span><br><span class="line">     <span class="comment">#务器全部都宕机后，才会启用备份服务器[backup]</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">backend static_server</span><br><span class="line">     mode http</span><br><span class="line">     option httpchk GET /<span class="built_in">test</span>/index.html</span><br><span class="line">     server static_server_1 10.12.25.83:80 cookie 3 check inter 2000 rise 3 fall 3</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"> 官方配置：</span><br><span class="line"> http://haproxy.1wt.eu/download/1.4/doc/configuration.txt</span><br></pre></td></tr></table></figure>

<h3 id="三、haproxy实现持久连接"><a href="#三、haproxy实现持久连接" class="headerlink" title="三、haproxy实现持久连接"></a>三、haproxy实现持久连接</h3><p>1、调度算法source<br>haroxy 将用户IP经过hash计算后 指定到固定的真实服务器上（类似于nginx 的IP hash 指令）<br>配置指令        balance source<br>2、cookie 识别<br>haproxy 将WEB服务端发送给客户端的cookie中插入(或添加加前缀)haproxy定义的后端的服务器COOKIE ID。<br>配置指令例举  cookie  SESSION_COOKIE  insert indirect nocache<br>3、session 识别<br>haproxy 将后端服务器产生的session和后端服务器标识存在haproxy中的一张表里。客户端请求时先查询这张表。然后根据session分配后端server。<br>配置指令：appsession <cookie> len <length> timeout <holdtime></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>haproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS 查看网络端口情况</title>
    <url>/2016/06/27/MacOS-%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C%E7%AB%AF%E5%8F%A3%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<p>###查看端口是否打开</p>
<p>####使用 netstat 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a. `netstat -nat | grep &lt;端口号&gt;`  , 如命令 `netstat -nat | grep 3306`</span><br><span class="line">b. `netstat -nat |grep LISTEN`</span><br></pre></td></tr></table></figure>

<p>####使用 lsof 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yongfu-pro at yongfu-pro.local in ~ [22:39:32]</span></span><br><span class="line">$ lsof -n -P -i TCP -s TCP:LISTEN</span><br><span class="line">COMMAND PID       USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">php-fpm 387 yongfu-pro    6u  IPv4 0x6d7f5d3c3a615679      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">Dropbox 413 yongfu-pro   26u  IPv4 0x6d7f5d3c445e2c09      0t0  TCP *:17500 (LISTEN)</span><br><span class="line">php-fpm 418 yongfu-pro    0u  IPv4 0x6d7f5d3c3a615679      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm 419 yongfu-pro    0u  IPv4 0x6d7f5d3c3a615679      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm 420 yongfu-pro    0u  IPv4 0x6d7f5d3c3a615679      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">stunnel 586 yongfu-pro    9u  IPv4 0x6d7f5d3c439ff679      0t0  TCP 127.0.0.1:1997 (LISTEN)</span><br><span class="line"></span><br><span class="line">lsof命令可以列出当前的所有网络情况， 此命令的解释如下：</span><br><span class="line">-n 表示主机以ip地址显示</span><br><span class="line">-P 表示端口以数字形式显示，默认为端口名称</span><br><span class="line">-i 意义较多，具体 man lsof, 主要是用来过滤lsof的输出结果</span><br><span class="line">-s 和 -i 配合使用，用于过滤输出</span><br></pre></td></tr></table></figure>

<p>####使用telnet 命令</p>
<p>检查本机的3306端口是否打开， 如下<br>telnet 127.0.0.1 3306<br>若该端口没有打开，则会自动退出，并显示如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Trying 127.0.0.1...</span><br><span class="line">telnet: connect to address 127.0.0.1: Connection refused</span><br><span class="line">telnet: Unable to connect to remote host</span><br></pre></td></tr></table></figure>
<p>若该端口为已打开的状态，则会一直保持连接。</p>
<p>####使用 nc 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yongfu at yf-mac.local in ~ [9:33:14]</span></span><br><span class="line">$ nc  -w 10 -n -z 127.0.0.1 1990-1999</span><br><span class="line">Connection to 127.0.0.1 port 1997 [tcp/*] succeeded!</span><br><span class="line">Connection to 127.0.0.1 port 1998 [tcp/*] succeeded!</span><br><span class="line"></span><br><span class="line">-w 10  表示等待连接时间为10秒</span><br><span class="line">-n 尽量将端口号名称转换为端口号数字</span><br><span class="line">-z 对需要检查的端口没有输入输出，用于端口扫描模式</span><br><span class="line">127.0.0.1  需要检查的ip地址</span><br><span class="line">1990-1999  可以是一个端口，也可以是一段端口</span><br><span class="line"> 返回结果为开放的端口， 如本例中的 1997 和 1998 端口</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>netstat</tag>
      </tags>
  </entry>
  <entry>
    <title>Mariadb ColumnStore数据库测试</title>
    <url>/2016/12/20/Mariadb-ColumnStore%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>顾名思义，就是Mariadb为了大数据而开发的列式数据库。后来发现，这货就是InfiniDB的翻版，InfiniDB被MariaDB收购了以后重新开发的新版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show engines;</span><br><span class="line">+--------------------+---------+--------------------------------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                                                          | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+--------------------------------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Columnstore        | YES     | Columnstore storage engine                                                                       | YES          | NO   | NO         |</span><br><span class="line">| MRG_MyISAM         | YES     | Collection of identical MyISAM tables                                                            | NO           | NO   | NO         |</span><br><span class="line">| CSV                | YES     | CSV storage engine                                                                               | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                                                            | NO           | NO   | NO         |</span><br><span class="line">| MEMORY             | YES     | Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables                                        | NO           | NO   | NO         |</span><br><span class="line">| InfiniDB           | YES     | Columnstore storage engine (deprecated: use columnstore)                                         | YES          | NO   | NO         |</span><br><span class="line">| InnoDB             | DEFAULT | Percona-XtraDB, Supports transactions, row-level locking, foreign keys and encryption <span class="keyword">for</span> tables | YES          | YES  | YES        |</span><br><span class="line">| SEQUENCE           | YES     | Generated tables filled with sequential values                                                   | YES          | NO   | YES        |</span><br><span class="line">| Aria               | YES     | Crash-safe tables with MyISAM heritage                                                           | NO           | NO   | NO         |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                                                               | NO           | NO   | NO         |</span><br><span class="line">+--------------------+---------+--------------------------------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>还能看到InfiniDB引擎的影子。</p>
<p>测试环境：<br>centos 6.6 8核8G<br>ssd 100G<br>mariadb columnstore 1.0.6 GA</p>
<p>1、安装</p>
<p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install expect perl perl-DBI openssl zlib perl-DBD-MySQL cmake</span></span><br></pre></td></tr></table></figure>

<p>必须要boost1.50以上版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://static.verycloud.cn/rpm/boost_1_55_0.tgz</span></span><br><span class="line"><span class="comment"># wget https://static.verycloud.cn/rpm/mariadb-columnstore-1.0.6-1-centos6.x86_64.rpm.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>安装boost.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar -zxvf boost_1_55_0.tgz</span></span><br><span class="line"><span class="comment"># tar -zxvf mariadb-columnstore-1.0.6-1-centos6.x86_64.rpm.tar.gz</span></span><br><span class="line"><span class="comment"># cd boost_1_55_0 </span></span><br><span class="line"><span class="comment"># ./bootstrap.sh --with-libraries=atomic,date_time,exception,filesystem,iostreams,locale,program_options,regex,signals,system,test,thread,timer,log --prefix=/usr </span></span><br><span class="line"><span class="comment"># ./b2 install</span></span><br></pre></td></tr></table></figure>

<p>安装mariadb columnstore.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh mariadb-columnstore-1.0.6-1-x86_64-centos6-*</span></span><br></pre></td></tr></table></figure>

<p>2、初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/mariadb/columnstore/bin/post-install</span></span><br></pre></td></tr></table></figure>

<p>这时会提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The next step is:</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/mariadb/columnstore/bin/postConfigure</span><br></pre></td></tr></table></figure>

<p>执行，完成安装，选择single server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/mariadb/columnstore/bin/postConfigure</span></span><br></pre></td></tr></table></figure>

<p>生成别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># . /data/mariadb/columnstore/bin/columnstoreAlias</span></span><br></pre></td></tr></table></figure>

<p>执行 mcsmysql，会看到提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 5</span><br><span class="line">Server version: 10.1.19-MariaDB Columnstore 1.0.6-1</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure>

<p>说明安装成功了！</p>
<p>3、数据导入</p>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mcsmysql --local-infile</span></span><br><span class="line"><span class="comment"># LOAD DATA LOCAL INFILE &#x27;/root/data.txt&#x27; INTO TABLE your_table FIELDS TERMINATED BY &#x27;\t&#x27;;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Query OK, 95981370 rows affected (6 min 8.62 sec)    </span><br><span class="line">Records: 95981370  Deleted: 0  Skipped: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>导入1亿条数据要6分钟。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>ColumnStore</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-5.7.x安装</title>
    <url>/2016/04/25/MySQL-5-7-x-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>###1、添加yum源</p>
<h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On RHEL/CentOS 7 ---------------</span><br><span class="line"><span class="comment"># wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On RHEL/CentOS 6 ---------------</span><br><span class="line"><span class="comment"># wget http://dev.mysql.com/get/mysql57-community-release-el6-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On RHEL/CentOS 5 ---------------</span><br><span class="line"><span class="comment"># wget http://dev.mysql.com/get/mysql57-community-release-el5-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On Fedora 23 ---------------</span><br><span class="line"><span class="comment"># wget http://dev.mysql.com/get/mysql57-community-release-fc23-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On Fedora 22 ---------------</span><br><span class="line"><span class="comment"># wget http://dev.mysql.com/get/mysql57-community-release-fc22-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On Fedora 21 ---------------</span><br><span class="line"><span class="comment"># wget http://dev.mysql.com/get/mysql57-community-release-fc21-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<p>####安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On RHEL/CentOS 7 ---------------</span><br><span class="line"><span class="comment"># yum localinstall mysql57-community-release-el7-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On RHEL/CentOS 6 ---------------</span><br><span class="line"><span class="comment"># yum localinstall mysql57-community-release-el6-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On RHEL/CentOS 5 ---------------</span><br><span class="line"><span class="comment"># yum localinstall mysql57-community-release-el5-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On Fedora 23 ---------------</span><br><span class="line"><span class="comment"># dnf localinstall mysql57-community-release-fc23-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On Fedora 22 ---------------</span><br><span class="line"><span class="comment"># dnf localinstall mysql57-community-release-fc22-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- On Fedora 21 ---------------</span><br><span class="line"><span class="comment"># yum localinstall mysql57-community-release-fc21-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<p>####校验源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span></span><br><span class="line"><span class="comment"># dnf repolist enabled | grep &quot;mysql.*-community.*&quot;      [On Fedora 22+ versions]</span></span><br></pre></td></tr></table></figure>

<p><img src="https://static.verycloud.cn/sites/default/files/images/Verify-MySQL-Yum-Repository.png" alt="Verify-MySQL-Yum-Repository"></p>
<p>###2、安装mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install mysql-community-server mysql mysql-libs mysql-devel</span></span><br><span class="line"><span class="comment"># dnf install mysql-community-server mysql mysql-libs mysql-devel     [On Fedora 22+ versions]</span></span><br></pre></td></tr></table></figure>

<p>###3、开启mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<p>查看mysql版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql --version</span></span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.12, <span class="keyword">for</span> Linux (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure>

<p>###4、配置mysql</p>
<h4 id="查看默认密码"><a href="#查看默认密码" class="headerlink" title="查看默认密码"></a>查看默认密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep &#x27;temporary password&#x27; /var/log/mysqld.log</span></span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql_secure_installation</span></span><br></pre></td></tr></table></figure>

<p>配置示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Enter password <span class="keyword">for</span> user root: Enter New Root Password</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD PLUGIN can be used to <span class="built_in">test</span> passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to <span class="built_in">set</span> only those passwords <span class="built_in">which</span> are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD plugin?</span><br><span class="line"></span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No: y</span><br><span class="line"></span><br><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 2</span><br><span class="line">Using existing password <span class="keyword">for</span> root.</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 50 </span><br><span class="line">Change the password <span class="keyword">for</span> root ? ((Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br><span class="line"></span><br><span class="line">New password: Set New MySQL Password</span><br><span class="line"></span><br><span class="line">Re-enter new password: Re-enter New MySQL Password</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 100 </span><br><span class="line">Do you wish to <span class="built_in">continue</span> with the password provided?(Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to <span class="built_in">log</span> into MySQL without having to have</span><br><span class="line">a user account created <span class="keyword">for</span> them. This is intended only <span class="keyword">for</span></span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line"><span class="string">&#x27;localhost&#x27;</span>. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">By default, MySQL comes with a database named <span class="string">&#x27;test&#x27;</span> that</span><br><span class="line">anyone can access. This is also intended only <span class="keyword">for</span> testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br><span class="line"> - Dropping <span class="built_in">test</span> database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on <span class="built_in">test</span> database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All <span class="keyword">done</span>! </span><br></pre></td></tr></table></figure>

<p>至此，安装完成！</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql_install</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL互联网业务数据库设计规范</title>
    <url>/2017/02/18/MySQL%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>适用场景：并发量大、数据量大的互联网业务</p>
<h2 id="一、基础规范"><a href="#一、基础规范" class="headerlink" title="一、基础规范"></a>一、基础规范</h2><p>（1）必须使用InnoDB存储引擎<br>解读：支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高</p>
<p>（2）必须使用UTF8字符集<br>解读：万国码，无需转码，无乱码风险<br>字符集推荐使用utf8mb4字符集,utf8mb4是utf8的超集，emoji表情以及部分不常见汉字在utf8下会表现为乱码，故需要升级至utf8mb4。</p>
<p>（3）数据表、数据字段必须加入中文注释<br>解读：N年后谁tm知道这个r1,r2,r3字段是干嘛的</p>
<p>（4）禁止使用存储过程、视图、触发器、Event<br>解读：高并发大数据的互联网业务，架构设计思路是“解放数据库CPU，将计算转移到服务层”，并发量大的情况下，这些功能很可能将数据库拖死，业务逻辑放到服务层具备更好的扩展性，能够轻易实现“增机器就加性能”。数据库擅长存储与索引，CPU计算还是上移吧</p>
<p>（5）禁止存储大文件或者大照片<br>解读：为何要让数据库做它不擅长的事情？大文件和照片存储在文件系统，数据库里存URI多好</p>
<h2 id="二、命名规范"><a href="#二、命名规范" class="headerlink" title="二、命名规范"></a>二、命名规范</h2><p>（6）只允许使用内网域名，而不是ip连接数据库<br> 解读：不只是数据库，缓存（memcache、redis）的连接，服务（service）的连接都必须使用内网域名，机器迁移/平滑升级/运维管理…太多太多的好处。</p>
<p>（7）线上环境、开发环境、测试环境数据库内网域名遵循命名规范<br>业务名称：xxx<br>线上环境：xxx.db<br>开发环境：xxx.rdb<br>测试环境：xxx.tdb<br>从库在名称后加-s标识，备库在名称后加-ss标识<br>线上从库：xxx-s.db<br>线上备库：xxx-sss.db</p>
<p>（8）库名、表名、字段名：小写，下划线风格，不超过32个字符，必须见名知意，禁止拼音英文混用</p>
<p>（9）表名t_xxx，非唯一索引名idx_xxx，唯一索引名uniq_xxx</p>
<h2 id="三、表设计规范"><a href="#三、表设计规范" class="headerlink" title="三、表设计规范"></a>三、表设计规范</h2><p>（10）单实例表数目必须小于500</p>
<p>（11）单表列数目必须小于30</p>
<p>（12）表必须有主键，例如自增主键<br>解读：<br>a）主键递增，数据行写入可以提高插入性能，可以避免page分裂，减少表碎片提升空间和内存的使用<br>b）主键要选择较短的数据类型， Innodb引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率<br>c） 无主键的表删除，在row模式的主从架构，会导致备库夯住</p>
<p>（13）禁止使用外键，如果有外键完整性约束，需要应用程序控制<br>解读：外键会导致表与表之间耦合，update与delete操作都会涉及相关联的表，十分影响sql 的性能，甚至会造成死锁。高并发情况下容易造成数据库性能，大数据高并发业务场景数据库使用以性能优先</p>
<h2 id="四、字段设计规范"><a href="#四、字段设计规范" class="headerlink" title="四、字段设计规范"></a>四、字段设计规范</h2><p>（14）必须把字段定义为NOT NULL并且提供默认值<br>解读：<br>a）null的列使索引/索引统计/值比较都更加复杂，对MySQL来说更难优化<br>b）null 这种类型MySQL内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多<br>c）null值需要更多的存储空，无论是表还是索引中每行中的null的列都需要额外的空间来标识<br>d）对null 的处理时候，只能采用is null或is not null，而不能采用=、in、&lt;、&lt;&gt;、!=、not in这些操作符号。如：where name!=’shenjian’，如果存在name为null值的记录，查询结果就不会包含name为null值的记录</p>
<p>（15）禁止使用TEXT、BLOB类型<br>解读：会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库性能</p>
<p>（16）禁止使用小数存储货币<br>解读：使用整数吧，小数容易导致钱对不上<br>有人问存储前乘以100，取出后除以100是否可行，个人建议“尽量少的使用除法”。</p>
<p>曾经踩过这样的坑，100元分3天摊销，每天摊销100/3元，结果得到3个33.33。后来实施对账系统，始终有几分钱对不齐，郁闷了很久（不是几分钱的事，是业务方质疑的眼神让研发很不爽），最后发现是除法惹的祸。<br>解决方案：使用“分”作为单位，这样数据库里就是整数了。</p>
<p>（17）必须使用varchar(20)存储手机号<br>解读：<br>a）涉及到区号或者国家代号，可能出现+-()<br>b）手机号会去做数学运算么？<br>c）varchar可以支持模糊查询，例如：like“138%”</p>
<p>（18）禁止使用ENUM，可使用TINYINT代替<br>解读：<br>a）增加新的ENUM值要做DDL操作<br>b）ENUM的内部实际存储就是整数，你以为自己定义的是字符串？</p>
<h2 id="五、索引设计规范"><a href="#五、索引设计规范" class="headerlink" title="五、索引设计规范"></a>五、索引设计规范</h2><p>（19）单表索引建议控制在5个以内</p>
<p>（20）单索引字段数不允许超过5个<br>解读：字段超过5个时，实际已经起不到有效过滤数据的作用了</p>
<p>（21）禁止在更新十分频繁、区分度不高的属性上建立索引<br>解读：<br>a）更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能<br>b）“性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似</p>
<p>（22）建立组合索引，必须把区分度高的字段放在前面<br>解读：能够更加有效的过滤数据</p>
<h2 id="六、SQL使用规范"><a href="#六、SQL使用规范" class="headerlink" title="六、SQL使用规范"></a>六、SQL使用规范</h2><p>（23）禁止使用SELECT *，只获取必要的字段，需要显示说明列属性<br>解读：<br>a）读取不需要的列会增加CPU、IO、NET消耗<br>b）不能有效的利用覆盖索引<br>c）使用SELECT *容易在增加或者删除字段后出现程序BUG</p>
<p>（24）禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显示指定插入的列属性<br>解读：容易在增加或者删除字段后出现程序BUG</p>
<p>（25）禁止使用属性隐式转换<br>解读：SELECT uid FROM t_user WHERE phone=13812345678<br>会导致全表扫描，而不能命中phone索引，猜猜为什么？（这个线上问题不止出现过一次）<br>解决方案：phone是varchar类型，SQL语句带入的是整形，故不会命中索引，加个引号就好了<br>SELECT uid FROM t_user WHERE phone=’13812345678’</p>
<p>（26）禁止在WHERE条件的属性上使用函数或者表达式<br>解读：SELECT uid FROM t_user WHERE from_unixtime(day)&gt;=’2017-02-15’ 会导致全表扫描<br>正确的写法是：SELECT uid FROM t_user WHERE day&gt;= unix_timestamp(‘2017-02-15 00:00:00’)</p>
<p>（27）禁止负向查询，以及%开头的模糊查询<br>解读：<br>a）负向查询条件：NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT IN、NOT LIKE等，会导致全表扫描<br>b）%开头的模糊查询，会导致全表扫描<br>举例：<br>一般来说，WHERE过滤条件不会只带这么一个“负向查询条件”，还会有其他过滤条件，举个例子：查询沈剑已完成订单之外的订单（好拗口）：<br>SELECT oid FROM t_order WHERE uid=123 AND status != 1;</p>
<p>订单表5000w数据，但uid=123就会迅速的将数据量过滤到很少的级别（uid建立了索引），此时再接上一个负向的查询条件就无所谓了，扫描的行数本身就会很少。</p>
<p>但如果要查询所有已完成订单之外的订单：<br>SELECT oid FROM t_order WHERE status != 1;<br>这就挂了，立马CPU100%，status索引会失效，负向查询导致全表扫描。</p>
<p>（28）禁止大表使用JOIN查询，禁止大表使用子查询<br>解读：会产生临时表，消耗较多内存与CPU，极大影响数据库性能</p>
<p>（29）禁止使用OR条件，必须改为IN查询<br>解读：旧版本Mysql的OR查询是不能命中索引的，即使能命中索引，为何要让数据库耗费更多的CPU帮助实施查询优化呢？</p>
<p>（30）应用程序必须捕获SQL异常，并有相应处理</p>
<p>总结：大数据量高并发的互联网业务，极大影响数据库性能的都不让用，不让用哟。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>数据库设计</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库设计规范</title>
    <url>/2016/06/29/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>#一、命名规范</p>
<p>###[数据库环境介绍]</p>
<p>通常来讲，各个互联网公司的数据库分为5个数据库环境：</p>
<ol>
<li>dev : 开发环境, 开发可读写,可修改表结构; 常用的163的数据库表; 开发人员可以修改表结构, 可以随意修改其中的数据; 但是需要保证不影响其他开发同事; </li>
<li>qa : 测试环境, 开发可读写, 开发人员可以通过工具修改表结构; </li>
<li>sim: 模拟环境, 开发可读写, 通过web平台;发起上线请求时，会先在这个环境上进行预执行， 这个环境也可供部署上线演练或压力测试使用 可以读写;</li>
<li>real: 生产数据库从库（准实时同步）,只读环境,不允许修改数据,不允许修改表结构; 供线上问题查找,数据查询等使用;</li>
<li>online: 线上环境;开发人员不允许直接在线上环境进行数据库操作,如果需要操作必须找DBA进行操作并进行相应记录;</li>
</ol>
<p>这些环境的机器，一定要做到权限划分明确，读写帐号分离，并且有辨识度，能区分具体业务。例如用户名w_wap, r_wap 能看出来，读写帐号是wap应用的。</p>
<p>###[数据库命名规范]</p>
<ol>
<li>尽量简洁明义，能够一眼看出来这个数据库是用来做什么的；</li>
<li>使用名词作为数据库名称，并且只用英文，不用中文拼音；</li>
<li>使用英文字母，全部小写，控制在3-7个字母以内；</li>
<li>如果有多个单词，则使用下划线隔开，不建义驼峰命名；<br>例如，每个公司都有crm业务，那就叫做xx_crm, 字符集统一utf8。字符集踩过的坑很多，为了通用性统一utf8。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create database xx_crm default character <span class="built_in">set</span>=utf8;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>###[表命名规范]</p>
<ol>
<li>具备统一前缀，对相关功能的表应当使用相同前缀，如acl_xxx，house_xxx,ppc_xxx；其中前缀通常为这个表的模块或依赖主实体对象的名字，通常来讲表名为：业务_动作_类型，或是业务_类型；</li>
<li>表名使用英文小写单词，如果有多个单词则使用下划线隔开；</li>
<li>表名简介，使用常见单词，避免使用长单词和生僻词；</li>
<li>表引擎取决于实际应用场景及当前数据库中的已经存在的存储引擎；日志及报表类表建议用myisam，与交易，审核，金额相关的表建议用innodb引擎。总体来讲数据库默认innodb；</li>
<li>数据表必须有主键，且建议均使用auto_increment的id作为主键（与业务无关）,和业务相关的要做为唯一索引；</li>
<li>默认使用utf8字符集（由于数据库定义使用了默认，数据表可以不再定义，但为保险起见，建议都写上）；</li>
<li>所有的表都必须有备注，写明白这个表中存放的数据内容；</li>
<li>预估表数据量，如果数据量较大（超过500w）则需要考虑分表策略。可以等量均衡分表或根据业务规则分表均可。要分表的数据表必须与DBA商量分表策略；</li>
<li>职责相近的表，命名规则应该相同；如合同申请，账户信息，交友相关等；<br>举个例子，一张在线冲值记录表：user_bank_deposit 这个就非常符合标准，如果叫做userBankDeposit或是user_chongzhi，就非常不友好。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `house_refresh_log` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT <span class="string">&#x27;自增ID&#x27;</span>,</span><br><span class="line">  `fangid` int(11) NOT NULL COMMENT <span class="string">&#x27;房贴子ID&#x27;</span>,</span><br><span class="line">  `refresh_time` int(11) NOT NULL COMMENT <span class="string">&#x27;刷新时间&#x27;</span>,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `fangid` (`fangid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=<span class="string">&#x27;房刷新记录表&#x27;</span></span><br></pre></td></tr></table></figure>


<p>###[字段命名规范]</p>
<ol>
<li>数据库字段命名与表名命名类似：</li>
<li>使用小写英文单词，如果有多个单词使用下划线隔开；</li>
<li>使用简单单词，避免生僻词；</li>
<li>字段应当有注释，描述该字段的用途及可能存储的内容，如枚举值则建议将该字段中使用的内容都定义出来；</li>
<li>是别的表的外键均使用xxx_id的方式来表明；</li>
<li>表的主键一般都约定成为id，自增类型；</li>
<li>时间字段，除特殊情况一律采用int来记录unix_timestamp；</li>
<li>网络IP字段，除特殊情况一律用bigint来记录inet_aton值；</li>
<li>所有字段，均为非空，最好显示指定默认值；</li>
<li>有些驱动对tinyint支持不够好，通常建义按容量来选择字段；</li>
<li>text字段尽量少用，或是拆到冗余表中；</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `wanted_post` (</span><br><span class="line">  `id` int(10) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `puid` int(10) unsigned NOT NULL,</span><br><span class="line">  `user_id` int(10) NOT NULL COMMENT <span class="string">&#x27;发贴用户的id&#x27;</span>,</span><br><span class="line">  `username` varchar(50) NOT NULL COMMENT <span class="string">&#x27;发贴用户的用户名&#x27;</span>,</span><br><span class="line">  `city` smallint(4) NOT NULL COMMENT <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">  `ip` bigint(14) NOT NULL COMMENT <span class="string">&#x27;发帖人的ip&#x27;</span>,</span><br><span class="line">  `district_id` tinyint(2) NOT NULL COMMENT <span class="string">&#x27;所在区域的id&#x27;</span>,</span><br><span class="line">  `district_name` varchar(20) NOT NULL COMMENT <span class="string">&#x27;行政区名字&#x27;</span>,</span><br><span class="line">  `street_id` tinyint(2) NOT NULL COMMENT <span class="string">&#x27;所在街道(地标)的id&#x27;</span>,</span><br><span class="line">  `street_name` varchar(20) NOT NULL COMMENT <span class="string">&#x27;小区名字&#x27;</span>,</span><br><span class="line">  `title` varchar(255) NOT NULL COMMENT <span class="string">&#x27;帖子的标题&#x27;</span>,</span><br><span class="line">  `description` text NOT NULL COMMENT <span class="string">&#x27;帖子详情描述&#x27;</span>,</span><br><span class="line">  `post_at` int(11) NOT NULL COMMENT <span class="string">&#x27;用户发帖时间,数据创建的时间,使用整型存储&#x27;</span>,</span><br><span class="line">  `refresh_at` int(11) NOT NULL COMMENT <span class="string">&#x27;帖子被修改的时间,整型存储&#x27;</span>,</span><br><span class="line">  `show_time` int(11) NOT NULL COMMENT <span class="string">&#x27;帖子显示时间&#x27;</span>,</span><br><span class="line">  `age_max` int(11) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;招聘最小年龄&#x27;</span>,</span><br><span class="line">  `age_min` int(11) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;招聘最大年龄&#x27;</span>,</span><br><span class="line">  `post_refresh_at` int(11) NOT NULL COMMENT <span class="string">&#x27;刷新时间&#x27;</span>,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `idx_puid` (`puid`),</span><br><span class="line">  KEY `user_id_index` (`user_id`),</span><br><span class="line">  KEY `post_at_index` (`post_at`),</span><br><span class="line">  KEY `refresh_at_index` (`refresh_at`),</span><br><span class="line">  KEY `show_time_index` (`show_time`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=55295 DEFAULT CHARSET=utf8 COMMENT=<span class="string">&#x27;招聘帖子表&#x27;</span></span><br></pre></td></tr></table></figure>

<p>#二、表设计原则</p>
<p>###[职责分离原则]</p>
<p>职责分离原则是指在设计的时候应当考虑到数据的产生，聚合使用等原则，每个系统干自己能干的事情，每个系统只干自己的事情。一个数据表应该放在哪个系统中，通常取决于几点：</p>
<ol>
<li><p>谁产生这个信息：通常情况下谁产生了这个数据应当对此数据负责；也就是考虑该数据的创建，发展，销毁等全生命周期的定义，并将这个定义维护起来提供给消费者作为消费原则；</p>
</li>
<li><p>谁最经常使用这个信息：如果某个系统最经常使用这个数据，最经常去修改某个数据，也应该由该系统来负责保存维护该数据；</p>
</li>
<li><p>遵守高内聚，低耦合的考虑：在存放数据的时候如果考虑到数据使用原则导致了相关度非常高的数据存放在多个地方，需要多个系统来维护这个数据就有可能导致系统间的耦合性增强，应当尽量避免。</p>
</li>
</ol>
<p>在我们设计数据库表间的关系的时候也应当遵守相同原则，职责分离降低耦合，但同时要考虑到性能情况，做到适当冗余而不导致修改逻辑复杂。</p>
<p>举个最常见贴子与评论的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `wanted_post` (</span><br><span class="line">  `id` int(10) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `puid` int(10) unsigned NOT NULL,</span><br><span class="line">  `user_id` int(10) NOT NULL COMMENT <span class="string">&#x27;发贴用户的id&#x27;</span>,</span><br><span class="line">  `username` varchar(50) NOT NULL COMMENT <span class="string">&#x27;发贴用户的用户名&#x27;</span>,</span><br><span class="line">  `city` smallint(4) NOT NULL COMMENT <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">  `ip` bigint(14) NOT NULL COMMENT <span class="string">&#x27;发帖人的ip&#x27;</span>,</span><br><span class="line">  `district_id` tinyint(2) NOT NULL COMMENT <span class="string">&#x27;所在区域的id&#x27;</span>,</span><br><span class="line">  `district_name` varchar(20) NOT NULL COMMENT <span class="string">&#x27;行政区名字&#x27;</span>,</span><br><span class="line">  `street_id` tinyint(2) NOT NULL COMMENT <span class="string">&#x27;所在街道(地标)的id&#x27;</span>,</span><br><span class="line">  `street_name` varchar(20) NOT NULL COMMENT <span class="string">&#x27;小区名字&#x27;</span>,</span><br><span class="line">  `title` varchar(255) NOT NULL COMMENT <span class="string">&#x27;帖子的标题&#x27;</span>,</span><br><span class="line">  `description` text NOT NULL COMMENT <span class="string">&#x27;帖子详情描述&#x27;</span>,</span><br><span class="line">  `post_at` int(11) NOT NULL COMMENT <span class="string">&#x27;用户发帖时间,数据创建的时间,使用整型存储&#x27;</span>,</span><br><span class="line">  `refresh_at` int(11) NOT NULL COMMENT <span class="string">&#x27;帖子被修改的时间,整型存储&#x27;</span>,</span><br><span class="line">  `show_time` int(11) NOT NULL COMMENT <span class="string">&#x27;帖子显示时间&#x27;</span>,</span><br><span class="line">  `age_max` int(11) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;招聘最小年龄&#x27;</span>,</span><br><span class="line">  `age_min` int(11) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;招聘最大年龄&#x27;</span>,</span><br><span class="line">  `post_refresh_at` int(11) NOT NULL COMMENT <span class="string">&#x27;刷新时间&#x27;</span>,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `idx_puid` (`puid`),</span><br><span class="line">  KEY `user_id_index` (`user_id`),</span><br><span class="line">  KEY `post_at_index` (`post_at`),</span><br><span class="line">  KEY `refresh_at_index` (`refresh_at`),</span><br><span class="line">  KEY `show_time_index` (`show_time`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=55295 DEFAULT CHARSET=utf8 COMMENT=<span class="string">&#x27;招聘帖子表&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `wanted_post_comment_99` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `puid` int(10) unsigned NOT NULL,</span><br><span class="line">  `user_id` int(10) NOT NULL COMMENT <span class="string">&#x27;评论用户ID&#x27;</span>,</span><br><span class="line">  `post_at` int(11) NOT NULL COMMENT <span class="string">&#x27;评论时间&#x27;</span>,</span><br><span class="line">  `detail` text NOT NULL COMMENT <span class="string">&#x27;评论详情&#x27;</span>,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `user_id_index` (`user_id`),</span><br><span class="line">  KEY `puidid_index` (`puid`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 COMMENT=<span class="string">&#x27;招聘评论分表99&#x27;</span></span><br></pre></td></tr></table></figure>

<p>由于评论表数据量很大，在预先做好分表，按贴子puid分成100张子表，那么当前详情页涉及sql如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select * from wanted_post <span class="built_in">where</span> puid=xxxx;</span><br><span class="line">select * from wanted_post_comment_99 <span class="built_in">where</span> puid=xxxx;</span><br></pre></td></tr></table></figure>
<p>这是一个简化的模型，评论多了，还要涉及分页，不可能一次性全取出来。对于上面的场景，严格尊守高内聚，低耦合的原则，不会存储冗余数据。相比较还有一种文档型数据库，例如mongo，就可以将评论与贴子存放在一起，访问的时候只需一次顺序IO操作。整体来讲表设计，要按照职责划分原则。</p>
<p>###[在线处理与分析分离]</p>
<ol>
<li>为了保障线上数据处理的性能，将一些分析相关的数据及分析结果，应当使用单独的库来进行存储，避免在数据分析的时候导致业务数据吞吐量下降，引起系统问题。</li>
<li>专门用于存放离线报表数据，并提供线上数据查询方法，建议将统计结果，汇总的数据都从在线处理数据库中移走。</li>
</ol>
<p>对于上面的wanted_post求职贴子表，在线处理只能是用户在操作：浏览，修改，删除，分别对应如下sql：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select * from wanted_post <span class="built_in">where</span> puid=xxxxx;</span><br><span class="line">update wanted_post <span class="built_in">set</span> xxx=xxx <span class="built_in">where</span> puid=xxxx;</span><br><span class="line">delete from wanted_post <span class="built_in">where</span> puid=xxxx;</span><br></pre></td></tr></table></figure>

<p>同样，对于后台统计来讲，都是些聚合操作，非常消耗性能，例如查看某一用户发贴量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select count(*) from wanted_post <span class="built_in">where</span> user_id=xxxx;</span><br></pre></td></tr></table></figure>
<p>上面举个通用的例子，原则上要将在线用户请求和后台统计请求分开。简单来讲，对于这种需求处理如下：</p>
<p>将请求指向不同slave ，这种方法简单高效，缺点是数据量增大就玩不转。</p>
<p>建立离线报表库，专门存放统计结果，这样将计算与展示异步处理，缺点是对于实时业务响应不好。</p>
<p>实时拉取mysql row binlog，做数据的异构处理(tungsten, canal)，将增量结果处理后(storm)，保存在数据库中，基本实时。</p>
<p>###[事务与日志分离]</p>
<p>用户生成内容和用户行为日志要分开，这一点很好理解，举两个例子：</p>
<p>游戏DB里存放玩家的基础信息，装备，属性，好友列表等等，这些放到数据库里面。但是玩家的行为日志，比如消耗金币，今天下过哪些副本，买过什么顶级装备，这些属于行为日志，应该单独存放并分析处理。 </p>
<p>对于web用记，有好多用户置顶，刷新，竞价，展示等行为，要求实时并且量很大，一定要和贴子分开。</p>
<p>行为日志，需要做分析处理，并且由于时效性不宜存储在mysql中，后期维护就是地雷。</p>
<p>###[历史可追溯]</p>
<p>在数据库设计的时候为了保障数据是可追溯的，应当遵循一些简单的约定，事后方便数据的查询和统计：</p>
<ol>
<li><p>对于状态数据，应当设计相应状态的字段来保存该数据的最后状态，同时记录下来该数据的初始创建人，时间以及该数据的最后修改人和修改时间；所以在交易数据（如订单合同），广告数据，账户表等都应该默认有状态（status），创建人（creator/creator_name），创建时间（created_at），最后修改人（modifier/modifier_name），最后修改时间（modified_at）等字段用来表明数据的当前状态，创建信息及修改信息。</p>
</li>
<li><p>针对需要跟踪每次修改的数据，需要在数据发生变化的时候记录一张日志表，用于记录该数据发生变化的全生命周期。针对只需要关注关键字段变化的情况，则日志表中只需要记录关键字段变化即可，但操作人，操作类型，时间应当准确记录，日志表数据一旦生成不允许进行修改。如用户账户的充值流水，消费流水都是一些业务紧相关的日志。而审核日志，操作记录等日志则属于与业务关联较小的日志。</p>
</li>
<li><p>针对所有历史需要保留的数据则需要每次变化都生成一个新的版本，比如类目信息等，对原始数据永远只做insert操作，不做delete及update操作。但这种情况仅限于极端数据历史要求极高的情况下使用。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>数据库设计</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Trait多重继承的实现</title>
    <url>/2016/05/21/PHP-Trait%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>官方地址：<br><a href="http://php.net/manual/en/language.oop5.traits.php">http://php.net/manual/en/language.oop5.traits.php</a></p>
<p>自 PHP 5.4.0 起，PHP 实现了代码复用的一个方法，称为 traits。</p>
<p>Traits 是一种为类似 PHP 的单继承语言而准备的代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用方法集。Traits 和类组合的语义是定义了一种方式来减少复杂性，避免传统多继承和混入类（Mixin）相关的典型问题。</p>
<p>Trait 和一个类相似，但仅仅旨在用细粒度和一致的方式来组合功能。Trait 不能通过它自身来实例化。它为传统继承增加了水平特性的组合；也就是说，应用类的成员不需要继承。</p>
<p>在我理解说白了就是在继承类链中隔离了子类继承父类的某些特性（就是子类“要用父类的特性的时候”，如果trait有，就优先调用trait的方法、属性等）。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">MyTrait</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var</span> = <span class="string">&quot;MyTrait_var&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var1</span> = <span class="string">&quot;MyTrait_var&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;var.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;a&quot;</span>.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAbstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var2</span> = <span class="string">&quot;MyAbstract_var&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">use</span> <span class="title">MyTrait</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;b&quot;</span>.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">MyAbstract</span> <span class="keyword">implements</span> <span class="title">MyInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var3</span> = <span class="string">&quot;MyClass_var&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//也可以在这里引用，不区分继承关系</span></span><br><span class="line">    <span class="comment">//use MyTrait;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;c&quot;</span>.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$class</span> = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="variable">$class</span>-&gt;a();</span><br><span class="line"><span class="variable">$class</span>-&gt;b();</span><br><span class="line"><span class="variable">$class</span>-&gt;c();</span><br></pre></td></tr></table></figure>

<p>输出结果<br>MyTrait_var<br>a<br>b<br>c</p>
<p>总结：</p>
<p>从本质上说，trait和include文件的概念差不多<br>trait可以更加方便的实现代码复用，因为我们用继承关系实现的无法在父类中访问子类的private属性与方法，而trait就和把代码直接写在对象里效果一样。<br>使用trait时候应该坚决避免命名冲突，尤其是同时使用多个trait时。<br>如果产生了命名冲突，如果两者的可见性、初始值、static与否完全相同，则trait中的会覆盖掉对象中的，并抛出E_STRICT错误，否则会抛出E_COMPILE_ERROR错误，终止编译。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php trait</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal SQLite: database disk image is malformed 解决方法</title>
    <url>/2015/07/31/SQLite-database-disk-image-is-malformed-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>我碰到的这种情况，并不是网上说的磁盘坏了。而是由于频繁读写，并且有BLOB大数据频繁读写。</p>
<p>解决办法就是通过导出导入方式对损坏的库文件作恢复。</p>
<p>首先导出数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlite3 my.sqlite3</span><br><span class="line">sqlite&gt;.output tmp.sql</span><br><span class="line">sqlite&gt;.dump</span><br><span class="line">sqlite&gt;.quit</span><br></pre></td></tr></table></figure>

<p>再导入到一个新库中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlite3 new.sqlite3</span><br><span class="line">sqlite&gt;.<span class="built_in">read</span> tmp.sql</span><br><span class="line">sqlite&gt;.quit</span><br></pre></td></tr></table></figure>

<p>覆盖new.sqlite文件到sites/default/files/.ht.sqlite即可。</p>
<p>另外，如果只是临时数据，可以放到/dev/shm，就是内存数据库啦。。。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sqlite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue路由入门</title>
    <url>/2017/01/12/Vue%E8%B7%AF%E7%94%B1%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>Vue路由（vue-router）是Vue用来创建单页应用的第三方库，使用vue-router可以很方便的创建无刷新切换页面的应用。vue-router基于vue的组件系统（不熟悉组件请先学习Vue组件），要使用vue-router只需要将路径和组件建立对应关系，这样路由系统就知道哪个路径需要渲染哪个组件。</p>
<h3 id="2、开始"><a href="#2、开始" class="headerlink" title="2、开始"></a>2、开始</h3><p>在开始写第一个路由示例之前，我们先来了解一些基本概念。<br>（1）路由<br>路由即url路径和组件之间的对应关系。<br>（2）router-link组件<br> router-link组件即页面上连接到某个路由的超链接，最终渲染后会变成a标签。比如我需要在页面上设置连接到/profile/user的超链接，则只要在页面放上&lt;router-link to=”/profile/user”&gt;用户列表&lt;/router-link&gt;就行了。<br> （3）router-view组件<br> router-view组件是路由组件渲染的容器，一旦路由匹配到了，vue就会将路由对应的组件渲染到router-view标签所在的位置。比如点击上例中的profile/user超链接，vue首先查找profile/user对应的路由是什么，查找到后再找出路由对应的组件，然后将组件渲染到router-view标签。</p>
<p>了解上述概念之后，我们可以开始写我们的第一个路由示例，我们首先创建index.html,代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Hello App!&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;!-- 使用 router-link 组件来导航. --&gt;</span><br><span class="line">    &lt;!-- 通过传入 &#96;to&#96; 属性指定链接. --&gt;</span><br><span class="line">    &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 &#96;&lt;a&gt;&#96; 标签 --&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;profile&#x2F;user&quot;&gt;用户列表&lt;&#x2F;router-link&gt;</span><br><span class="line">  &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;!-- 路由出口 --&gt;</span><br><span class="line">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- 注意，这里引入vue-router.js对于script方式引入文件的方式是必不可少的.我们以后再讨论使用ES6模块引入的方式 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue-router&#x2F;dist&#x2F;vue-router.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- 应用入口文件 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&#x2F;js&#x2F;app.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>接着我们继续创建app.js，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 1. 定义（路由）组件。</span><br><span class="line">&#x2F;&#x2F; 在现实的开发中，一般将组件放在单独的文件中，然后从其他文件 import 进来</span><br><span class="line">&#x2F;&#x2F; 为了简单起见，我们这里先使用字符串模板组件，以后再讨论单文件组件（.vue文件）</span><br><span class="line">const User &#x3D; &#123;</span><br><span class="line">  template: &#39;&lt;div&gt;这里是用户列表&lt;&#x2F;div&gt;&#39; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2. 定义路由</span><br><span class="line">&#x2F;&#x2F; 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是</span><br><span class="line">&#x2F;&#x2F; 通过 Vue.extend() 创建的组件构造器，</span><br><span class="line">&#x2F;&#x2F; 或者，只是一个组件配置对象。</span><br><span class="line">const routes &#x3D; [</span><br><span class="line">  &#123; </span><br><span class="line">    path: &#39;&#x2F;profile&#x2F;user&#39;, </span><br><span class="line">    component: User </span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3. 创建 router 实例，然后传 &#96;routes&#96; 配置</span><br><span class="line">&#x2F;&#x2F; 你还可以传别的配置参数, 不过先这么简单着吧。</span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes &#x2F;&#x2F; ES6（缩写）相当于 routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4. 创建和挂载根实例。</span><br><span class="line">&#x2F;&#x2F; 记得要通过 router 配置参数注入路由，</span><br><span class="line">&#x2F;&#x2F; 从而让整个应用都有路由功能</span><br><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 现在，应用已经启动了！</span><br></pre></td></tr></table></figure>

<p>至此，一个最简单的路由应用就完成了，部署到服务器后，打开<a href="http://localhost,则可以看到界面有一个“用户详情”超链接，点击超链接，界面会显示“这里是用户列表”，同时界面并没有刷新，所有的操作都在一个界面内完成，所以这也叫单页应用，与以前那些点击超链接就要刷新页面的应用相比是不是用户体验更高？">http://localhost,则可以看到界面有一个“用户详情”超链接，点击超链接，界面会显示“这里是用户列表”，同时界面并没有刷新，所有的操作都在一个界面内完成，所以这也叫单页应用，与以前那些点击超链接就要刷新页面的应用相比是不是用户体验更高？</a></p>
<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>有的时候，我们的url里面需要带参数，比如上例中，我们需要查看不同用户的详情，那么url应该是/profile/user/1这样，里面的“1”即用户ID，可以动态变化，要实现这样的功能，我们只需要对我们的路由定义做一些微小变动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const routes &#x3D; [</span><br><span class="line">  &#123; </span><br><span class="line">    path: &#39;&#x2F;profile&#x2F;user&#x2F;:id&#39;, </span><br><span class="line">    component: User </span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes &#x2F;&#x2F; ES6（缩写）相当于 routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到路由的定义唯一不同的地方就是在url上加了“:id”占位符，那么像“/profile/user/1”、“/profile/user/2”这样的url都会匹配到这个路由。<br>一个『路径参数』使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用。于是，我们可以更新 User 的模板，输出当前用户的 ID：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const User &#x3D; &#123;</span><br><span class="line">  template: &#39;&lt;div&gt;这里是用户# &#123;&#123; $route.params.id &#125;&#125;详情页&lt;&#x2F;div&gt;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以在一个路由中设置多段『路径参数』，对应的值都会设置到 $route.params 中。例如：profile/user/:id/post/:pid，则可以使用$route.params.id和$route.params.pid来引用路由参数。如果url带有查询参数，则参数会被设置到$route.query对象。</p>
<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>在实际的应用中，我们可能会碰到某个页面下面还有子页面的情况，比如用户列表页面里面点击某个用户，显示用户详情，我们定义/profile/user为用户列表url，/profile/user/:id为用户详情url，那么这两个URL就是父子关系，即嵌套关系，这样的URL我们应该怎么定义呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const routes &#x3D; [</span><br><span class="line">    &#123; path: &#39;&#x2F;profile&#x2F;user&#39;, component: User,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &#39;:id&#39;,</span><br><span class="line">          component: UserProfile</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>
<p>你会发现，children 配置就是像 routes 配置一样的路由配置数组，所以呢，你可以嵌套多层路由。<br>上面只是定义了路由的结构，如果要在父页面里面显示子页面的内容，那么父页面的模板我们该如何定义？我们前面已经说过，要让路由的组件能在页面中渲染，必须在页面中放router-view组件，那么父页面的模板的定义可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const User &#x3D; &#123;</span><br><span class="line">  template: &#96;</span><br><span class="line">    &lt;div class&#x3D;&quot;user&quot;&gt;</span><br><span class="line">      &lt;h2&gt;这是用户列表页面&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;profile&#x2F;user&#x2F;1&quot;&gt;root&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;profile&#x2F;user&#x2F;2&quot;&gt;test&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编程式的导航"><a href="#编程式的导航" class="headerlink" title="编程式的导航"></a>编程式的导航</h3><p>除了使用 <router-link> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。</p>
<h4 id="router-push-location"><a href="#router-push-location" class="headerlink" title="router.push(location)"></a>router.push(location)</h4><p>想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。<br>当你点击 <router-link> 时，这个方法会在内部调用，所以说，点击 <router-link :to="..."> 等同于调用 router.push(…)。该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 字符串</span><br><span class="line">router.push(&#39;home&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对象</span><br><span class="line">router.push(&#123; path: &#39;home&#39; &#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 命名的路由</span><br><span class="line">router.push(&#123; name: &#39;user&#39;, params: &#123; userId: 123 &#125;&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 带查询参数，变成 &#x2F;register?plan&#x3D;private</span><br><span class="line">router.push(&#123; path: &#39;register&#39;, query: &#123; plan: &#39;private&#39; &#125;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="router-replace-location"><a href="#router-replace-location" class="headerlink" title="router.replace(location)"></a>router.replace(location)</h4><p>跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</p>
<h4 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n)"></a>router.go(n)</h4><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在浏览器记录中前进一步，等同于 history.forward()</span><br><span class="line">router.go(1)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 后退一步记录，等同于 history.back()</span><br><span class="line">router.go(-1)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 前进 3 步记录</span><br><span class="line">router.go(3)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果 history 记录不够用，那就默默地失败呗</span><br><span class="line">router.go(-100)</span><br><span class="line">router.go(100)</span><br></pre></td></tr></table></figure>

<h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><p>到此为止，我们例子中定义的路由都只有path和component两个属性，有时候，通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;profile&#x2F;user&#x2F;:id&#39;,</span><br><span class="line">      name: &#39;user&#39;,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>要链接到一个命名路由，可以给 router-link 的 to 属性传一个对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;user&#39;, params: &#123; id: 123 &#125;&#125;&quot;&gt;User&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>

<h3 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h3><p>我们上面的例子中，所有的模板里面都只有一个router-view组件，也就是说，一个路由只能渲染一个组件，但是有时候想同时（同级）展示多个视图，而不是嵌套展示，例如创建一个布局，有 sidebar（侧导航） 和 main（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-view class&#x3D;&quot;view one&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;router-view class&#x3D;&quot;view two&quot; name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;router-view class&#x3D;&quot;view three&quot; name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure>

<p>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 components 配置（带上 s）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        default: Foo,</span><br><span class="line">        a: Bar,</span><br><span class="line">        b: Baz</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="重定向-和-别名"><a href="#重定向-和-别名" class="headerlink" title="重定向 和 别名"></a>重定向 和 别名</h3><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>重定向也是通过 routes 配置来完成，下面例子是从 /a 重定向到 /b：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#39;&#x2F;a&#39;, redirect: &#39;&#x2F;b&#39; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>重定向的目标也可以是一个命名的路由：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#39;&#x2F;a&#39;, redirect: &#123; name: &#39;foo&#39; &#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>甚至是一个方法，动态返回重定向目标：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#39;&#x2F;a&#39;, redirect: to &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 方法接收 目标路由 作为参数</span><br><span class="line">      &#x2F;&#x2F; return 重定向的 字符串路径&#x2F;路径对象</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><p>『重定向』的意思是，当用户访问 /a时，URL 将会被替换成 /b，然后匹配路由为 /b，那么『别名』又是什么呢？<br>/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。<br>上面对应的路由配置为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#39;&#x2F;a&#39;, component: A, alias: &#39;&#x2F;b&#39; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue路由进阶</title>
    <url>/2017/01/15/Vue%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h3 id="导航钩子"><a href="#导航钩子" class="headerlink" title="导航钩子"></a>导航钩子</h3><p>有的时候，我们可能有这样的需求，当页面切换时，需要做一些操作来更改某些信息，这就需要拦截路由切换。vue-router 提供了导航钩子来拦截导航，让它完成跳转或取消。有多种方式可以在路由导航发生时执行钩子：全局的, 单个路由独享的, 或者组件级的。</p>
<h4 id="全局钩子"><a href="#全局钩子" class="headerlink" title="全局钩子"></a>全局钩子</h4><p>你可以使用 router.beforeEach 注册一个全局的 before 钩子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当一个导航触发时，全局的 before 钩子按照创建顺序调用。钩子是异步解析执行，此时导航在所有钩子 resolve 完之前一直处于 等待中。<br>每个钩子方法接收三个参数：<br>to: Route: 即将要进入的目标 路由对象</p>
<p>from: Route: 当前导航正要离开的路由</p>
<p>next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</p>
<p>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。</p>
<p>next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到 from 路由对应的地址。</p>
<p>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</p>
<p>确保要调用 next 方法，否则钩子就不会被 resolved。<br>同样可以注册一个全局的 after 钩子，不过它不像 before 钩子那样，after 钩子没有 next 方法，不能改变导航：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.afterEach(route &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="某个路由独享的钩子"><a href="#某个路由独享的钩子" class="headerlink" title="某个路由独享的钩子"></a>某个路由独享的钩子</h4><p>你可以在路由配置上直接定义 beforeEnter 钩子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;foo&#39;,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这些钩子与全局 before 钩子的方法参数是一样的。</p>
<h4 id="组件内的钩子"><a href="#组件内的钩子" class="headerlink" title="组件内的钩子"></a>组件内的钩子</h4><p>最后，你可以在路由组件内直接定义以下路由导航钩子：</p>
<p>beforeRouteEnter<br>beforeRouteUpdate (2.2 新增)<br>beforeRouteLeave</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Foo &#x3D; &#123;</span><br><span class="line">  template: &#96;...&#96;,</span><br><span class="line">  beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">    &#x2F;&#x2F; 在渲染该组件的对应路由被 confirm 前调用</span><br><span class="line">    &#x2F;&#x2F; 不！能！获取组件实例 &#96;this&#96;</span><br><span class="line">    &#x2F;&#x2F; 因为当钩子执行前，组件实例还没被创建</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">    &#x2F;&#x2F; 在当前路由改变，但是改组件被复用时调用</span><br><span class="line">    &#x2F;&#x2F; 举例来说，对于一个带有动态参数的路径 &#x2F;foo&#x2F;:id，在 &#x2F;foo&#x2F;1 和 &#x2F;foo&#x2F;2 之间跳转的时候，</span><br><span class="line">    &#x2F;&#x2F; 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">    &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">    &#x2F;&#x2F; 导航离开该组件的对应路由时调用</span><br><span class="line">    &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>介绍完上述三种不同作用域的导航钩子，我们来看一个更实际的例子。使用vue-router之后，页面的切换时无刷新的，也就是说和服务端没有交互，这样就会产生一个问题，如果某个页面这个用户没有权限访问，这个如何来控制？有了导航钩子，这个自然就可以放到导航钩子来执行，示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 权限数组</span><br><span class="line">const permissions &#x3D; &#123;</span><br><span class="line">  &#39;user&#39;: 1,   &#x2F;&#x2F; 其中user表示路由名称  1表示有权限访问 0 表示无权限访问</span><br><span class="line">  &#39;userProfile&#39;: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  let name &#x3D; to.name;</span><br><span class="line">  if (name) &#123;</span><br><span class="line">    if (permissions[name]) &#123;</span><br><span class="line">       next();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">       alert(无权限访问);</span><br><span class="line">       next(false);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h3><p>路由定义的时候，除了path、name、component(s)属性外，还可以有meta属性，这个属性用来为路由定义一些扩展的属性，比如每个页面都有title等。vue-router不会自动处理meta里面的属性，需要我们在导航钩子里面去处理这些元信息，我们就以页面title为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const routes &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;profile&#x2F;user&#39;,</span><br><span class="line">    name: &#39;user&#39;,</span><br><span class="line">    component: User,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;用户列表&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;:id&#39;,</span><br><span class="line">        component: UserProfile,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;用户详情&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  document.title &#x3D; to.meta ? to.meta.title : &#39;&#39;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="过渡动效"><a href="#过渡动效" class="headerlink" title="过渡动效"></a>过渡动效</h3><p>过渡效果的基础知识已经在vue基础中讲过，如果不清楚过度效果，请先学习过渡效果。<router-view> 是基本的动态组件，所以我们可以用 <transition> 组件给它添加一些过渡效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>

<p>上面的用法会给所有路由设置一样的过渡效果，如果你想让每个路由组件有各自的过渡效果，可以在各路由组件内使用 <transition> 并设置不同的 name。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const User &#x3D; &#123;</span><br><span class="line">  template: &#96;</span><br><span class="line">    &lt;transition name&#x3D;&quot;slide&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;这里是用户列表&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;profile&#x2F;user&#x2F;1&quot;&gt;root&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;profile&#x2F;user&#x2F;2&quot;&gt;test&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">     &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;&#x2F;transition&gt;</span><br><span class="line">   &#96;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用户详情组件</span><br><span class="line">const UserProfile &#x3D; &#123;</span><br><span class="line">  template: &#39;&lt;transition name&#x3D;&quot;fade&quot;&gt;&lt;div&gt;用户# &#123;&#123; $route.params.id &#125;&#125;详情页&lt;&#x2F;div&gt;&lt;&#x2F;transition&gt;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h3><p>由于vue-router是单页无刷新应用，所以假设有一个页面内容很多，有垂直滚动条，如果把页面滚动到最底部，然后再切换路由，默认情况下，新的页面也在最底部，如果想要页面滚到顶部，vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。<br>注意: 这个功能只在 HTML5 history 模式下可用。<br>当创建一个 Router 实例，你可以提供一个 scrollBehavior 方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [...],</span><br><span class="line">  scrollBehavior (to, from, savedPosition) &#123;</span><br><span class="line">    &#x2F;&#x2F; return 期望滚动到哪个的位置</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>scrollBehavior 方法接收 to 和 from 路由对象。第三个参数 savedPosition 当且仅当 popstate 导航 (通过浏览器的 前进/后退 按钮触发) 时才可用。<br>这个方法返回滚动位置的对象信息，长这样：</p>
<p>{ x: number, y: number }<br>{ selector: string }<br>如果返回一个布尔假的值，或者是一个空对象，那么不会发生滚动。</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrollBehavior (to, from, savedPosition) &#123;</span><br><span class="line">  return &#123; x: 0, y: 0 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例对于所有路由导航，简单地让页面滚动到顶部。<br>返回 savedPosition，在按下 后退/前进 按钮时，就会像浏览器的原生表现那样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrollBehavior (to, from, savedPosition) &#123;</span><br><span class="line">  if (savedPosition) &#123;</span><br><span class="line">    return savedPosition</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return &#123; x: 0, y: 0 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例表示如果是按了浏览器的前进、后退按钮，则页面滚动到历史页面原来的位置，否则滚动到页面顶部。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>centos6.6安装Percona Tokudb</title>
    <url>/2015/11/21/centos6-6%E5%AE%89%E8%A3%85Percona-Tokudb/</url>
    <content><![CDATA[<p>在percona官网<a href="https://www.percona.com/">https://www.percona.com/</a><br>下载带有Tokudb的二进制包，也可以选择源码编译。tokudb有单独的包.<br>我这里下载的是最新的包，5.6.25-73<br>Percona-Server-5.6.25-rel73.1-Linux.x86_64.ssl101.tar.gz<br>Percona-Server-5.6.25-rel73.1-TokuDB.Linux.x86_64.ssl101.tar.gz</p>
<p>###前期账号创建</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">shell&gt; groupadd mysql</span><br><span class="line">shell&gt; useradd -g mysql mysql</span><br></pre></td></tr></table></figure>

<p>###解压软件包</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">shell&gt; cd /usr/local</span><br><span class="line">shell&gt; tar -zxvf Percona-Server-<span class="number">5.6</span>.<span class="number">25</span>-rel73.<span class="number">1</span>-Linux.x86_64.ssl101.tar.gz</span><br><span class="line">shell&gt; tar -zxvf Percona-Server-<span class="number">5.6</span>.<span class="number">25</span>-rel73.<span class="number">1</span>-TokuDB.Linux.x86_64.ssl101.tar.gz</span><br><span class="line">shell&gt; ln -s Percona-Server-<span class="number">5.6</span>.<span class="number">25</span>-rel73.<span class="number">1</span>-Linux.x86_64.ssl101 mysql</span><br></pre></td></tr></table></figure>

<p>###设置权限</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">shell&gt; cd mysql</span><br><span class="line">shell&gt; chown -R mysql .</span><br><span class="line">shell&gt; chgrp -R mysql .</span><br></pre></td></tr></table></figure>

<p>###创建配置文件/etc/my.cnf<br>创建存放数据源的目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Shell&gt; mkdir -p /<span class="keyword">var</span>/lib/mysql</span><br><span class="line">Shell&gt; mkdir -p /data/mysqldata /data/mysqllog</span><br><span class="line">Shell&gt; chown -R mysql:mysql /<span class="keyword">var</span>/lib/mysql /data/mysqldata /data/mysqllog</span><br></pre></td></tr></table></figure>

<p>在附件中给出，请参考附配置文件内容</p>
<p>###初始化DB</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Shell&gt; scripts/mysql_install_db --user=mysql --defaults-file=/etc/my.cnf</span><br><span class="line">shell&gt; chown -R root .</span><br></pre></td></tr></table></figure>

<p>###修改系统参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> never &gt; /sys/kernel/mm/redhat_transparent_hugepage/defrag</span><br><span class="line"><span class="keyword">echo</span> never &gt; /sys/kernel/mm/redhat_transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br></pre></td></tr></table></figure>
<p>建议写到 /etc/rc.local 中，重启后也可生效</p>
<p>###启动数据库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">shell&gt; bin/mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></table></figure>

<p>###把启动文件放去自启动中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chkconfig --add mysqld</span><br><span class="line">service mysqld start</span><br><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure>

<p>然后启动。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engines;</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                                    | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| InnoDB             | <span class="keyword">DEFAULT</span> | Percona-XtraDB, Supports transactions, row-level locking, <span class="keyword">and</span> foreign keys | YES          | YES  | YES        |</span><br><span class="line">| CSV                | YES     | CSV storage engine                                                         | NO           | NO   | NO         |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                                      | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/<span class="literal">null</span> storage engine (anything you write to it disappears)             | NO           | NO   | NO         |</span><br><span class="line">| MEMORY             | YES     | Hash based, stored in memory, useful <span class="keyword">for</span> temporary tables                  | NO           | NO   | NO         |</span><br><span class="line">| TokuDB             | YES     | Tokutek TokuDB Storage Engine with Fractal Tree(tm) Technology             | YES          | YES  | YES        |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                                         | NO           | NO   | NO         |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                                     | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                                      | NO           | NO   | NO         |</span><br><span class="line">| FEDERATED          | NO      | Federated MySQL storage engine                                             | <span class="literal">NULL</span>         | <span class="literal">NULL</span> | <span class="literal">NULL</span>       |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line"><span class="number">10</span> rows in set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>看到上面一行红字就代表数据库支持TokuDB的存储引擎了。</p>
<p>tokudb安装顺利完成，后附配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># cat /etc/my.cnf </span></span><br><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="comment">#public</span></span><br><span class="line">max_connections=3000</span><br><span class="line">max_connect_errors=6000</span><br><span class="line">key_buffer_size = 384M</span><br><span class="line">low_priority_updates = 1</span><br><span class="line">back_log = 1500</span><br><span class="line">query_cache_type = 1</span><br><span class="line">query_cache_size = 64M</span><br><span class="line">query_cache_limit = 4M</span><br><span class="line">query_cache_min_res_unit = 2k</span><br><span class="line">tmp_table_size = 256M</span><br><span class="line">read_buffer_size=1M</span><br><span class="line">read_rnd_buffer_size = 16M</span><br><span class="line">bulk_insert_buffer_size = 64M</span><br><span class="line">max_allowed_packet = 64M</span><br><span class="line">thread_cache_size = 300</span><br><span class="line"><span class="comment">#file</span></span><br><span class="line">innodb_file_per_table</span><br><span class="line"><span class="comment">#buffer</span></span><br><span class="line">innodb_buffer_pool_size = 2500M</span><br><span class="line">innodb_log_buffer_size = 64M</span><br><span class="line">join_buffer_size = 16M</span><br><span class="line">sort_buffer_size = 16M</span><br><span class="line">innodb_max_dirty_pages_pct = 90</span><br><span class="line">innodb_lock_wait_timeout = 120</span><br><span class="line">innodb_thread_concurrency = 16</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tokudb</span></span><br><span class="line">plugin_dir =  /usr/<span class="built_in">local</span>/mysql/lib/mysql/plugin/</span><br><span class="line">plugin_load=ha_tokudb.so</span><br><span class="line"><span class="comment">#把TokuDB datadir以及logdir和MySQL的datadir分开，美观点，也可以不分开，注释掉本行以及下面2行即可</span></span><br><span class="line">tokudb_data-dir = /data/mysqldata</span><br><span class="line">tokudb_log-dir = /data/mysqllog</span><br><span class="line"><span class="comment">#TokuDB的行模式，建议用 FAST 就足够了，如果磁盘空间很紧张，建议用 SMALL</span></span><br><span class="line">tokudb_row_format = tokudb_small</span><br><span class="line">tokudb_row_format = tokudb_fast</span><br><span class="line">tokudb_cache_size = 2G</span><br><span class="line"><span class="comment">#其他大部分配置其实可以不用修改的，只需要几个关键配置即可</span></span><br><span class="line">tokudb_commit_sync = 0</span><br><span class="line">tokudb_directio = 1</span><br><span class="line">tokudb_read_block_size = 128K</span><br><span class="line">tokudb_read_buf_size = 128K</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">malloc_lib = /usr/<span class="built_in">local</span>/mysql/lib/mysql/libjemalloc.so <span class="comment">#只能放在mysqld_safe中，不得报错</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>tokudb</tag>
      </tags>
  </entry>
  <entry>
    <title>centos6.6安装mariadb10 Tokudb</title>
    <url>/2015/11/20/centos6-6%E5%AE%89%E8%A3%85mariadb10-Tokudb/</url>
    <content><![CDATA[<p>ps: 如果想在mariadb10上使用tokudb就只能自己编译了。。。。</p>
<p>###一、环境准备：<br>tokudb的编译需要cmake 2.8.9+ 和 gcc 4.7+</p>
<p>本文选用cmake 2.8.9 和 gcc4.8.1。<br>这2个软件都只能使用源码编译安装。</p>
<p>cmake的很简单，直接下载<br>wget <a href="http://www.cmake.org/files/v2.8/cmake-2.8.9.tar.gz">http://www.cmake.org/files/v2.8/cmake-2.8.9.tar.gz</a><br>然后解压进行编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure>

<p>###二、安装gcc 4.8.1<br>####1、下载gcc 4.8.1源码包：<br><a href="http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-4.8.1/gcc-4.8.1.tar.bz2">http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-4.8.1/gcc-4.8.1.tar.bz2</a><br>我是虚拟机里面装的Linux，我嫌wget太慢，所以自己在Windows上用迅雷下好，然后共享到Linux中。</p>
<p>####2、解压：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -jxvf gcc-4.8.1.tar.bz2</span><br></pre></td></tr></table></figure>

<p>####3、下载编译所需的依赖包：<br>这个步骤有两种方式完成：<br>a) 如果Linux有网络连接，直接这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> gcc-4.8.1</span><br><span class="line">./contrib/download_prerequisites</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>

<p>b) 如果Linux没有网络连接（我主机和虚拟机是Host-only，不能联网，所以另外想办法），则用Windows上网下载这几个包：<br><a href="ftp://ftp.gnu.org/gnu/gmp/gmp-4.3.2.tar.bz2">ftp://ftp.gnu.org/gnu/gmp/gmp-4.3.2.tar.bz2</a><br><a href="http://www.mpfr.org/mpfr-2.4.2/mpfr-2.4.2.tar.bz2">http://www.mpfr.org/mpfr-2.4.2/mpfr-2.4.2.tar.bz2</a><br><a href="http://www.multiprecision.org/mpc/download/mpc-0.8.1.tar.gz">http://www.multiprecision.org/mpc/download/mpc-0.8.1.tar.gz</a><br>有人问，一定要下载几个版本吗？下载最新的版本行不行？我没试过，也不知道，我是按照gcc-4.8.1/contrib/download_prerequisites脚本里面的版本下载的。既然里面已经说了这几个版本，那我就严格按照它的要求来做。<br>然后解压并移动到gcc-4.8.1下面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xjf gmp-4.3.2.tar.bz2</span><br><span class="line">tar -xjf mpfr-2.4.2.tar.bz2</span><br><span class="line">tar -xzf mpc-0.8.1.tar.gz</span><br><span class="line">mv gmp-4.3.2 gcc-4.8.1/gmp</span><br><span class="line">mv mpfr-2.4.2 gcc-4.8.1/mpfr</span><br><span class="line">mv mpc-0.8.1 gcc-4.8.1/mpc</span><br></pre></td></tr></table></figure>
<p>这样的做法好处是，不用单独编译gmp、mpfr和mpc三个包，放在gcc源码下面一起编译（事实上这也是gcc-4.8.1/contrib/download_prerequisites脚本的做法，个人感觉更简洁些）。</p>
<p>####4、新建目录用于存放编译结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir gcc-build-4.8.1</span><br></pre></td></tr></table></figure>

<p>####5、进入新目录，并执行configure命令，产生makefile：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> gcc-build-4.8.1</span><br><span class="line">../gcc-4.8.1/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</span><br></pre></td></tr></table></figure>
<p>具体选项不多解释，大家可以自己查看，我只用到c和c++，所以只编译这两种语言的编译器。</p>
<p>####6、编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j4</span><br></pre></td></tr></table></figure>
<p>我是i5四核，所以开4个线程同时编译，要是有8核就更爽了~我在虚拟机里面花了30分钟不到的时间，不算太慢了。<br>####7、安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>####8、大功告成，检查版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ --version</span><br><span class="line">g++ (GCC) 4.8.1</span><br><span class="line">Copyright (C) 2013 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions. There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>

<p>###三、编译安装<br>下载mariadb源码mariadb-10.0.14.tar.gz<br> <a href="https://downloads.mariadb.org/mariadb/10.0.14/">https://downloads.mariadb.org/mariadb/10.0.14/</a></p>
<p>首先需要修改tokudb的cmake编译文件，去掉fuse-linker-plugin相关内容<br>修改mariadb-10.0.14/storage/tokudb/ft-index/cmake_modules/TokuSetupCompiler.cmake<br>去掉所有的 -fuse-linker-plugin ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  set(CMAKE_C_FLAGS_RELWITHDEBINFO &quot;-flto -fuse-linker-plugin $&#123;CMAKE_C_FLAGS_RELWITHDEBINFO&#125; -g -O3 -UNDEBUG&quot;)</span></span><br><span class="line"><span class="comment">#  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO &quot;-flto -fuse-linker-plugin $&#123;CMAKE_CXX_FLAGS_RELWITHDEBINFO&#125; -g -O3 -UNDEBUG&quot;)</span></span><br><span class="line"><span class="comment">#  set(CMAKE_C_FLAGS_RELEASE &quot;-g -O3 -flto -fuse-linker-plugin $&#123;CMAKE_C_FLAGS_RELEASE&#125; -UNDEBUG&quot;)</span></span><br><span class="line"><span class="comment">#  set(CMAKE_CXX_FLAGS_RELEASE &quot;-g -O3 -flto -fuse-linker-plugin $&#123;CMAKE_CXX_FLAGS_RELEASE&#125; -UNDEBUG&quot;)</span></span><br><span class="line"><span class="comment">#  set(CMAKE_EXE_LINKER_FLAGS &quot;-g -fuse-linker-plugin $&#123;CMAKE_EXE_LINKER_FLAGS&#125;&quot;)</span></span><br><span class="line"><span class="comment">#  set(CMAKE_SHARED_LINKER_FLAGS &quot;-g -fuse-linker-plugin $&#123;CMAKE_SHARED_LINKER_FLAGS&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">set</span>(CMAKE_C_FLAGS_RELWITHDEBINFO <span class="string">&quot;-flto  <span class="variable">$&#123;CMAKE_C_FLAGS_RELWITHDEBINFO&#125;</span> -g -O3 -UNDEBUG&quot;</span>)</span><br><span class="line">  <span class="built_in">set</span>(CMAKE_CXX_FLAGS_RELWITHDEBINFO <span class="string">&quot;-flto <span class="variable">$&#123;CMAKE_CXX_FLAGS_RELWITHDEBINFO&#125;</span> -g -O3 -UNDEBUG&quot;</span>)</span><br><span class="line">  <span class="built_in">set</span>(CMAKE_C_FLAGS_RELEASE <span class="string">&quot;-g -O3 -flto  <span class="variable">$&#123;CMAKE_C_FLAGS_RELEASE&#125;</span> -UNDEBUG&quot;</span>)</span><br><span class="line">  <span class="built_in">set</span>(CMAKE_CXX_FLAGS_RELEASE <span class="string">&quot;-g -O3 -flto  <span class="variable">$&#123;CMAKE_CXX_FLAGS_RELEASE&#125;</span> -UNDEBUG&quot;</span>)</span><br><span class="line">  <span class="built_in">set</span>(CMAKE_EXE_LINKER_FLAGS <span class="string">&quot;-g  <span class="variable">$&#123;CMAKE_EXE_LINKER_FLAGS&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">set</span>(CMAKE_SHARED_LINKER_FLAGS <span class="string">&quot;-g  <span class="variable">$&#123;CMAKE_SHARED_LINKER_FLAGS&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>然后是/home/gao-compile/mariadb-10.0.14/storage/tokudb/CMakeLists.txt<br>去掉所有的 -fuse-linker-plugin ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SET(CMAKE_MODULE_LINKER_FLAGS_RELEASE &quot;$&#123;CMAKE_MODULE_LINKER_FLAGS_RELEASE&#125; -flto -fuse-linker-plugin&quot;)</span></span><br><span class="line"><span class="comment">#SET(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO &quot;$&#123;CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO&#125; -flto -fuse-linker-plugin&quot;)</span></span><br><span class="line"></span><br><span class="line">SET(CMAKE_MODULE_LINKER_FLAGS_RELEASE <span class="string">&quot;<span class="variable">$&#123;CMAKE_MODULE_LINKER_FLAGS_RELEASE&#125;</span> -flto&quot;</span>)</span><br><span class="line">SET(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO <span class="string">&quot;<span class="variable">$&#123;CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO&#125;</span> -flto&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>然后进行编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> mariadb-10.0.14</span><br><span class="line">mkdir release</span><br><span class="line">./BUILD/compile-pentium64-max --prefix=/home/gao-compile/mariadb-10.0.14/release</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>然后在/home/gao-compile/mariadb-10.0.14/release/lib/plugin 目录中找到 ha_tokudb.so动态库。<br>这个就是我们要的东西了！</p>
<p>注：其实可以直接在mariadb-10.0.14/storage/tokudb目录中直接进行编译，而不用去编译整个mariadb，因为编译出来的也无法使用， mysqld可执行程序依赖GLIBCXX_3.4.15</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@GXX release]<span class="comment"># ldd bin/mysqld</span></span><br><span class="line">bin/mysqld: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15<span class="string">&#x27; not found (required by bin/mysqld)</span></span><br></pre></td></tr></table></figure>

<p>在mariadb官网<a href="https://downloads.mariadb.org/mariadb/10.0.14/%E4%B8%8B%E8%BD%BD%E5%B8%A6%E6%9C%89mariadb%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E3%80%82%E4%BB%8Emariadb%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD10.0.14%E7%9A%84%E4%B8%8D%E5%B8%A6tokudb%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8Ftar%E5%8C%85%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%86%E6%88%91%E4%BB%AC%E7%BC%96%E8%AF%91%E5%A5%BD%E7%9A%84tokudb.so%E6%8B%B7%E8%B4%9D%E5%88%B0">https://downloads.mariadb.org/mariadb/10.0.14/下载带有mariadb的二进制包。从mariadb官网下载10.0.14的不带tokudb的可执行程序tar包，然后将我们编译好的tokudb.so拷贝到</a><br>[maradb10.0.14]/lib/plugin/下<br>我这里下载的包，10.0.14<br>mariadb-10.0.14-linux-x86_64.tar.gz </p>
<p>###四、初始化<br>####1、前期账号创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; groupadd mysql</span><br><span class="line">shell&gt; useradd -g mysql mysql</span><br></pre></td></tr></table></figure>

<p>####2、解压软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">shell&gt; tar -zxvf mariadb-10.0.14-linux-x86_64.tar.gz</span><br><span class="line">shell&gt; ln -s mariadb-10.0.14-linux-x86_64 mysql</span><br></pre></td></tr></table></figure>

<p>####3、设置权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; <span class="built_in">cd</span> mysql</span><br><span class="line">shell&gt; chown -R mysql .</span><br><span class="line">shell&gt; chgrp -R mysql .</span><br></pre></td></tr></table></figure>

<p>####4、创建配置文件/etc/my.cnf<br>创建存放数据源的目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Shell&gt; mkdir -p /<span class="keyword">var</span>/lib/mysql</span><br><span class="line">Shell&gt; mkdir -p /data/mysqldata /data/mysqllog</span><br><span class="line">Shell&gt; chown -R mysql:mysql /<span class="keyword">var</span>/lib/mysql /data/mysqldata /data/mysqllog</span><br></pre></td></tr></table></figure>

<p>在附件中给出，请参考附配置文件内容</p>
<p>####5、初始化DB</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Shell&gt; scripts/mysql_install_db --user=mysql --defaults-file=/etc/my.cnf</span><br><span class="line">shell&gt; chown -R root .</span><br></pre></td></tr></table></figure>

<p>####6、修改系统参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> never &gt; /sys/kernel/mm/redhat_transparent_hugepage/defrag</span><br><span class="line"><span class="keyword">echo</span> never &gt; /sys/kernel/mm/redhat_transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag </span><br></pre></td></tr></table></figure>
<p>建议写到 /etc/rc.local 中，重启后也可生效</p>
<p>####7、启动数据库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">shell&gt; bin/mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></table></figure>

<p>####8、把启动文件放去自启动中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chkconfig --add mysqld</span><br><span class="line">service mysqld start</span><br><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure>
<p>####9、安装tokudb支持</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INSTALL SONAME <span class="string">&#x27;ha_tokudb&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>查看是否支持</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show engines</span><br><span class="line">    -&gt; ;</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                                    | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                                      | NO           | NO   | NO         |</span><br><span class="line">| CSV                | YES     | CSV storage engine                                                         | NO           | NO   | NO         |</span><br><span class="line">| MRG_MyISAM         | YES     | Collection of identical MyISAM tables                                      | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears)             | NO           | NO   | NO         |</span><br><span class="line">| MEMORY             | YES     | Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables                  | NO           | NO   | NO         |</span><br><span class="line">| TokuDB             | YES     | Tokutek TokuDB Storage Engine with Fractal Tree(tm) Technology             | YES          | YES  | YES        |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                                         | NO           | NO   | NO         |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                                     | NO           | NO   | NO         |</span><br><span class="line">| FEDERATED          | YES     | FederatedX pluggable storage engine                                        | YES          | NO   | YES        |</span><br><span class="line">| InnoDB             | DEFAULT | Percona-XtraDB, Supports transactions, row-level locking, and foreign keys | YES          | YES  | YES        |</span><br><span class="line">| Aria               | YES     | Crash-safe tables with MyISAM heritage                                     | NO           | NO   | NO         |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.11 sec)</span><br></pre></td></tr></table></figure>
<p>看到上面一行红字就代表数据库支持TokuDB的存储引擎了。</p>
<p>tokudb安装顺利完成，后附配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># cat /etc/my.cnf </span></span><br><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="comment">#public</span></span><br><span class="line">max_connections=3000</span><br><span class="line">max_connect_errors=6000</span><br><span class="line">key_buffer_size = 384M</span><br><span class="line">low_priority_updates = 1</span><br><span class="line">back_log = 1500</span><br><span class="line">query_cache_type = 1</span><br><span class="line">query_cache_size = 64M</span><br><span class="line">query_cache_limit = 4M</span><br><span class="line">query_cache_min_res_unit = 2k</span><br><span class="line">tmp_table_size = 256M</span><br><span class="line">read_buffer_size=1M</span><br><span class="line">read_rnd_buffer_size = 16M</span><br><span class="line">bulk_insert_buffer_size = 64M</span><br><span class="line">max_allowed_packet = 64M</span><br><span class="line">thread_cache_size = 300</span><br><span class="line"><span class="comment">#file</span></span><br><span class="line">innodb_file_per_table</span><br><span class="line"><span class="comment">#buffer</span></span><br><span class="line">innodb_buffer_pool_size = 2500M</span><br><span class="line">innodb_log_buffer_size = 64M</span><br><span class="line">join_buffer_size = 16M</span><br><span class="line">sort_buffer_size = 16M</span><br><span class="line">innodb_max_dirty_pages_pct = 90</span><br><span class="line">innodb_lock_wait_timeout = 120</span><br><span class="line">innodb_thread_concurrency = 16</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把TokuDB datadir以及logdir和MySQL的datadir分开，美观点，也可以不分开，注释掉本行以及下面2行即可</span></span><br><span class="line">tokudb_data-dir = /data/mysqldata</span><br><span class="line">tokudb_log-dir = /data/mysqllog</span><br><span class="line"><span class="comment">#TokuDB的行模式，建议用 FAST 就足够了，如果磁盘空间很紧张，建议用 SMALL</span></span><br><span class="line">tokudb_row_format = tokudb_small</span><br><span class="line">tokudb_row_format = tokudb_fast</span><br><span class="line">tokudb_cache_size = 2G</span><br><span class="line"><span class="comment">#其他大部分配置其实可以不用修改的，只需要几个关键配置即可</span></span><br><span class="line">tokudb_commit_sync = 0</span><br><span class="line">tokudb_directio = 1</span><br><span class="line">tokudb_read_block_size = 128K</span><br><span class="line">tokudb_read_buf_size = 128K</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>tokudb</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal error - Cannot call overloaded function for non-object</title>
    <url>/2013/12/31/drupal-error-cannot-call-overloaded-function-for-non-object/</url>
    <content><![CDATA[<p>今天在测试API的时候，apache总是会莫名其妙的报</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PHP Fatal <span class="built_in">error</span>: Cannot call overloaded <span class="function"><span class="keyword">function</span> <span class="title">for</span> <span class="title">non</span>-<span class="title">object</span> <span class="title">in</span> /<span class="title">var</span>/<span class="title">www</span>/<span class="title">html</span>/<span class="title">includes</span>/<span class="title">database</span>/<span class="title">query</span>.<span class="title">inc</span> <span class="title">on</span> <span class="title">line</span> 331</span></span><br></pre></td></tr></table></figure>
<p>找了很久的资料，发现可以配置apache的CoreDumpDirectory命令，其实就是把apache的内核目录放到其他目录下。如/tmp/apache_core，并给apache_core文件给予chown apache:apache /tmp/apache_core的权限。这样可以解决问题。</p>
<p>但是需要注意：<br>该命令会导致tmp文件越来越大。</p>
<p>使用以下命里进行调试<br>gdb /usr/bin/httpd /tmp/apache_core/core</p>
]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>drupal</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal 获取客户端真实IP</title>
    <url>/2013/12/11/drupal-%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%9F%E5%AE%9Eip/</url>
    <content><![CDATA[<p>如果网站走CDN。必须在settings.php设置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conf</span>[<span class="string">&#x27;reverse_proxy&#x27;</span>] = <span class="literal">TRUE</span>;</span><br></pre></td></tr></table></figure>
<p>这样才可以获取到客户端的真实IP。</p>
]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>cdn_real_ip</tag>
      </tags>
  </entry>
  <entry>
    <title>drupal8中使用vue</title>
    <url>/2016/11/27/drupal8%E4%B8%AD%E4%BD%BF%E7%94%A8vue/</url>
    <content><![CDATA[<h2 id="一、什么是vue"><a href="#一、什么是vue" class="headerlink" title="一、什么是vue"></a>一、什么是vue</h2><p><a href="https://cn.vuejs.org/">点击这里</a>跳转vue官网</p>
<p>Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。</p>
<p>Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。</p>
<h2 id="二、drupal融合vue"><a href="#二、drupal融合vue" class="headerlink" title="二、drupal融合vue"></a>二、drupal融合vue</h2><p>OK，新建一个模块，<code>cloud_system</code>，初始化一个<code>vue</code>在<code>drupal</code>中的根模版，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样，所有的路由都输出这个模版，之后前端路由解析填充<code>router-view</code></p>
<h2 id="三、vue的模块化开发"><a href="#三、vue的模块化开发" class="headerlink" title="三、vue的模块化开发"></a>三、vue的模块化开发</h2><p>详见<strong>vue在drupal中的模块化开发</strong></p>
]]></content>
      <categories>
        <category>drupal</category>
      </categories>
      <tags>
        <tag>drupal</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git自动化部属</title>
    <url>/2016/12/21/git%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>gitlab和github都支持通过webhook自动部署，本文使用gitlab+webhook的方式实现自动化部署项目。</p>
<p>1、填写回调URL<br>随便在gitlab上找一个项目，填写回调URL，如果有Push请求，gitlab会自动回调你填写的这个地址。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20161221/2016122175313_33517.png" alt="回调地址"></p>
<p>2、开发服务器配置<br>一般php是通过php-fpm来运行，而php-fpm一般由apache用户来运行。确保clone下来的仓库权限比如为apache.<br>可通过如下命令进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chown apache:apache you_project * -R</span></span><br></pre></td></tr></table></figure>

<p>创建apache用户的.ssh文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u apache ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>3、测试<br>在本地commit一个提交.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git ci -am &#x27;test webhook&#x27;</span></span><br><span class="line"><span class="comment"># git push origin dev</span></span><br></pre></td></tr></table></figure>

<p>在开发服务器上查看日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tail -f /var/log/php-fpm/www-error.log</span></span><br></pre></td></tr></table></figure>

<p>可以看到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[20-Dec-2016 23:00:59 Asia/Chongqing] Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; From git.xxx.cn:your_project/project_name</span><br><span class="line">    [1] =&gt;  * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">    [2] =&gt; Updating c02949b..f8c52c5</span><br><span class="line">    [3] =&gt; Fast-forward</span><br><span class="line">    [4] =&gt;  webhook.php |   42 ++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">    [5] =&gt;  1 files changed, 42 insertions(+), 0 deletions(-)</span><br><span class="line">    [6] =&gt;  create mode 100644 webhook.php</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>搞定！</p>
<p>附、webhook.php源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$event</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_GITLAB_EVENT&#x27;</span>];</span><br><span class="line"><span class="variable">$client_ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="variable">$access_ip</span> = <span class="keyword">array</span>(<span class="string">&#x27;192.168.112.151&#x27;</span>);</span><br><span class="line"><span class="comment">// access ip</span></span><br><span class="line"><span class="keyword">if</span> (!in_array(<span class="variable">$client_ip</span>, <span class="variable">$access_ip</span>)) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Invalid ip [<span class="subst">&#123;$client_ip&#125;</span>]&quot;</span> . PHP_EOL;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$event</span> == <span class="string">&#x27;Push Hook&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// get json data</span></span><br><span class="line">  <span class="variable">$input</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line">  <span class="variable">$json</span> = json_decode(<span class="variable">$input</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$json</span>[<span class="string">&#x27;project&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] != <span class="string">&#x27;portal&#x27;</span>) &#123;</span><br><span class="line">     <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$branch</span> = <span class="variable">$json</span>[<span class="string">&#x27;ref&#x27;</span>];</span><br><span class="line">  <span class="keyword">switch</span> (<span class="variable">$branch</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;refs/heads/dev&#x27;</span>:</span><br><span class="line">      exec(<span class="string">&quot;cd /var/www/html/voss/portal/;/usr/bin/git pull origin dev 2&gt;&amp;1&quot;</span>, <span class="variable">$output</span>, <span class="variable">$result</span>);</span><br><span class="line">      error_log(print_r(<span class="string">&#x27;pull dev&#x27;</span>, <span class="literal">true</span>));</span><br><span class="line">      error_log(print_r(<span class="variable">$output</span>, <span class="literal">true</span>));</span><br><span class="line">      error_log(print_r(<span class="variable">$result</span>, <span class="literal">true</span>));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      exec(<span class="string">&quot;cd /var/www/html/voss/portal/;/usr/bin/git pull origin master 2&gt;&amp;1&quot;</span>, <span class="variable">$output</span>, <span class="variable">$result</span>);</span><br><span class="line">      error_log(print_r(<span class="string">&#x27;pull master&#x27;</span>, <span class="literal">true</span>));</span><br><span class="line">      error_log(print_r(<span class="variable">$output</span>, <span class="literal">true</span>));</span><br><span class="line">      error_log(print_r(<span class="variable">$result</span>, <span class="literal">true</span>));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hook_form中使用Drupal.attachBehaviors</title>
    <url>/2014/04/04/hook_form%E4%B8%AD%E4%BD%BF%E7%94%A8drupalattachbehaviors/</url>
    <content><![CDATA[<p>如果form中有ajax事件，可能需要重新绑定事件，可以这样解决，代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements hook_form_alter().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxx_form_alter</span>(<span class="params">&amp;<span class="variable">$commands</span>, &amp;<span class="variable">$form</span>, <span class="variable">$form_state</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//用于Drupal.attachBehaviors(document)</span></span><br><span class="line">  <span class="variable">$commands</span>[] =  ajax_command_invoke(<span class="literal">NULL</span>, <span class="string">&#x27;xxx_form_alter_attach_behaviors&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">Drupal.behaviors.xxx_form = &#123;</span><br><span class="line">  attach: <span class="function"><span class="keyword">function</span> (<span class="params">context, settings</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//js here</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn.xxx_form_alter_attach_behaviors = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Drupal.attachBehaviors(document);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Drupal</category>
      </categories>
      <tags>
        <tag>hook_form</tag>
      </tags>
  </entry>
  <entry>
    <title>infiniDB安装配置</title>
    <url>/2015/06/24/infiniDB%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>infiniDB是为大数据而生的列式数据库，适合做统计分析，如SUM,AVG,MAX,MIN等。笔者没有研究过infoBright，貌似需要收费，并且社区版本不支持DML。</p>
<p>总结了一些infiniDB的特点:<br>1、所有字段的默认值都为NULL，不需要设置其他值。<br>2、不需要创建索引，不需要优化表<br>3、多线程设计，查询时完美利用多CPU<br>4、高并发:理论上无并发的限制,只受制于服务器的容量<br>5、DML(可以视为是SQL的子集)支持 : 语句insert, update, delete<br>6、数据存储方面主要是按列拆，按行(范围)拆，核心算法是hash join，跟oracle很类似。<br>    具体有以下几方面：<br>    1）、Block : 8k的数据块,有Logical Block ID,大小不能定制,但预读的数目可以定制<br>    2）、Extent : 一个逻辑空间尺寸,存在于一个或多个的称为segment文件的物理文件中. extent大小受1)默认的行数2)一个列的数据类型, 如默认行数是8M,对一字节数据类型来说,Extent大小就是8M; 对于8字节数据类型来说,就是64M;对于可变长数据类型来说也是64M.当一个Extent满了,一个新的Extent就会被创建出来.<br>    3）、Segment File : 当一个Segment文件达到它的Extent包含的最大数目,一个新的Segment文件就会被创建出来<br>    4）、Partition : 与row-based DB不同之处在于它是一个逻辑上的对象.由一个或多个Segment文件组成. 一个列的partition数目是不限的.</p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20150624/20150624140759_49711.png" alt="数据存储示例图"></p>
<blockquote>
<p>安装过程：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、访问https://github.com/infinidb/infinidb/blob/4.6.2-1/INSTALL，按照帮助文档进行安装，笔者安装的版本是4.6.2</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">git <span class="built_in">clone</span> http://github.com/infinidb/mysql</span><br><span class="line">git <span class="built_in">clone</span> http://github.com/infinidb/infinidb</span><br><span class="line">-- or --</span><br><span class="line">tar -zxf &lt;srcfile&gt;</span><br><span class="line"><span class="built_in">cd</span> mysql</span><br><span class="line">./configure --prefix=/data/mysql/</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="built_in">cd</span> ../infinidb</span><br><span class="line">./configure --prefix=/data/</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">注意：root下的文件夹名称必须为infinidb和mysql，否则编译的时候会报错。</span><br><span class="line"></span><br><span class="line">2、安装完以后执行/usr/<span class="built_in">local</span>/Calpont/bin/postConfigure进行配置，按默认就行</span><br><span class="line">3、设置一些别名， . /usr/<span class="built_in">local</span>/Calpont/bin/calpontAlias</span><br><span class="line">4、直接访问idbmysql进入管理。</span><br></pre></td></tr></table></figure>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20150624/20150624141731_29245.jpg" alt="idbmysql"></p>
<blockquote>
<p>测试</p>
</blockquote>
<p>10亿条数据count:<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20150624/20150624141741_84796.jpg" alt="10亿条数据count速度"></p>
<p>性能杠杠滴！</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>infiniDB</tag>
      </tags>
  </entry>
  <entry>
    <title>infiniDB与clickhouse对比</title>
    <url>/2016/08/22/infinidb%E4%B8%8Eclickhouse%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>机器配置：</p>
<p>测试机：    dell R510<br>cpu：     xeon E5620<em>2<br>RAID卡：    H700<br>系统    ：ubuntu 14.04<br>内核：    Linux ubuntu 4.2.0-27-generic<br>raid级别：    raid0<br>文件系统：    ext4<br>硬盘：     SSD 240G</em>2<br>IP：    192.168.112.73</p>
<p>一、安装<br>1、infiniDB的安装见 <a href="http://verynull.com/2015/06/24/infiniDB%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">http://verynull.com/2015/06/24/infiniDB安装配置/</a></p>
<p>2、clickhouse安装<br>只支持ubutu14.04,16.04，12.04，但是我在16.04上没有安装起来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4<span class="comment"># optional</span></span><br><span class="line"></span><br><span class="line">sudo mkdir -p /etc/apt/sources.list.d</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://repo.yandex.ru/clickhouse/trusty stable main&quot;</span> |</span><br><span class="line">sudo tee /etc/apt/sources.list.d/clickhouse.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install clickhouse-server-common clickhouse-client</span><br><span class="line"></span><br><span class="line">sudo service clickhouse-server start</span><br><span class="line">clickhouse-client</span><br></pre></td></tr></table></figure>

<p>3、就安装过程而言，clickhouse方便很多，infiniDB要编译老半天。</p>
<p>二、性能测试</p>
<p>1、创建表</p>
<p>infiniDB:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `billing` (</span><br><span class="line">`did` int(11) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`hit` bigint(20) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`reqs` bigint(20) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`rx` bigint(20) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`tx` bigint(20) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`logtime` bigint(20) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`tpr` bigint(20) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;&#x27;</span></span><br><span class="line">) ENGINE=infiniDB DEFAULT CHARSET=latin1</span><br></pre></td></tr></table></figure>

<p>clickhouse:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE billing (id Int32,did Int32,hit Int64,reqs Int64,rx Int64,tx Int64,logtime Int64,tpr Int64) ENGINE=Log;</span><br></pre></td></tr></table></figure>


<p>2、导入csv数据</p>
<p>csv格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">106,9,10,123,11858014,1467133200,330,0</span><br><span class="line">122,0,2,506,621,1467133200,150,0</span><br><span class="line">124,112,249,1131297,1899996,1467133200,49,0</span><br><span class="line">127,3,12,64257,88503,1467133200,66,0</span><br></pre></td></tr></table></figure>

<p>数据量9000万,大小4.5G。</p>
<p>infiniDB:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /data/mysql/bin/mysql --defaults-file=/data/mysql/my.cnf --local-infile -u root monitor -e <span class="string">&quot;load data local infile &#x27;/root/1.txt&#x27; into table billing FIELDS TERMINATED BY &#x27;,&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<p>耗时：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0.60user </span><br><span class="line">2.50system </span><br><span class="line">4:14.61elapsed 1%CPU (0avgtext+0avgdata 3640maxresident)k</span><br><span class="line">0inputs+0outputs (0major+227minor)pagefaults 0swaps</span><br></pre></td></tr></table></figure>

<p>clickhouse:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 1.txt | clickhouse-client --query=<span class="string">&quot;INSERT INTO monitor.monitor_data FORMAT CSV&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>耗时：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">real1m6.809s</span><br><span class="line">user1m26.720s</span><br><span class="line">sys 0m6.724s</span><br></pre></td></tr></table></figure>

<p>clickhouse导入速度明显快很多。</p>
<p>3、查询速度</p>
<p>SQL:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT logtime, SUM(hit) as hit, SUM(reqs) as reqs, SUM(rx) as rx,SUM(tx) as tx, round(avg(tpr)) as tpr FROM billingWHERE did &gt; 0AND logtime &gt;= 1467302400 AND logtime &lt;= 1469980799 GROUP BY logtime ORDER BY l</span><br><span class="line">ogtime;</span><br></pre></td></tr></table></figure>

<p>infiniDB:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9663 rows <span class="keyword">in</span> <span class="built_in">set</span> (1.26 sec)</span><br></pre></td></tr></table></figure>

<p>clickhouse:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">8924 rows <span class="keyword">in</span> <span class="built_in">set</span>. Elapsed: 2.676 sec. Processed 91.80 million rows, 4.77 GB (34.30 million rows/s., 1.78 GB/s.) </span><br></pre></td></tr></table></figure>

<p>infiniDB速度较快。</p>
<p>4、2亿数据对比</p>
<p>SQL同上</p>
<p>infiniDB:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9663 rows <span class="keyword">in</span> <span class="built_in">set</span> (2.24 sec)</span><br></pre></td></tr></table></figure>

<p>clickhouse:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">8924 rows <span class="keyword">in</span> <span class="built_in">set</span>. Elapsed: 4.215 sec. Processed 183.61 million rows, 9.55 GB (43.56 million rows/s., 2.26 GB/s.) </span><br></pre></td></tr></table></figure>

<p>infiniDB较快。</p>
<p>5、10亿数据对比</p>
<p>SQL同上</p>
<p>infiniDB:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9663 rows <span class="keyword">in</span> <span class="built_in">set</span> (9.58 sec)</span><br></pre></td></tr></table></figure>

<p>clickhouse:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">8924 rows <span class="keyword">in</span> <span class="built_in">set</span>. Elapsed: 17.040 sec. Processed 1.01 billion rows, 52.51 GB (56.67 million rows/s., 2.95 GB/s.) </span><br></pre></td></tr></table></figure>

<p>infiniDB更快。</p>
<p>6、count对比<br>infiniDB:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+------------+</span><br><span class="line">| count(*) |</span><br><span class="line">+------------+</span><br><span class="line">| 1009844583 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (6.14 sec)</span><br></pre></td></tr></table></figure>

<p>clickhouse:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT count(*)</span><br><span class="line">FROM billing </span><br><span class="line"></span><br><span class="line">┌────count()─┐</span><br><span class="line">│ 1009844583 │</span><br><span class="line">└────────────┘</span><br><span class="line"></span><br><span class="line">1 rows <span class="keyword">in</span> <span class="built_in">set</span>. Elapsed: 1.120 sec. Processed 1.01 billion rows, 4.04 GB (901.82 million rows/s., 3.61 GB/s.) </span><br></pre></td></tr></table></figure>

<p>7、压缩比<br>infiniDB:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">22G billing</span><br></pre></td></tr></table></figure>

<p>clickhouse:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">24G billing</span><br></pre></td></tr></table></figure>

<p>压缩比相差不多。</p>
<p>结果：<br>1、infiniDB会使用所有CPU，而clickhouse最多使用10个。<br>2、clickhouse在大数据量的时候，处理速度还是比较令人满意的。<br>3、clickhouse在导入数据的时候，查询会被卡住，而infiniDB不会。<br>4、infiniDB性能更好。</p>
<p>附对比图：<br>这里clickhouse是Log引擎。<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20160822/20160822222132_99553.png" alt="对比图"></p>
<hr>
<p>经一位俄罗斯网友提醒,MergeTree引擎比Log引擎更高效，因为Log引擎会全表扫描，而MergeTree的结构是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxxx@ubuntu:/opt/clickhouse$ ls data/monitor/billing_mergetree</span><br><span class="line">20150829_20150831_10964_10994_2</span><br><span class="line">20160101_20160131_10_11360_30 </span><br><span class="line">20160401_20160430_12_9964_31</span><br><span class="line">20160609_20160613_11302_11350_4</span><br><span class="line">20160808_20160820_10972_11250_2</span><br><span class="line">20150325_20150331_4_9822_23 </span><br><span class="line">20150901_20150930_1030_11316_50</span><br><span class="line">20160201_20160229_244_10606_27</span><br><span class="line">20160401_20160430_9982_11362_10 </span><br><span class="line">20160701_20160731_308_8668_14 </span><br><span class="line">20160820_20160820_11260_11260_0</span><br><span class="line">20150401_20150430_16_9932_57</span><br><span class="line">20151001_20151031_8_11352_39 </span><br><span class="line">20160220_20160229_10618_10788_10</span><br><span class="line">20160501_20160531_530_11042_23</span><br><span class="line">20160701_20160731_8678_10786_12</span><br><span class="line">20160820_20160820_11266_11266_0</span><br><span class="line">20150501_20150531_102_10032_75</span><br><span class="line">20151009_20151011_11356_11356_0</span><br><span class="line">20160229_20160229_10804_10812_1 </span><br><span class="line">20160528_20160531_11056_11124_6 </span><br><span class="line">20160731_20160731_10798_10798_0</span><br><span class="line">detached</span><br></pre></td></tr></table></figure>

<p>这种存储结构就是把每个月的数据单独放置在一个文件夹中，这样就避免了全表扫描。</p>
<p>附对比图:<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20160823/20160823113203_30109.png" alt="对比图"></p>
<p>结论：<br>clickhouse速度更快！</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>clickhouse</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes安装部署实战</title>
    <url>/2021/04/28/kubernetes%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>1、安装kubsphere<br>2、安装监控prometheus<br>3、安装日志elk<br>4、CI gitlab+jenkins 镜像push到harbo<br>5、CD  安装spinaker 自动部署到k8s集群</p>
<p>先搞CI</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>kubernetes安装</tag>
      </tags>
  </entry>
  <entry>
    <title>MacVim处理中文时卡顿、CPU占用过高问题</title>
    <url>/2014/03/11/macvim%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E6%97%B6%E5%8D%A1%E9%A1%BF%E3%80%81cpu%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="升级到vim-7-4以后情况有点好转。"><a href="#升级到vim-7-4以后情况有点好转。" class="headerlink" title="升级到vim 7.4以后情况有点好转。"></a>升级到vim 7.4以后情况有点好转。</h2><hr>
<p>我一般使用vim编程。但是输入中文和&amp;符号时时比较痛苦。经常出现卡顿。</p>
<p>偶然发现，在Preferences对话框中选择Advanced选项卡，去掉Use Core Text renderer选项的勾勾，输入大段中文也不会造成卡顿，至此问题解决。</p>
<p>但是这样会导致屏幕上下滚动的时候有点晃眼。难道是要我抛弃vim的节奏？</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB和Percona的引擎tokudb性能对比测试</title>
    <url>/2015/11/08/mariaDB%E5%92%8CPercona%E7%9A%84%E5%BC%95%E6%93%8Etokudb%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>MariaDB和Mysql对比（配置4核4G）:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Welcome to the MySQL monitor.  Commands end with ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id is <span class="number">2</span></span><br><span class="line">Server version: <span class="number">5.6</span>.<span class="number">25</span>-<span class="number">73.1</span> Percona Server (GPL), Release <span class="number">73.1</span>, Revision <span class="number">07</span>b797f</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Welcome to the MariaDB monitor.  Commands end with ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MariaDB connection id is <span class="number">4</span></span><br><span class="line">Server version: <span class="number">10.0</span>.<span class="number">14</span>-MariaDB MariaDB Server</span><br></pre></td></tr></table></figure>

<p>###1、MariaDB导入数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">MariaDB [billing]&gt; load data infile <span class="string">&#x27;/home/user_logs.txt&#x27;</span> into table cloud_innodb FIELDS TERMINATED BY <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">641098</span> rows affected, <span class="number">65535</span> warnings (<span class="number">1</span> min <span class="number">18.02</span> sec)</span><br><span class="line">Records: <span class="number">641098</span>  Deleted: <span class="number">0</span>  Skipped: <span class="number">0</span>  Warnings: <span class="number">641098</span></span><br><span class="line"></span><br><span class="line">MariaDB [billing]&gt; load data infile <span class="string">&#x27;/home/user_logs.txt&#x27;</span> into table cloud_tokudb FIELDS TERMINATED BY <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">641098</span> rows affected, <span class="number">65535</span> warnings (<span class="number">36.83</span> sec)                                 </span><br><span class="line">Records: <span class="number">641098</span>  Deleted: <span class="number">0</span>  Skipped: <span class="number">0</span>  Warnings: <span class="number">641098</span></span><br></pre></td></tr></table></figure>

<p>Mysql导入数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysql&gt; load data infile <span class="string">&#x27;/home/user_logs.txt&#x27;</span> into table cloud_innodb FIELDS TERMINATED BY <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">641098</span> rows affected, <span class="number">65535</span> warnings (<span class="number">1</span> min <span class="number">10.75</span> sec)</span><br><span class="line">Records: <span class="number">641098</span>  Deleted: <span class="number">0</span>  Skipped: <span class="number">0</span>  Warnings: <span class="number">641098</span></span><br><span class="line"></span><br><span class="line">mysql&gt; load data infile <span class="string">&#x27;/home/user_logs.txt&#x27;</span> into table cloud_tokudb FIELDS TERMINATED BY <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">641098</span> rows affected, <span class="number">65535</span> warnings (<span class="number">33.35</span> sec)</span><br><span class="line">Records: <span class="number">641098</span>  Deleted: <span class="number">0</span>  Skipped: <span class="number">0</span>  Warnings: <span class="number">641098</span></span><br></pre></td></tr></table></figure>

<p>总结：<br>1）、MariaDB导入数据比Mysql要慢一点<br>2）、TokuDB导入数据比InnoDB速度快一倍<br>3）、TokuDB采用多CPU并发导入</p>
<p>###2、MariaDB存储空间</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@localhost billing]<span class="comment"># ll -h</span></span><br><span class="line">-rw-rw----. <span class="number">1</span> mysql mysql <span class="number">1.5</span>K Nov  <span class="number">4</span> <span class="number">14</span>:<span class="number">16</span> cloud_innodb.frm</span><br><span class="line">-rw-rw----. <span class="number">1</span> mysql mysql <span class="number">568</span>M Nov  <span class="number">4</span> <span class="number">14</span>:<span class="number">40</span> cloud_innodb.ibd</span><br><span class="line"></span><br><span class="line">[root@localhost mysqldata]<span class="comment"># ll -h</span></span><br><span class="line">-rw-rw----. <span class="number">1</span> mysql mysql  <span class="number">26</span>M Nov  <span class="number">4</span> <span class="number">14</span>:<span class="number">31</span> _billing_cloud_tokudb_main_172d_1_1b_B_0.tokudb</span><br><span class="line">-rw-rw----. <span class="number">1</span> mysql mysql  <span class="number">64</span>K Nov  <span class="number">4</span> <span class="number">14</span>:<span class="number">31</span> _billing_cloud_tokudb_status_1729_1_1b.tokudb</span><br></pre></td></tr></table></figure>

<p>Mysql存储空间</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@localhost billing]<span class="comment"># ll -h </span></span><br><span class="line">-rw-rw----. <span class="number">1</span> mysql mysql <span class="number">8.9</span>K Nov  <span class="number">4</span> <span class="number">14</span>:<span class="number">17</span> cloud_innodb.frm</span><br><span class="line">-rw-rw----. <span class="number">1</span> mysql mysql <span class="number">568</span>M Nov  <span class="number">4</span> <span class="number">14</span>:<span class="number">36</span> cloud_innodb.ibd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost mysqldata]<span class="comment"># ll -h</span></span><br><span class="line">-rw-rw----. <span class="number">1</span> mysql mysql  <span class="number">26</span>M Nov  <span class="number">4</span> <span class="number">14</span>:<span class="number">37</span> _billing_cloud_tokudb_main_8be1_1_1c_B_0.tokudb</span><br><span class="line">-rw-rw----. <span class="number">1</span> mysql mysql  <span class="number">64</span>K Nov  <span class="number">4</span> <span class="number">14</span>:<span class="number">37</span> _billing_cloud_tokudb_status_8bde_1_1c.tokudb</span><br></pre></td></tr></table></figure>

<p>总结：<br>1）、 MariaDB和Mysql在采用相同引擎的时候存储空间相同<br>2）、 TokuDB的压缩有很多种，上面采用tokudb_lzma,压缩比例最大，但非常消耗CPU，内存<br>3）、 TokuDB和InnoDB从上面的例子来看压缩比率是1：20左右，如果都是整型数据，压缩比率在1：4左右。</p>
<p>###3、MariaDB查询速度<br>重启第一次查询</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">MariaDB [billing]&gt; select count(*) <span class="keyword">from</span> cloud_innodb;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|   <span class="number">641098</span> |</span><br><span class="line">+----------+</span><br><span class="line"><span class="number">1</span> row in set (<span class="number">0.58</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [billing]&gt; select count(*) <span class="keyword">from</span> cloud_tokudb;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|   <span class="number">641098</span> |</span><br><span class="line">+----------+</span><br><span class="line"><span class="number">1</span> row in set (<span class="number">16.55</span> sec)</span><br></pre></td></tr></table></figure>

<p>清缓存（reset query cache）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">MariaDB [billing]&gt; reset query cache;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [billing]&gt; select count(*) <span class="keyword">from</span> cloud_innodb;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|   <span class="number">641098</span> |</span><br><span class="line">+----------+</span><br><span class="line"><span class="number">1</span> row in set (<span class="number">0.42</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [billing]&gt; select count(*) <span class="keyword">from</span> cloud_tokudb;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|   <span class="number">641098</span> |</span><br><span class="line">+----------+</span><br><span class="line"><span class="number">1</span> row in set (<span class="number">0.43</span> sec)</span><br></pre></td></tr></table></figure>

<p>Mysql查询速度</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*) <span class="keyword">from</span> cloud_innodb;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|   <span class="number">641098</span> |</span><br><span class="line">+----------+</span><br><span class="line"><span class="number">1</span> row in set (<span class="number">0.66</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select count(*) <span class="keyword">from</span> cloud_tokudb;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|   <span class="number">641098</span> |</span><br><span class="line">+----------+</span><br><span class="line"><span class="number">1</span> row in set (<span class="number">13.74</span> sec)</span><br></pre></td></tr></table></figure>

<p>清缓存（reset query cache）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysql&gt; reset query cache;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select count(*) <span class="keyword">from</span> cloud_innodb;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|   <span class="number">641098</span> |</span><br><span class="line">+----------+</span><br><span class="line"><span class="number">1</span> row in set (<span class="number">0.38</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select count(*) <span class="keyword">from</span> cloud_tokudb;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|   <span class="number">641098</span> |</span><br><span class="line">+----------+</span><br><span class="line"><span class="number">1</span> row in set (<span class="number">0.49</span> sec)</span><br></pre></td></tr></table></figure>

<p>总结：<br>1）、 查询速度MariaDB和Mysql速度差不多<br>2）、 第一次查询的时候InnoDB和TokuDB速度相差很大<br>3）、 清缓存后查询差不多</p>
<p>###4、并发查询<br>MariaDB：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@localhost mysqldata]<span class="comment"># mysqlslap --concurrency=1000 --iterations=1 --create-schema=&#x27;billing&#x27; --query=&#x27;select count(content) from cloud_innodb where id &gt;9950 and id &lt; 9999;&#x27; --number-of-queries=10</span></span><br><span class="line">Benchmark</span><br><span class="line">	Average number of seconds to run all queries: <span class="number">0.509</span> seconds</span><br><span class="line">	Minimum number of seconds to run all queries: <span class="number">0.509</span> seconds</span><br><span class="line">	Maximum number of seconds to run all queries: <span class="number">0.509</span> seconds</span><br><span class="line">	Number of clients running queries: <span class="number">1000</span></span><br><span class="line">	Average number of queries per client: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[root@localhost mysqldata]<span class="comment"># mysqlslap --concurrency=1000 --iterations=1 --create-schema=&#x27;billing&#x27; --query=&#x27;select count(content) from cloud_tokudb where id &gt;9950 and id &lt; 9999;&#x27; --number-of-queries=10</span></span><br><span class="line">Benchmark</span><br><span class="line">	Average number of seconds to run all queries: <span class="number">0.600</span> seconds</span><br><span class="line">	Minimum number of seconds to run all queries: <span class="number">0.600</span> seconds</span><br><span class="line">	Maximum number of seconds to run all queries: <span class="number">0.600</span> seconds</span><br><span class="line">	Number of clients running queries: <span class="number">1000</span></span><br><span class="line">	Average number of queries per client: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[root@localhost mysqldata]<span class="comment"># mysqlslap --concurrency=1000 --iterations=1 --create-schema=&#x27;billing&#x27; --query=&#x27;select content from cloud_innodb where id &gt;9950 and id &lt; 9999;&#x27; --number-of-queries=10</span></span><br><span class="line">Benchmark</span><br><span class="line">	Average number of seconds to run all queries: <span class="number">0.901</span> seconds</span><br><span class="line">	Minimum number of seconds to run all queries: <span class="number">0.901</span> seconds</span><br><span class="line">	Maximum number of seconds to run all queries: <span class="number">0.901</span> seconds</span><br><span class="line">	Number of clients running queries: <span class="number">1000</span></span><br><span class="line">	Average number of queries per client: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[root@localhost mysqldata]<span class="comment"># mysqlslap --concurrency=1000 --iterations=1 --create-schema=&#x27;billing&#x27; --query=&#x27;select content from cloud_tokudb where id &gt;9950 and id &lt; 9999;&#x27; --number-of-queries=10</span></span><br><span class="line">Benchmark</span><br><span class="line">	Average number of seconds to run all queries: <span class="number">1.028</span> seconds</span><br><span class="line">	Minimum number of seconds to run all queries: <span class="number">1.028</span> seconds</span><br><span class="line">	Maximum number of seconds to run all queries: <span class="number">1.028</span> seconds</span><br><span class="line">	Number of clients running queries: <span class="number">1000</span></span><br><span class="line">	Average number of queries per client: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>Mysql：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@localhost billing]<span class="comment"># mysqlslap --concurrency=1000 --iterations=1 --create-schema=&#x27;billing&#x27; --query=&#x27;select count(content) from cloud_innodb where id &gt;9950 and id &lt; 9999;&#x27; --number-of-queries=10</span></span><br><span class="line">Benchmark</span><br><span class="line">	Average number of seconds to run all queries: <span class="number">0.496</span> seconds</span><br><span class="line">	Minimum number of seconds to run all queries: <span class="number">0.496</span> seconds</span><br><span class="line">	Maximum number of seconds to run all queries: <span class="number">0.496</span> seconds</span><br><span class="line">	Number of clients running queries: <span class="number">1000</span></span><br><span class="line">	Average number of queries per client: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[root@localhost billing]<span class="comment"># mysqlslap --concurrency=1000 --iterations=1 --create-schema=&#x27;billing&#x27; --query=&#x27;select count(content) from cloud_tokudb where id &gt;9950 and id &lt; 9999;&#x27; --number-of-queries=10</span></span><br><span class="line">Benchmark</span><br><span class="line">	Average number of seconds to run all queries: <span class="number">0.483</span> seconds</span><br><span class="line">	Minimum number of seconds to run all queries: <span class="number">0.483</span> seconds</span><br><span class="line">	Maximum number of seconds to run all queries: <span class="number">0.483</span> seconds</span><br><span class="line">	Number of clients running queries: <span class="number">1000</span></span><br><span class="line">	Average number of queries per client: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[root@localhost billing]<span class="comment"># mysqlslap --concurrency=1000 --iterations=1 --create-schema=&#x27;billing&#x27; --query=&#x27;select content from cloud_innodb where id &gt;9950 and id &lt; 9999;&#x27; --number-of-queries=10</span></span><br><span class="line">Benchmark</span><br><span class="line">	Average number of seconds to run all queries: <span class="number">1.231</span> seconds</span><br><span class="line">	Minimum number of seconds to run all queries: <span class="number">1.231</span> seconds</span><br><span class="line">	Maximum number of seconds to run all queries: <span class="number">1.231</span> seconds</span><br><span class="line">	Number of clients running queries: <span class="number">1000</span></span><br><span class="line">	Average number of queries per client: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[root@localhost billing]<span class="comment"># mysqlslap --concurrency=1000 --iterations=1 --create-schema=&#x27;billing&#x27; --query=&#x27;select content from cloud_tokudb where id &gt;9950 and id &lt; 9999;&#x27; --number-of-queries=10</span></span><br><span class="line">Benchmark</span><br><span class="line">	Average number of seconds to run all queries: <span class="number">0.739</span> seconds</span><br><span class="line">	Minimum number of seconds to run all queries: <span class="number">0.739</span> seconds</span><br><span class="line">	Maximum number of seconds to run all queries: <span class="number">0.739</span> seconds</span><br><span class="line">	Number of clients running queries: <span class="number">1000</span></span><br><span class="line">	Average number of queries per client: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>总结<br>1）、 并发查询两数据相差不是很大<br>2）、 Tokudb查询速度在MariaDB中比InnoDB引擎慢一点，但在Mysql中比InnoDB引擎速度还快（网上说的TokuDB查询速度不行，没有验证出来，不知道真正在线速度怎么样，按理说压缩后的数据应该查询要慢于没有压缩的数据）</p>
<p>###5、 批量更新</p>
<p>MariaDB </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[billing]&gt; update  cloud_innodb set content=<span class="string">&quot;ddddddddddddddddddddsssssss&quot;</span> where id &gt;<span class="number">8900</span> <span class="keyword">and</span> id &lt; <span class="number">90000</span>;</span><br><span class="line">Query OK, <span class="number">81099</span> rows affected (<span class="number">5.71</span> sec)</span><br><span class="line">Rows matched: <span class="number">81099</span>  Changed: <span class="number">81099</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>MariaDB </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[billing]&gt; update  cloud_tokudb set content=<span class="string">&quot;ddddddddddddddddddddsssssss&quot;</span> where id &gt;<span class="number">8900</span> <span class="keyword">and</span> id &lt; <span class="number">90000</span>;</span><br><span class="line">Query OK, <span class="number">81099</span> rows affected (<span class="number">3.46</span> sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysql&gt; update  cloud_innodb set content=<span class="string">&quot;ddddddddddddddddddddsssssss&quot;</span> where id &gt;<span class="number">8900</span> <span class="keyword">and</span> id &lt; <span class="number">90000</span>;</span><br><span class="line">Query OK, <span class="number">80952</span> rows affected (<span class="number">5.32</span> sec)</span><br><span class="line">Rows matched: <span class="number">81099</span>  Changed: <span class="number">80952</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; update  cloud_tokudb set content=<span class="string">&quot;ddddddddddddddddddddsssssss&quot;</span> where id &gt;<span class="number">8900</span> <span class="keyword">and</span> id &lt; <span class="number">90000</span>;</span><br><span class="line">Query OK, <span class="number">80952</span> rows affected (<span class="number">3.40</span> sec)</span><br><span class="line">Rows matched: <span class="number">81099</span>  Changed: <span class="number">80952</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>总结<br>1）、两数据库性能差不多<br>2）、批量更新感觉TokuDB速度比InnoDB速度快（和网上说的又不一样）</p>
<p>###6、DDL操作对比<br>添加索引</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">MariaDB [billing]&gt; create index idx_uid on cloud_innodb(uid);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">12.23</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [billing]&gt; create index idx_uid on cloud_tokudb(uid);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">29.51</span> sec)                                   </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; create index idx_uid on cloud_innodb(uid);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">15.48</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; create index idx_uid on cloud_tokudb(uid);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">31.10</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>删除索引</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">MariaDB [billing]&gt; drop index idx_uid on cloud_innodb;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.05</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [billing]&gt; drop index idx_uid on cloud_tokudb;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.09</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; drop index idx_uid on cloud_innodb;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; drop index idx_uid on cloud_tokudb;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.13</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>添加字段</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">MariaDB [billing]&gt; alter table cloud_innodb add column test_flag varchar(<span class="number">20</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">1</span> min <span class="number">20.06</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [billing]&gt; alter table cloud_tokudb add column test_flag varchar(<span class="number">20</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.16</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; alter table cloud_innodb add column test_flag varchar(<span class="number">20</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">1</span> min <span class="number">31.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; alter table cloud_tokudb add column test_flag varchar(<span class="number">20</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.23</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>删除字段</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">MariaDB [billing]&gt; alter table cloud_innodb drop column test_flag;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">1</span> min <span class="number">19.48</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [billing]&gt; alter table cloud_tokudb drop column test_flag;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.23</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; alter table cloud_innodb drop column test_flag;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">1</span> min <span class="number">55.31</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; alter table cloud_tokudb drop column test_flag;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">1.28</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>总结<br>1、MariaDB的DDL操作比Mysql的快<br>2、InnoDB的添加索引比TokuDB的快<br>3、删除索引两个引擎都很快<br>4、添加字段TokuDB非常快，InnoDB很慢<br>5、删除字段TokuDB非常快，InnoDB很慢</p>
<h1 id="网上的一些总结"><a href="#网上的一些总结" class="headerlink" title="网上的一些总结"></a>网上的一些总结</h1><p>总结：<br>TokuDB优点<br>1，online ddl 非常给力，特别是对字段的修改非常快<br>2，压缩比非常高通常都能达到7,8倍的压缩比<br>3，完全支持ACID事物的四大特性<br>TokuDB缺点<br>1，响应时间相对较长<br>2，online ddl 对text,blob等类型的字段不适用<br>3，没有合适的备份工具，只能通过mysqldump进行逻辑备份<br>建议适用场景：<br>1，访问频率不高的数据或历史数据归档<br>2，表非常大并且时不时还需要进行ddl操作</p>
<p>特点：<br>1.插入性能快20~80倍；<br>2.压缩数据减少存储空间；<br>3.数据量可以扩展到几个TB；<br>4.不会产生索引碎片；<br>5.支持hot column addition ， hot indexing， mvcc；<br>如何考虑使用：<br>1.如果要存储blob，不要使用tokuDB，因为他的记录不能太大；<br>2.如果记录数过亿，使用tokuDB；<br>3.如果注重update的性能，不要使用tokuDB，他没有innodb快；<br>4.如果要存储旧的记录，使用tokuDB；<br>5.如果要缩小数据占用的存储空间，使用tokuDB；</p>
<p>总结：<br>TokuDB的优点：1、高压缩比 2、高insert性能 3、增删字段秒级。<br>TokuDB的缺点：1、cpu usr态消耗高 2、响应时间变长。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>tokudb</tag>
      </tags>
  </entry>
  <entry>
    <title>phantomjs中文问题</title>
    <url>/2014/01/11/phantomjs%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>用phantomjs去截取中文页面的网站可能会出现乱码的情况，也就是截图中中文的位置全是方框。<br>解决办法就是安装字体。<br>在centos中执行：yum install bitmap-fonts bitmap-fonts-cjk<br>在ubuntu/debian中执行：sudo apt-get install xfonts-wqy<br>这样再去截图中文的页面就不会出现一堆的方框了。</p>
<p>如果需要使用微软雅黑字体，可以这样操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /usr/share/fonts/win/ </span><br><span class="line">  下载微软雅黑字体: </span><br><span class="line">  wget https://nipao.googlecode.com/files/msyh.ttf -O /usr/share/fonts/win/msyh.ttf </span><br><span class="line">  建立字体索引，更新字体缓存: </span><br><span class="line">  <span class="built_in">cd</span> /usr/share/fonts/win/ </span><br><span class="line">  mkfontscale </span><br><span class="line">  mkfontdir </span><br><span class="line">  fc-cache</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>phantomjs</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Extension开发基础</title>
    <url>/2015/04/19/php-extension%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>见：</p>
<blockquote>
<p><a href="http://blog.codinglabs.org/articles/php-extension-dev-guide.html">http://blog.codinglabs.org/articles/php-extension-dev-guide.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php扩展开发</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP获取Raw POST Data数据</title>
    <url>/2013/12/11/php%E8%8E%B7%E5%8F%96raw-post-data%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>通常在做网站开发的时候，接收POST数组通过$_POST即可获取，但是如果把一段 XML 文本直接作为POST DATA提交到服务器时，$_POST是一个空数组，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl -X POST http:<span class="comment">//www.example.com -H &quot;Accept:application/json&quot; -d &#x27;&#123;&quot;ip&quot;:&quot;8.8.4.4&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如何解决这个问题呢，PHP提供了解析Raw POST data的方法，见<a href="http://www.php.net/manual/en/reserved.variables.httprawpostdata.php%EF%BC%8C%E7%94%A8%E6%B3%95%E5%A6%82%E4%B8%8B%EF%BC%9A">http://www.php.net/manual/en/reserved.variables.httprawpostdata.php，用法如下：</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$postdata</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>解释一下，php://input 是一个资源标识，用 file_get_contents 从这个资源中获取的内容，就是原始的 Raw POST Data。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Raw POST</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync主备代码同步</title>
    <url>/2015/07/04/rsync%E4%B8%BB%E5%A4%87%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>同步服务器192.168.1.100<br>接收服务器192.168.1.200<br>即把192.168.1.100的代码备份到192.168.1.200。</p>
<h1 id="192-168-1-100上的配置如下："><a href="#192-168-1-100上的配置如下：" class="headerlink" title="192.168.1.100上的配置如下："></a>192.168.1.100上的配置如下：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install rsync inotify-tools</span><br><span class="line"></span><br><span class="line">crontab -e</span><br><span class="line">*/59 * * * * /bin/sh /usr/<span class="built_in">local</span>/scripts/rsync.sh &gt;&gt; /var/<span class="built_in">log</span>/rsync.log</span><br><span class="line">即每小时的第59分钟同步代码</span><br></pre></td></tr></table></figure>

<h1 id="usr-local-scripts-rsync-sh脚本内容如下"><a href="#usr-local-scripts-rsync-sh脚本内容如下" class="headerlink" title="/usr/local/scripts/rsync.sh脚本内容如下"></a>/usr/local/scripts/rsync.sh脚本内容如下</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh </span></span><br><span class="line">SRC=/var/www/html/ <span class="comment">#记得在最后面加/不然RYNC会自动增加一层目录 </span></span><br><span class="line">DES=rsync_data <span class="comment">#192.168.1.200认证的模块名，后面会说明</span></span><br><span class="line">IP=192.168.1.200</span><br><span class="line">USER=backup </span><br><span class="line">INWT=/usr/bin/inotifywait </span><br><span class="line">RSYNC=/usr/bin/rsync </span><br><span class="line"><span class="variable">$RSYNC</span> -auzviL --delete --progress --password-file=/root/rsync.pwd <span class="variable">$SRC</span> <span class="variable">$USER</span>@<span class="variable">$IP</span>::<span class="variable">$DES</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>rsync 选项说明<br> -a 称为归档模式，执行以下操作<br>递归模式<br>保留符号链接<br>保留权限<br>保留时间标记<br>保留用户名及组名<br>-z 开启压缩<br>-v 详情输出<br>-u 选项可以排除被修改过的目的文件<br>-L 把软连接文件夹同步过来<br>查看每个文件的传输进程,用 –-progress 参数<br>删除在目的文件夹中创建的文件,用 –-delete 参数</p>
</blockquote>
<h1 id="192-168-1-200上的配置如下："><a href="#192-168-1-200上的配置如下：" class="headerlink" title="192.168.1.200上的配置如下："></a>192.168.1.200上的配置如下：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install rsync</span><br><span class="line"></span><br><span class="line">vim /etc/rsyncd.conf</span><br><span class="line">uid=root </span><br><span class="line">gid=root </span><br><span class="line">max connections=36000 </span><br><span class="line">use chroot=no </span><br><span class="line"><span class="built_in">log</span> file=/var/<span class="built_in">log</span>/rsyncd.log </span><br><span class="line">pid file=/var/run/rsyncd.pid </span><br><span class="line">lock file=/var/run/rsyncd.lock </span><br><span class="line">[rsync_data] </span><br><span class="line">path=/data/192.168.1.100/ <span class="comment">#192.168.1.100是一个必须存在的目录</span></span><br><span class="line">comment = 192.168.1.100</span><br><span class="line">ignore errors = yes</span><br><span class="line"><span class="built_in">read</span> only = no </span><br><span class="line">hosts allow = 192.168.1.100</span><br></pre></td></tr></table></figure>

<p>rsync启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig:   2345 50 50</span></span><br><span class="line"><span class="comment"># description: The rsync daemon</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># source function library</span></span><br><span class="line"> . /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line">PROG=<span class="string">&#x27;/usr/bin/rsync&#x27;</span></span><br><span class="line">BASE=<span class="variable">$&#123;0##*/&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Adapt the --config parameter to point to your rsync daemon configuration</span></span><br><span class="line"><span class="comment"># The config file must contain following line:</span></span><br><span class="line"><span class="comment">#  pid file = /var/run/&lt;filename&gt;.pid</span></span><br><span class="line"><span class="comment"># Where &lt;filename&gt; is the filename of the init script (= this file)</span></span><br><span class="line">OPTIONS=<span class="string">&quot;--daemon --config=/etc/rsyncd.conf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">&quot;Starting <span class="variable">$BASE</span>: &quot;</span></span><br><span class="line">    daemon --check <span class="variable">$BASE</span> <span class="variable">$PROG</span> <span class="variable">$OPTIONS</span></span><br><span class="line">    RETVAL=$?</span><br><span class="line">    [ <span class="variable">$RETVAL</span> -eq 0 ] &amp;&amp; touch /var/lock/subsys/<span class="variable">$BASE</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">&quot;Shutting down <span class="variable">$BASE</span>: &quot;</span></span><br><span class="line">    killproc <span class="variable">$BASE</span></span><br><span class="line">    RETVAL=$?</span><br><span class="line">    [ <span class="variable">$RETVAL</span> -eq 0 ] &amp;&amp; rm -f /var/lock/subsys/<span class="variable">$BASE</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    ;;</span><br><span class="line">  restart|force-reload)</span><br><span class="line">    <span class="variable">$0</span> stop</span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="variable">$0</span> start</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> &#123;start|stop|restart|force-reload&#125;&quot;</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<p>至此，同步就算完成。可以tailf /var/log/rsync.log查看同步日志。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime text创建快捷注释信息</title>
    <url>/2015/07/14/sublime-text%E5%88%9B%E5%BB%BA%E5%BF%AB%E6%8D%B7%E6%B3%A8%E9%87%8A%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<ul>
<li>该方式适用于sublime text2和3。</li>
</ul>
<h2 id="创建代码片段"><a href="#创建代码片段" class="headerlink" title="创建代码片段"></a>创建代码片段</h2><p>点击菜单栏里的 Tools 菜单，然后点击 New Snippet，之后会在新的 tab 页创建一个代码片段模板，编辑代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;snippet&gt;</span><br><span class="line">	&lt;content&gt;&lt;![CDATA[</span><br><span class="line">/**</span><br><span class="line"> * 定义函数</span><br><span class="line"> *</span><br><span class="line"> * 函数功能描述</span><br><span class="line"> * </span><br><span class="line"> * @author panjun.liu &lt;lpj163@gmail.com&gt;</span><br><span class="line"> *</span><br><span class="line"> * @param int <span class="variable">$param1</span>      参数释义</span><br><span class="line"> * @param string <span class="variable">$param2</span>   参数释义</span><br><span class="line"> *</span><br><span class="line"> * @<span class="built_in">return</span> <span class="built_in">integer</span>|string|array</span><br><span class="line">*/</span><br><span class="line">]]&gt;&lt;/content&gt;</span><br><span class="line">	&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span><br><span class="line"> 	&lt;tabTrigger&gt;phpdoc&lt;/tabTrigger&gt;</span><br><span class="line">	&lt;!-- Optional: Set a scope to <span class="built_in">limit</span> <span class="built_in">where</span> the snippet will trigger --&gt;</span><br><span class="line">	&lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;</span><br><span class="line">&lt;/snippet&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：<br>tabTrigger 此节是可选的配置，默认是被注释掉的。默认 hello 的意思是：如果你在某个文档里输入了单词 hello ，然后按下 Tab 键，接着 hello 就会被替换为1中定义的代码片段。再次按下Tab键，接着snippet会被替换为2中定义的代码片段。</p>
</blockquote>
<p>保存到当前用户主目录下的\Sublime Text 3\Packages\User目录中，命名为phpdoc.sublime-snippet(注意：后缀必须为.sublime-snippet)。</p>
<h2 id="绑定快捷键"><a href="#绑定快捷键" class="headerlink" title="绑定快捷键"></a>绑定快捷键</h2><p>可以将上述的操作绑定到一个快捷键，在不键入任何文本的情况下，直接按快捷键插入代码片段。</p>
<p>点击菜单栏的 Preferences 的子菜单 Key Binding – User，在打开的文件的方括号内部粘贴如下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">	&#123; <span class="string">&quot;keys&quot;</span>: [<span class="string">&quot;phpdoc&quot;</span>], <span class="string">&quot;command&quot;</span>: <span class="string">&quot;insert_snippet&quot;</span>, <span class="string">&quot;args&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Packages/User/phpdoc.sublime-snippet&quot;</span>&#125; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>现在简单介绍一下这段配置：</p>
<ol>
<li><p>“keys”: [“phpdoc”] 这个定义了触发此命令的快捷键。</p>
</li>
<li><p>“command”: “insert_snippet” 这个是需要触发的命令的名字。</p>
</li>
<li><p>“args”: {“name”: “Packages/User/phpdoc.sublime-snippet”} 这个是需要传入到上述命令的参数。这里把代码片段文件的相对路径传递过去。</p>
</li>
</ol>
<p>保存配置文件，现在就可以用快捷键插入代码片段了。</p>
<p>至此，输入phpdoc，然后按tab键就会输出你定义这段注释。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sublime text</tag>
      </tags>
  </entry>
  <entry>
    <title>sysbench测试mysql性能</title>
    <url>/2016/01/29/sysbench%E6%B5%8B%E8%AF%95mysql%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<p>sysbench是一个模块化的、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。关于这个项目的详细介绍请看：<a href="https://launchpad.net/sysbench%E3%80%82">https://launchpad.net/sysbench。</a><br>它主要包括以下几种方式的测试：<br>1、cpu性能<br>2、磁盘io性能<br>3、调度程序性能<br>4、内存分配及传输速度<br>5、POSIX线程性能<br>6、数据库性能(OLTP基准测试)<br>目前sysbench主要支持 MySQL,pgsql,oracle 这3种数据库。</p>
<p>###一、安装</p>
<p>环境：</p>
<p>centos 6.7<br>mysql  5.7.10</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install automake gcc gcc-c++ libtool mysql-devel</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/akopytov/sysbench.git</span><br><span class="line"></span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>如果想要让 sysbench 支持 pgsql/oracle 的话，就需要在编译的时候加上参数<br>–with-pgsql<br>或者<br>–with-oracle<br>这2个参数默认是关闭的，只有 MySQL 是默认支持的。</p>
<p>###二、测试</p>
<p>#####1、cpu性能测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench --<span class="built_in">test</span>=cpu --cpu-max-prime=20000 run</span><br></pre></td></tr></table></figure>

<p>cpu测试主要是进行素数的加法运算，在上面的例子中，指定了最大的素数为 20000，自己可以根据机器cpu的性能来适当调整数值。</p>
<p>#####2、线程测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench --<span class="built_in">test</span>=threads --num-threads=64 --thread-yields=100 --thread-locks=2 run</span><br></pre></td></tr></table></figure>

<p>#####3、磁盘IO性能测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench --<span class="built_in">test</span>=fileio --num-threads=16 --file-total-size=3G --file-test-mode=rndrw prepare</span><br><span class="line">sysbench --<span class="built_in">test</span>=fileio --num-threads=16 --file-total-size=3G --file-test-mode=rndrw run</span><br><span class="line">sysbench --<span class="built_in">test</span>=fileio --num-threads=16 --file-total-size=3G --file-test-mode=rndrw cleanup</span><br></pre></td></tr></table></figure>

<p>上述参数指定了最大创建16个线程，创建的文件总大小为3G，文件读写模式为随机读。</p>
<p>#####4、内存测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench --<span class="built_in">test</span>=memory --memory-block-size=8k --memory-total-size=4G run</span><br></pre></td></tr></table></figure>

<p>上述参数指定了本次测试整个过程是在内存中传输 4G 的数据量，每个 block 大小为 8K。</p>
<p>#####5、OLTP测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=root --mysql-password=root  --<span class="built_in">test</span>=/root/sysbench/sysbench/tests/db/oltp.lua --oltp_tables_count=10 --oltp-table-size=100000 --rand-init=on prepare</span><br></pre></td></tr></table></figure>

<p>关于这几个参数的解释：</p>
<p>–test=tests/db/oltp.lua 表示调用 tests/db/oltp.lua 脚本进行 oltp 模式测试<br>–oltp_tables_count=10 表示会生成 10 个测试表<br>–oltp-table-size=100000 表示每个测试表填充数据量为 100000<br>–rand-init=on 表示每个测试表都是用随机数据来填充的<br>如果在本机，也可以使用 –mysql-socket 指定 socket 文件来连接。加载测试数据时长视数据量而定，若过程比较久需要稍加耐心等待。</p>
<p>真实测试场景中，数据表建议不低于10个，单表数据量不低于500万行，当然了，要视服务器硬件配置而定。如果是配备了SSD或者PCIE SSD这种高IOPS设备的话，则建议单表数据量最少不低于1亿行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=root \</span><br><span class="line">--mysql-password=root --<span class="built_in">test</span>=/root/sysbench/sysbench/tests/db/oltp.lua --oltp_tables_count=10 \</span><br><span class="line">--oltp-table-size=10000000 --num-threads=8 --oltp-read-only=off \</span><br><span class="line">--report-interval=10 --rand-type=uniform --max-time=3600 \</span><br><span class="line"> --max-requests=0 --percentile=99 run &gt;&gt; /tmp/sysbench_oltpX_8.log</span><br></pre></td></tr></table></figure>

<p>参数解释：<br>–num-threads=8 表示发起 8个并发连接<br>–oltp-read-only=off 表示不要进行只读测试，也就是会采用读写混合模式测试<br>–report-interval=10 表示每10秒输出一次测试进度报告<br>–rand-type=uniform 表示随机类型为固定模式，其他几个可选随机模式：uniform(固定),gaussian(高斯),special(特定的),pareto(帕累托)<br>–max-time=120 表示最大执行时长为 120秒<br>–max-requests=0 表示总请求数为 0，因为上面已经定义了总执行时长，所以总请求数可以设定为 0；也可以只设定总请求数，不设定最大执行时长<br>–percentile=99 表示设定采样比例，默认是 95%，即丢弃1%的长请求，在剩余的99%里取最大值</p>
<p>即：模拟 对10个表并发OLTP测试，每个表1000万行记录，持续压测时间为 1小时。</p>
<p>真实测试场景中，建议持续压测时长不小于30分钟，否则测试数据可能不具参考意义。</p>
<p>#####6、测试结果解读</p>
<p>测试结果解读如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench 0.5:  multi-threaded system evaluation benchmark</span><br><span class="line"></span><br><span class="line">Running the <span class="built_in">test</span> with following options:</span><br><span class="line">Number of threads: 8</span><br><span class="line">Report intermediate results every 10 second(s)</span><br><span class="line">Random number generator seed is 0 and will be ignored</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Threads started!</span><br><span class="line">-- 每10秒钟报告一次测试结果，tps、每秒读、每秒写、99%以上的响应时长统计</span><br><span class="line">[  10s] threads: 8, tps: 1111.51, reads/s: 15568.42, writes/s: 4446.13, response time: 9.95ms (99%)</span><br><span class="line">[  20s] threads: 8, tps: 1121.90, reads/s: 15709.62, writes/s: 4487.80, response time: 9.78ms (99%)</span><br><span class="line">[  30s] threads: 8, tps: 1120.00, reads/s: 15679.10, writes/s: 4480.20, response time: 9.84ms (99%)</span><br><span class="line">[  40s] threads: 8, tps: 1114.20, reads/s: 15599.39, writes/s: 4456.30, response time: 9.90ms (99%)</span><br><span class="line">[  50s] threads: 8, tps: 1114.00, reads/s: 15593.60, writes/s: 4456.70, response time: 9.84ms (99%)</span><br><span class="line">[  60s] threads: 8, tps: 1119.30, reads/s: 15671.60, writes/s: 4476.50, response time: 9.99ms (99%)</span><br><span class="line">OLTP <span class="built_in">test</span> statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            938224    -- 读总数</span><br><span class="line">        write:                           268064    -- 写总数</span><br><span class="line">        other:                           134032    -- 其他操作总数(SELECT、INSERT、UPDATE、DELETE之外的操作，例如COMMIT等)</span><br><span class="line">        total:                           1340320    -- 全部总数</span><br><span class="line">    transactions:                        67016  (1116.83 per sec.)    -- 总事务数(每秒事务数)</span><br><span class="line">    deadlocks:                           0      (0.00 per sec.)    -- 发生死锁总数</span><br><span class="line">    <span class="built_in">read</span>/write requests:                 1206288 (20103.01 per sec.)    -- 读写总数(每秒读写次数)</span><br><span class="line">    other operations:                    134032 (2233.67 per sec.)    -- 其他操作总数(每秒其他操作次数)</span><br><span class="line"></span><br><span class="line">General statistics:    -- 一些统计结果</span><br><span class="line">    total time:                          60.0053s    -- 总耗时</span><br><span class="line">    total number of events:              67016    -- 共发生多少事务数</span><br><span class="line">    total time taken by event execution: 479.8171s    -- 所有事务耗时相加(不考虑并行因素)</span><br><span class="line">    response time:    -- 响应时长统计</span><br><span class="line">         min:                                  4.27ms    -- 最小耗时</span><br><span class="line">         avg:                                  7.16ms    -- 平均耗时</span><br><span class="line">         max:                                 13.80ms    -- 最长耗时</span><br><span class="line">         approx.  99 percentile:               9.88ms    -- 超过99%平均耗时</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           8377.0000/44.33</span><br><span class="line">    execution time (avg/stddev):   59.9771/0.00</span><br></pre></td></tr></table></figure>

<p>参考文章：<br>1、<a href="http://imysql.com/2014/10/17/sysbench-full-user-manual.shtml">http://imysql.com/2014/10/17/sysbench-full-user-manual.shtml</a><br>2、<a href="http://imysql.com/2015/07/28/mysql-benchmark-reference.shtml">http://imysql.com/2015/07/28/mysql-benchmark-reference.shtml</a></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>sysbench</tag>
      </tags>
  </entry>
  <entry>
    <title>tpcc测试mysql性能</title>
    <url>/2016/01/29/tpcc%E6%B5%8B%E8%AF%95mysql%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<p>TPC-C是专门针对联机交易处理系统（OLTP系统）的规范，一般情况下我们也把这类系统称为业务处理系统。<br>tpcc-mysql是percona基于TPC-C(下面简写成TPCC)衍生出来的产品，专用于MySQL基准测试。其源码放在launchpad上，用bazaar管理，项目地址：<a href="https://code.launchpad.net/~percona-dev/perconatools/tpcc-mysql%E3%80%82">https://code.launchpad.net/~percona-dev/perconatools/tpcc-mysql。</a></p>
<p>也可以用叶金荣的版本，<a href="https://github.com/yejr/tpcc-mysql-autoinc-pk%E3%80%82">https://github.com/yejr/tpcc-mysql-autoinc-pk。</a></p>
<p>tpcc-mysql的业务逻辑及其相关的几个表作用如下：</p>
<p>New-Order：新订单，一次完整的订单事务，几乎涉及到全部表<br>Payment：支付，主要对应 orders、history 表<br>Order-Status：订单状态，主要对应 orders、order_line 表<br>Delivery：发货，主要对应 order_line 表<br>Stock-Level：库存，主要对应 stock 表</p>
<p>其他相关表：<br>客户：主要对应 customer 表<br>地区：主要对应 district 表<br>商品：主要对应 item 表<br>仓库：主要对应 warehouse 表</p>
<p>###一、编译安装<br>编译非常简单，只需要一个 make 即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp/tpcc-mysql/src</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>如果 make 没有报错，就会在 /tmp/tpcc-mysql 下生成 tpcc 二进制命令行工具 tpcc_load、 tpcc_start</p>
<p>###二、TPCC测试前准备<br>初始化测试库环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp/tpcc-mysql</span><br><span class="line">mysqladmin create tpcc</span><br><span class="line">mysql -uroot -proot tpcc &lt; create_table.sql</span><br></pre></td></tr></table></figure>

<p>tpcc_load用法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tpcc_load [server] [DB] [user] [pass] [warehouse]</span><br><span class="line"></span><br><span class="line">OR</span><br><span class="line"></span><br><span class="line">tpcc_load [server] [DB] [user] [pass] [warehouse] [part] [min_wh] [max_wh]</span><br></pre></td></tr></table></figure>

<p>选项 warehouse 意为指定测试库下的仓库数量。</p>
<p>真实测试场景中，仓库数一般不建议少于100个，视服务器硬件配置而定，如果是配备了SSD或者PCIE SSD这种高IOPS设备的话，建议最少不低于1000个。</p>
<p>执行下面的命令，开始灌入测试数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp/tpcc-mysql</span><br><span class="line">./tpcc_load localhost tpcc tpcc_user <span class="string">&quot;tpcc_password&quot;</span> 1000</span><br></pre></td></tr></table></figure>

<p>在这里，需要注意的是 tpcc 默认会读取 /var/lib/mysql/mysql.sock 这个socket 文件。<br>因此，如果你的 socket 文件不在相应路径的话，可以做个软连接，或者通过TCP/IP的方式连接测试服务器，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp/tpcc-mysql</span><br><span class="line">./tpcc_load 1.2.3.4:3306 tpcc1000 tpcc_user <span class="string">&quot;tpcc_password&quot;</span> 1000</span><br></pre></td></tr></table></figure>

<p>加载测试数据时长视仓库数量而定，若过程比较久需要稍加耐心等待。</p>
<p>tpcc_load其实是可以并行加载的，一方面是可以区分 ITEMS、WAREHOUSE、CUSTOMER、ORDERS 四个维度的数据并行加载。<br>另外，比如最终想加载1000个 warehouse的话，也可以分开成1000个并发并行加载的。看下 tpcc_load 工具的参数就知道了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usage: tpcc_load [server] [DB] [user] [pass] [warehouse]</span><br><span class="line">OR</span><br><span class="line">tpcc_load [server] [DB] [user] [pass] [warehouse] [part] [min_wh] [max_wh]</span><br></pre></td></tr></table></figure>

<ul>
<li>[part]: 1=ITEMS 2=WAREHOUSE 3=CUSTOMER 4=ORDERS<br>本来想自己写个并行加载脚本的，后来发现万能的github上已经有人做好了，我就直接拿来用了，这是项目链接 <a href="https://gist.github.com/sh2/3458844">tpcc_load_parallel.sh</a>，加载效率至少提升10倍以上。</li>
</ul>
<p>二、进行TPCC测试<br>tpcc_start 工具用于tpcc压测，其用法如下：</p>
<p>tpcc_start -h server_host -P port -d database_name -u mysql_user <br> -p mysql_password -w warehouses -c connections -r warmup_time <br> -l running_time -i report_interval -f report_file</p>
<p>几个选项稍微解释下：<br>-w 指定仓库数量<br>-c 指定并发连接数<br>-r 指定开始测试前进行warmup的时间，进行预热后，测试效果更好<br>-l 指定测试持续时间<br>-i  指定生成报告间隔时长<br>-f 指定生成的报告文件名</p>
<p>现在我们来开启一个测试案例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tpcc_start -hlocalhost -d tpcc1000 -u tpcc_user -p <span class="string">&quot;tpcc_password&quot;</span> \</span><br><span class="line"> -w 1000 -c 32 -r 120 -l 3600 \</span><br><span class="line"> -f tpcc_mysql_20140921.log &gt;&gt; tpcc_caseX_20140921.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>即：模拟 1000个仓库规模，并发 16个线程进行测试，热身时间为 60秒, 压测时间为 1小时。</p>
<p>真实测试场景中，建议预热时间不小于5分钟，持续压测时长不小于30分钟，否则测试数据可能不具参考意义。</p>
<p>###三、TPCC测试结果解读：</p>
<p>发起测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./tpcc_start -h 1.2.3.4 -P 3306 -d tpcc10 -u tpcc -p tpcc \</span><br><span class="line"> -w 10 -c 64 -r 30 -l 120 \</span><br><span class="line"> -f tpcclog_201409211538_64_THREADS.log &gt;&gt; tpcc_noaid_2_20140921_64.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>测试结果输出如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 本轮tpcc压测的一些基本信息</span><br><span class="line">***************************************</span><br><span class="line">*** <span class="comment">###easy### TPC-C Load Generator ***</span></span><br><span class="line">***************************************</span><br><span class="line">option h with value <span class="string">&#x27;1.2.3.4&#x27;</span>   -- 主机</span><br><span class="line">option P with value <span class="string">&#x27;3306&#x27;</span>             -- 端口</span><br><span class="line">option d with value <span class="string">&#x27;tpcc10&#x27;</span>         -- 数据库</span><br><span class="line">option u with value <span class="string">&#x27;tpcc&#x27;</span>             -- 账号</span><br><span class="line">option p with value <span class="string">&#x27;tpcc&#x27;</span>             -- 密码</span><br><span class="line">option w with value <span class="string">&#x27;10&#x27;</span>                 -- 仓库数</span><br><span class="line">option c with value <span class="string">&#x27;64&#x27;</span>                 -- 并发线程数</span><br><span class="line">option r with value <span class="string">&#x27;30&#x27;</span>                 -- 数据预热时长</span><br><span class="line">option l with value <span class="string">&#x27;120&#x27;</span>               -- 压测时长</span><br><span class="line">option f with value <span class="string">&#x27;tpcclog_20140921_64_THREADS.res&#x27;</span>  -- 输出报告日志文件</span><br><span class="line"></span><br><span class="line">     [server]: 1.2.3.4</span><br><span class="line">     [port]: 3306</span><br><span class="line">     [DBname]: tpcc10</span><br><span class="line">       [user]: tpcc</span><br><span class="line">       [pass]: tpcc</span><br><span class="line">  [warehouse]: 10</span><br><span class="line"> [connection]: 64</span><br><span class="line">     [rampup]: 30 (sec.)</span><br><span class="line">    [measure]: 120 (sec.)</span><br><span class="line"></span><br><span class="line">RAMP-UP TIME.(30 sec.)</span><br><span class="line"></span><br><span class="line">-- 预热结束，开始进行压测</span><br><span class="line">MEASURING START.</span><br><span class="line"></span><br><span class="line">-- 每10秒钟输出一次压测数据</span><br><span class="line">  10, 8376(0):2.744|3.211, 8374(0):0.523|1.626, 838(0):0.250|0.305, 837(0):3.241|3.518, 839(0):9.086|10.676</span><br><span class="line">  20, 8294(0):2.175|2.327, 8292(0):0.420|0.495, 829(0):0.206|0.243, 827(0):2.489|2.593, 827(0):7.214|7.646</span><br><span class="line">…</span><br><span class="line"> 110, 8800(0):2.149|2.458, 8792(0):0.424|0.710, 879(0):0.207|0.244, 878(0):2.461|2.556, 878(0):7.042|7.341</span><br><span class="line"> 120, 8819(0):2.147|2.327, 8820(0):0.424|0.568, 882(0):0.208|0.237, 881(0):2.483|2.561, 883(0):7.025|7.405</span><br><span class="line">-- 以逗号分隔，共6列</span><br><span class="line">-- 第一列，第N次10秒</span><br><span class="line">-- 第二列，新订单成功执行压测的次数(推迟执行压测的次数):90%事务的响应时间|本轮测试最大响应时间，新订单事务数也被认为是总有效事务数的指标</span><br><span class="line">-- 第三列，支付业务成功执行次数(推迟执行次数):90%事务的响应时间|本轮测试最大响应时间</span><br><span class="line">-- 第四列，订单状态业务的结果，后面几个的意义同上</span><br><span class="line">-- 第五列，物流发货业务的结果，后面几个的意义同上</span><br><span class="line">-- 第六列，库存仓储业务的结果，后面几个的意义同上</span><br><span class="line"></span><br><span class="line">-- 压测结束</span><br><span class="line">STOPPING THREADS................................................................</span><br><span class="line"></span><br><span class="line">   -- 第一次结果统计</span><br><span class="line">  [0] sc:100589  lt:0  rt:0  fl:0    -- New-Order，新订单业务成功(success,简写sc)次数，延迟(late,简写lt)次数，重试(retry,简写rt)次数，失败(failure,简写fl)次数</span><br><span class="line">  [1] sc:100552  lt:0  rt:0  fl:0    -- Payment，支付业务统计，其他同上</span><br><span class="line">  [2] sc:10059  lt:0  rt:0  fl:0    -- Order-Status，订单状态业务统计，其他同上</span><br><span class="line">  [3] sc:10057  lt:0  rt:0  fl:0    -- Delivery，发货业务统计，其他同上</span><br><span class="line">  [4] sc:10058  lt:0  rt:0  fl:0    -- Stock-Level，库存业务统计，其他同上</span><br><span class="line"> <span class="keyword">in</span> 120 sec.</span><br><span class="line"></span><br><span class="line">    -- 第二次统计结果，其他同上</span><br><span class="line">  [0] sc:100590  lt:0  rt:0  fl:0 </span><br><span class="line">  [1] sc:100582  lt:0  rt:0  fl:0 </span><br><span class="line">  [2] sc:10059  lt:0  rt:0  fl:0 </span><br><span class="line">  [3] sc:10057  lt:0  rt:0  fl:0 </span><br><span class="line">  [4] sc:10059  lt:0  rt:0  fl:0 </span><br><span class="line"></span><br><span class="line"> (all must be [OK])       -- 下面所有业务逻辑结果都必须为 OK 才行</span><br><span class="line"> [transaction percentage]</span><br><span class="line">        Payment: 43.47% (&gt;=43.0%) [OK]      -- 支付成功次数(上述统计结果中 sc + lt)必须大于43.0%，否则结果为NG，而不是OK</span><br><span class="line">   Order-Status: 4.35% (&gt;= 4.0%) [OK]       -- 订单状态，其他同上</span><br><span class="line">       Delivery: 4.35% (&gt;= 4.0%) [OK]       -- 发货，其他同上</span><br><span class="line">    Stock-Level: 4.35% (&gt;= 4.0%) [OK]       -- 库存，其他同上</span><br><span class="line"> [response time (at least 90% passed)]      -- 响应耗时指标必须超过90%通过才行</span><br><span class="line">      New-Order: 100.00%  [OK]              -- 下面几个响应耗时指标全部 100% 通过</span><br><span class="line">        Payment: 100.00%  [OK]</span><br><span class="line">   Order-Status: 100.00%  [OK]</span><br><span class="line">       Delivery: 100.00%  [OK]</span><br><span class="line">    Stock-Level: 100.00%  [OK]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                 50294.500 TpmC                      -- TpmC结果值（每分钟事务数，该值是第一次统计结果中的新订单事务数除以总耗时分钟数，例如本例中是：100589/2 = 50294.500）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>script目录下的一些脚本主要是一些性能数据采集以及分析的，可以自行摸索下怎么用。</p>
<p>参考文章：<br>1、<a href="http://imysql.com/2014/10/10/tpcc-mysql-full-user-manual.shtml">http://imysql.com/2014/10/10/tpcc-mysql-full-user-manual.shtml</a><br>2、<a href="https://github.com/yejr/tpcc-mysql-autoinc-pk">https://github.com/yejr/tpcc-mysql-autoinc-pk</a></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>sysbench</tag>
      </tags>
  </entry>
  <entry>
    <title>understanding drupal8-drupal8初窥</title>
    <url>/2015/11/02/understanding-drupal8/</url>
    <content><![CDATA[<p>如何学习drupal8？国内文档寥寥可数，后发现老外的一篇文章，可做入门，遂翻译如下。原创内容，转载请注明出处！</p>
<p>##一、结构<br>Drupal 8来了。这是一个革命！和Drupal6到Drupal7的演化不同，这是一个完全不同的架构和编码方式。我确信这些变化对专业化和现代化CMS是必不可少的。我相信转向面向对象将会吸引开发者，并将提升软件的整体质量。我感谢Drupal内核开发者的勇气以及为此所做的工作。<br>然而，对于现有（包括新的）Web开发者，学习drupal将是一个巨大的挑战。通过阅读这篇文章，您将更具优势。在你深入Drupal 8模块开发前，这篇文章会给你带去些许启示。在我写下这篇文章之前，我花了数天，通过一步步的调试、阅读代码和在线文章，深入地学习了symfony2 和 Drupal8。我是一个经验丰富的Drupal7开发者，但是对symfony一无所知，并且至今没有对Druapl8内核有所贡献。我相信，通过分享我所学到的，也能助你提升对它的理解。<br>在接下来的四周里，这篇文章将发布成四部分。在这第一部分，我们将一瞥Drupal 8 框架的总体架构，特别是与symfony2 组件的联系。我们将看到哪些symfony2 组件在Drupal中用到了以及如何使用。在下一个部分，我们将详细学习非常重要的类容器。在第三部分，我们将详细学习Drupal 8 的引导和路由。你将学到如何处理一个请求。在第四也是最后一部分，将会介绍drupal 8的其它一些令人兴奋的、全新的特性。<br>###1、Symfony2<br>Symfony框架被设计用来使开发者能够构建自定义的Web应用。Symfony不是一个CMS，因为它不能用来管理一个站点。相反，要构建应用，必须要写代码。为此，symfony提供了一些方法使开发更具效率。理论上，CMS可以基于Symfony开发，但事实上，Symfony的默认方式对Drupal来说并不灵活。</p>
<p>因此，Drupal 8只采用了Symfony的非常优秀的内核层，并且扩展它以支持Drupal模块。这促生了一个非常平衡的系统，它采用Symfony部分优秀的内核（而且未经修改），但是可以基于一个非常灵活的CMS层扩展它。<br>###2、组件<br>Symfony框架由数个组件构成。有些对系统是至关重要的，例如能理解HTTP协议并且为其他组件提供良好request和response对象的Http Foundation组件。其他的仅是辅助组件，例如校验数据的Validator组件（检测是否是合法的电子邮件地址/URL/数字/等等？）。系统的核心是Kernel组件。这个内核总的来说就是一个主类，它管理环境（类和程序集）并负责处理http请求。开发者可以通过扩展内核来扩展系统，例如AppKernal就是扩展了Kernal，并且在里面添加了自己的程序集。这些程序集可以构建一系列连贯的功能集合，非常类似于Drupal的模块。<br>Drupal只使用了Symfony的一部分组件，如下图所示：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151104/2015110494853_67351.png" alt="组件"></p>
<p>###3、Drupal 8如何扩展Symfony<br>Drupal不扩展内核，而Symfony应用会。通过实现内核接口，Drupal提供了相似的功能类型。这是因为Drupal不共享Symfony的程序集方法。程序集提供了极好的方式来构建自定义的web应用，但是不适合构建需要灵活性和扩展性的CMS。DrupalKernal加载环境（可用的类和模块）的方式与Kernal稍微不同，但是和Symfony Kernal一样，都是把将http请求委托给HttpKernel。<br>与此同时，Drupal 8引入了自己的（第三方）组件和核心代码，示意概览如下图所示：<br><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151104/2015110494817_42194.png" alt="Drupal 8如何扩展Symfony"></p>
<p>###4、结论<br>这里总结了“开始学习Drupal 8”这篇文章。下周我们将开始学习类容器，可以理解成Drupal系统的骨架。在理解任何其他组件前你必须先了解它。</p>
<p>##二、服务容器<br>这是“理解Drupal 8”的第二部分。在第一部分，我们已经学习了Drupal 8的总体架构以及它与Symfony的关联。Symfony（和Drupal 8）包含着许多组件。在这篇文章中，你将会学习到什么是服务容器，以及在Drupal 8中怎么使用它。很重要的一点就是，在学习路由之前我们得先理解服务容器。</p>
<p>Symfony采用了服务器容器，它可以高效地管理应用中的services。这个概念也就是所谓的Dependency Injection。</p>
<p>服务容器是一个在处理请求之前由Kernal创建并包含的全局对象。它能被用来获取服务，动态加载服务。服务是用于完成特定任务的全局对象，例如邮件服务或数据库连接。一个服务对应着一个确切的类。服务容器非常重要，因为它包含可用服务，知道它们的联系和配置信息，甚至构造它们。</p>
<p>###1、依赖和参数<br>一个服务可能依赖于其他服务。Symfony文档举了个通讯管理服务依赖邮件服务来发送邮件的例子。服务容也管理着这些依赖。当创建一个服务时，它的依赖会通过类构造器中的参数进行传递。接口用来定义依赖服务要提供哪些方法，这样实现的这个服务才能在必要时与另一个服务进行交换。</p>
<p>###2、配置<br>服务容器中的服务可以通过多种方式进行配置：代码（所谓的扩展），XML，YAML，等等。Symfony混合着使用这些方式，但是把大多数核心服务配置留给了程序集代码。Drupal的服务配置则不同，大部分基于yaml文件。Drupal使用services.core.yml来关联所有与内核相关的配置。这个配置可以被模块和ServiceProvider类扩展。</p>
<p>YAML提供了可读的和灵活的语法。Drupal 8中的一个例子（摘自services.core.yml）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  ...</span><br><span class="line">  router_listener:</span><br><span class="line">  class: Symfony\Component\HttpKernel\EventListener\RouterListener</span><br><span class="line">  tags:</span><br><span class="line">    - &#123; name: event_subscriber &#125;</span><br><span class="line">  arguments: [<span class="string">&#x27;@router&#x27;</span>]</span><br><span class="line">  ...</span><br><span class="line">  router:</span><br><span class="line">    class: Symfony\Cmf\Component\Routing\ChainRouter</span><br><span class="line">    calls:</span><br><span class="line">      - [setContext, [<span class="string">&#x27;@router.request_context&#x27;</span>]]</span><br><span class="line">      - [add, [<span class="string">&#x27;@router.dynamic&#x27;</span>]]</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p>这里定义了router_listener服务。对应的类要求能够加载这个监听器。arguments属性定义了RouterListener 构造器的第一个参数（URL或请求匹配器）应该是service id是router的服务：‘@router’。这个路由也被定义在配置文件中，而且是一个不同于Symfony中使用的‘类’。</p>
<p>###3、标签化的服务<br>标签被用来加载特定的标签化的服务。在实践中，drupal有时使用钩子方式。在以下例子中（node.services.yml），node模块为’add node’页面增加了一个访问检查，基于access_check服务模式，当访问时，将会检查访问是否被允许。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  ...</span><br><span class="line">  access_check.node.add:</span><br><span class="line">    class: Drupal\node\Access\NodeAddAccessCheck</span><br><span class="line">    arguments: [<span class="string">&#x27;@plugin.manager.entity&#x27;</span>]</span><br><span class="line">    tags:</span><br><span class="line">      - &#123; name: access_check &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>###4、Compiler passes<br>Drupal是如何理解这些标签以及如何处理它们的呢？好，Symfony已经有另外一种动态配置服务容器的方法：Compiler pasess。服务容器实际上在用静态配置构建之后就被编译了。在这个期间，它允许对象实现CompilerPassInterface 类来更改配置。在Drupal中，CoreServiceProvider 注册了一些非常重要的Compiler pasess，例如RegisterAccessChecksPass，它会试图找到所有加了access_check标签的服务（见上例）然后把它添加到AccessManager（通过使用addMethodCall容器指令）中。在路由阶段，AccessManager 会检查访问权限，它将在其他类之间检查NodeAddAccessCheck。在drupal内核中还有几个其他的Compiler pasess，例如用于将路由参数转换成对象和转义字符串的Compiler passes。在实践中，你有时需要在模块中使用这些标签化的服务来增加自定义访问校验，转换路径参数。</p>
<p>###5、Swapping services<br>服务容器使灵活的服务配置成为可能。Drupal 8使用服务参数改变了Symfony使用这些参数实现自己功能的方式。例如，drupal需要一个不同于Symfony的url路由机制。与Symfony的(Symfony\Bundle\FrameworkBundle\Routing\Router)相比，它通过提供不同的路由服务(Symfony\Cmf\Component\Routing\ChainRouter)来实现。而这个<br>不需要改变router_listerner (Symfony\Component\HttpKernel\EventListener\RouterListener)类本身的任何一行代码。由于两个路由都实现了RequestMatcherInterface接口，而这个接口是RouterListener的第一个必要参数，所以这个是可以实现的。<br> <br>###6、结论<br>在这一部分，我们学习了Drupal 8 的服务容器组件。现在，你对Drupal8不修改一行代码实现自己的服务替换Symfony2的服务应该有了更好的认识。这允许drupal内核维护者轻松地升级Symfony2。当学习Drupal 8时，你会经常翻阅core.services.yml文件查找正在使用的服务。</p>
<p>下周，我们将详细学习Drupal 8的控制流程和路由。</p>
<p>##三、路由</p>
<p>这是’理解drupal8’的第三部分，在前2个部分，我们学习了drupal8和Symfony的结构化差异。这部分我们将学习drupal8如何处理一个请求。首先，我们将看下引导阶段以及控制流程，然后我们将会学习事件订阅，这是个非常重要的概念，需要你在学习请求处理之前就理解它。</p>
<p>###1、流程控制(Flow of control)<br>接下来，我们将学习发起一个请求之后，drupal8是如何处理的。</p>
<p>####1)、bootstrap配置<br>①、读取settings.php文件（一般在sites/default/下），动态生成一些其它设置信息，保存到全局变量和Drupal\Component\Utility\Settings对象中。<br>②、执行类加载器(class loader)，加载类。<br>③、设置Drupal错误处理程序。<br>④、检测Drupal是否正确安装，如没有，则跳转到安装界面。<br>####2)、构建Drupal内核<br>####3)、初始化service container（从缓存或者重建）<br>####4)、把container添加到Drupal静态类<br>####5)、尝试加载缓存的静态页(类似Drupal7)<br>####6)、加载所有变量(variable_get) ？这个函数已经去掉了<br>####7)、加载其他必要的文件<br>####8)、注册stream wrappers(public://, private://, temp://，自定义)<br>####9)、创建HTTP请求对象（使用Symfony HttpFoundation）<br>####10)、DrupalKernel处理并返回结果<br>####11)、发送返回结果给客户端<br>####12)、中断请求</p>
<p>其中最值得探讨的是在请求处理阶段究竟发生了什么?要了解这点，我们先来学习事件监听。</p>
<p>###2、事件订阅(Event subscribers)<br>之前，我们探讨了Compiler passes。标签化服务一个最重要的用处就是，event_subscriber-tagged服务。这些服务应该实现了EventSubscriberInterface，并且基本上都是事件监听器。事件会声明一个getSubscribedEvents方法定义哪个事件应该映射到哪个处理方法，并设置一个属性来决定事件动作执行的顺序。在Drupal核心中只有少数事件在调用：<br>①、kernel.request<br>请求分发的最初阶段调用<br>②、kernel.response<br>请求响应的时候调用<br>③、routing.route_dynamic<br>允许模块加载额外的路由<br>④、routing.route_alter<br>允许在route collection中改变routes。主要用于核心添加一些校验和参数转换。</p>
<p>每个Drupal开发者都应该了解事件订阅。尤其是kernel.request，因为它替换了hook_init(Drupal7)。另外一个比较重要的事件是routing.route_dynamic事件。因为它可以创建动态路由，而一般路由是在yaml文件中静态配置的。在Drupal8之前，都是在hook_menu中实现，但现在hook_menu仅用于生成菜单项。如block模块在\Drupal\block\Routing\RouteSubscriber用 routing.route_dynamic注册路由用于区块配置页面。</p>
<p>你可能会奇怪事件订阅干嘛不用hook呢？因为这是一种很有效的方式，所有可用的事件监听都已经编译到了服务容器中，而且还被缓存着！同时，它也会让Drupal更加趋于面向对象。</p>
<p>###3、从请求到响应(From request to response)<br>当一个请求来时，系统开始引导，启动DrupalKernel，调用对应的方法，委派请求给Symfony2的HttpKernel做进一步处理。<br>HttpKernel分发kernel.request事件，一些订阅监听事件将按照顺序执行：<br>①、AuhtenticationSubscriber<br>加载session，设置全局用户<br>②、LanguageRequestSubscriber<br>检测当前语言<br>③、PathSubscriber<br>将url转换为系统路径(url别名等)<br>④、LegacyRequestSubscriber<br>允许设置一个自定义主题并初始化<br>⑤、MaintenanceModeSubscriber<br>如果是维护模式，显示维护页面<br>⑥、RouteListener<br>获取所有已加载的路由对象<br>⑦、AccessSubscriber<br>检查客户端的访问权限</p>
<p>RouterListener在路由工作的时候调用，获取路由服务返回的路由属性。Drupal的路由服务跟Symfony的不同：DynamicRouter在Symfony中仅仅以插件形式提供，见<a href="http://cmf.symfony.com/%E3%80%82%E4%B8%8ESymfony%E5%B8%B8%E8%A7%84%E8%B7%AF%E7%94%B1%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E5%9C%A8%E4%BA%8E%EF%BC%8CDrupal%E7%9A%84DynamicRouter%E6%94%AF%E6%8C%81%E5%A2%9E%E5%BC%BA%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%86%E5%9C%A8%E4%B8%8B%E4%B8%80%E8%8A%82%E8%AE%A8%E8%AE%BA%E3%80%82DynamicRouter%E7%B1%BB%E6%8E%A5%E4%B8%8B%E6%9D%A5%E4%BC%9A%E6%8A%8A%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BB%BB%E5%8A%A1%EF%BC%88%E7%B1%BB%E4%BC%BC%E4%BA%8EDrupal">http://cmf.symfony.com/。与Symfony常规路由的主要区别在于，Drupal的DynamicRouter支持增强，我们将在下一节讨论。DynamicRouter类接下来会把查找当前路由的任务（类似于Drupal</a> 7中的current_path）委派给NestedMatcher, 而NestedMatcher又会把这个任务委派给RouteProvider。RouteProvider会在router表中找到匹配该路由的路由，也包括在CMS中的已缓存的路由。这个路由表是由route builder创建，站点我们稍后再做介绍。路由按照路径长度进行匹配：最长的匹配路径被认为是正确的。然后，NestedMatcher要求UrlMatcher在路由集中选定那个特定的活跃路由。通常，能正确的通过http/https通过GET/POST方式访问的路由将被UrlMatcher优先匹配(最长匹配)。当然通常情况下，我们只会定义一个路由，所以UrlMatcher的作用很有限。最终的结果就是匹配到一个可用的活跃路由，如node.add_page。</p>
<p>接下来我们了解一下route filters，可能在实际项目中并不一定用到。通过添加一个打了标签名为route_filter的service，这些route filters将被NestedMatcher调用，在RouteProvider返回正确路由信息之后直接过滤路由集。Drupal核心仅对没有返回MIME类型的路由采用mechanism名做过滤操作，当然，还得显示指定”_format”。</p>
<p>匹配到请求路由后，DynamicRouter继续调用路由的增强属性，包含路由属性，转换路由参数。下一节将讲述这个过程。然后路由属性会返回给RouterListener，并设置在请求对象中。接下来，执行权限检查(AccessSubscriber)，最后，使用正确的参数调用控制器方法，控制器返回结果给客户端。</p>
<p>现在我们知道了请求的处理过程，接下来再来研究一下路由。</p>
<p>###4、路由<br>在Drupal7中，hook_menu用于注册页面回掉函数(page callbacks)、标题(titles)、参数(arguments)、访问要求(requirements)等，Drupal8中,采用了Symfony的路由，将更加灵活，也更复杂。</p>
<p>Drupal8中将不会再有页面回掉函数，取而代之的是控制器类的方法。这些有效的路由现在会被配置在模块目录下的{module}.routing.yml文件中。举个例子：用户退出登陆的配置：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">user.logout:</span><br><span class="line">  path: <span class="string">&#x27;/user/logout&#x27;</span></span><br><span class="line"> defaults:</span><br><span class="line">    _controller: <span class="string">&#x27;\Drupal\user\Controller\UserController::logout&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _user_is_logged_in: <span class="string">&#x27;TRUE&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：任何路由都需要一个ID(user.logout)和路径(/user/logout)。在路径中也可包含参数，后面再来讨论。’default’非常重要，它用于控制请求路径匹配时需要做什么。’requirement’定义了是否应该处理请求，通常包括访问检查，Symfony替代了Drupal7的’access arguments’和’access callback’。</p>
<p>####常用’default’键：<br>①、_controller<br>返回一个预期的结果，通过调用特定的方法。<br>②、_content<br>如指定，基于请求的MIME类型设置_controller，并用特定的方法(通常是字符串或数组)填充返回值<br>③、_form<br>如指定，_controller设置给HtmlFormController::content响应特定的表单。这个form是一个类名，实现了FormInterface，而且通常继承自FormBase。当然表单的构建也是面向对象的。<br>④、_entity_form<br>如指定，_controller设置给HtmlEntityFormController::content返回特定的实体表单(如{entity_type}.{add|edit|delete})<br>⑤、_entity_list<br>如指定，_controller设置给HtmlFormController::content，_content设置给EntityListController::listing，基于实体类型列表控制器返回一个实体列表，使用期望实体的EntityListController提供一个实体列表。例:_entity_list: view_mode返回一个视图模式的渲染数组。<br>⑥、_entity_view<br>如指定，_controller设置HtmlFormController::content，_content设置EntityViewController::view ，在给定的视图模式下，通过路径和渲染模式下查找一个实体。如: _entity_view:node.teaser。 在视图模式下将返回一个{node}的渲染数组。<br>⑦、_title<br>页面的标题(字符串)<br>⑧、_title_callback<br>页面的标题(方法回调)</p>
<p>####常用’requirement’键：<br>①、_permission<br>指定当前用户需要拥有的特定权限<br>②、_role<br>指定当前用户需要拥有的特定角色<br>③、_method<br>允许的HTTP方法，如GET、POST等<br>④、_schema<br>一般为http或https，并且请求的scheme和定义的schema要一致。当使用Drupal::url()输出url时也会带入这个属性。<br>⑤、_node_add_access<br>定义某些node type的访问控制<br>⑥、_entity_access<br>实例的访问控制<br>⑦、_format<br>格式化MIME类型</p>
<p>上面所列的大多数(但不是所有)的requirement’是由access checkers’进行校验，这个我们稍后介绍。实际项目中，你可能需要创建一个自定义的access checkers,因为Drupal 7的’access callback’已不再可用。像node模块中的’_node_add_access’,通过定制的权限控制(NodeAddAccessCheck)来处理。</p>
<p>AccessManager执行权限控制,订阅kernel.requet的事件。调用权限检测，必须实现AccessInterface类。在之前，我们已经了解到权限检测会被注册为打了标签access_check的services。权限检测会有一个方法去检测客户端是否有权限访问指定的路由，如果访问被拒绝,会抛出一个“拒绝访问”页面。</p>
<p>####路径参数(path parameters)<br>在实践中你经常需要参数去控制页面回调。下面的路由定义实例中，路径包含一个名为’node’的参数。每一个路由存储相应的选项。控制器方法接收这些参数作为参数。所以在这种情况下,NodeController方法有一个参数:$node。一个路由可以有多个参数,但是他们的名字应该是唯一的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">node.view:</span><br><span class="line">  path: <span class="string">&#x27;/node/&#123;node&#125;&#x27;</span></span><br><span class="line">  defaults:</span><br><span class="line">    _content: <span class="string">&#x27;\Drupal\node\Controller\NodeController::page&#x27;</span></span><br><span class="line">    _title_callback: <span class="string">&#x27;\Drupal\node\Controller\NodeController::pageTitle&#x27;</span></span><br><span class="line">  requirements:</span><br><span class="line">    _entity_access: <span class="string">&#x27;node.view&#x27;</span></span><br></pre></td></tr></table></figure>

<p>参数传递的值默认就是url中的值(一个字符串)，但通常会通过parameter converter进行转换。在上面的示例中,NodeController不会得到node id，而是一个加载的node实体。 参数转换是由订阅着kernel.request事件的ParamConverterManager完成。ParamConverterManager包含可所有注册了的ParamConverterInterface(标签名为paramconverter的服务)的实现。当处理一个请求时,ParamConverterManager会遍历活跃路由的参数并调用参数转换器的转换方法。如果可能的话，一个’string’参数会被替换为一个完整的对象。请注意，如果控制器方法的参数没有明确的类型暗示，将会传递未发生转换的参数。</p>
<p>EntityConverter是Drupal核心中唯一一个提供参数转换的类，但是在Drupal中使用得很广。如果一个参数名匹配到了一个实体类型(‘node’, ‘user’等)，它就会被自动转换为实体对象。它的值被认为是实体的id。如果实体不存在或转换失败，则返回404。</p>
<p>你也可以指定一些值作为默认的可选参数，这只适用于参数不被转换的情况。</p>
<p>###4、路由生成(Route building)<br>路由，显然是在请求中完成的，它使用之前构建的’router’表。RouteBuilder service负责填充路由表(例如,当清理缓存后)。当一个请求来时，这个路由表用于查找对应的路由并完成它。这么做是出于性能的考虑。RouteBuilder通过收集所有的已配置的静态路由(yml-files)并创建一个包含它们的集合。它也调用route.route_dynamics事件，在这个事件中，事件订阅者还可以注册额外的路由(见上面的示例block模块)。然后调用routing.route_alter事件，这个事件可能有多个订阅者。另外一些特别重要的如访问控制和参数转换。</p>
<p>我们刚刚提到的访问检测。当处理一个请求时，访问检测会检测客户端是否有权限访问。当然，并不是所有的路由都需要权限。实际上，在构建路由的时候，就会决定每个路由的访问权限。这项工作由监听router.route_alter事件的AccessManager完成，包含静态和动态的访问控制。StaticAccessCheckInterface有一个方法appliesTo,用于返回一个requirement数组。动态访问控制通过applies方法来测试每个路由。AccessManager在router表中添加了一个选项“_access_checks”，这常用于处理一个请求时做路由的权限控制。注意，每一个路由至少需要一个访问检测，否则永远不会访问路由!</p>
<p>我们也提到参数转换器，也就是一个参数如何被转换器转换。每个参数，可能会有一个适用的转换器(或没有)。就像访问控制，这个适用的转换器会在ParamConverterManager创建路由时被搜索到。这个服务会检查每一个存在的路由参数，以及对应参数转化器的applies方法，并在router表中添加一个选项“converter”。这通常用于处理时，转换参数。</p>
<p>###5、总结(Conclusion)<br>在本节中,我们已经了解了如何处理请求。同时,你现在应该了解Drupal 8的路由以及它是如何工作的!事实上,你已经知道了从请求到响应这一基本流程。然而，Drupal8中仍然有一些有趣的概念存在，这部分内容将在下个部分也是最后一部分里面进行探讨。好了，我们下周再来讨论。</p>
<p>##四、Drupal8其它概念</p>
<p>在过去的几周我们已经了解了Drupal的结构和如何处理请求。我们还没有了解如何安装配置Drupal8。在你深入具体的核心模块代码之前,你应该了解一些重要的新的或变更的Drupal8概念。我在本文的最后一部分将描述它们。</p>
<p>###1、配置(Configuration)<br>Drupal8的配置系统做了很多令人兴奋的改进。最值得注意的是,现在配置存储在一个YAML-files中，目录结构一般为’/sites/{name}/files/config_{HASH}/active’。文件名应该准确描述该配置文件，例如,“node.settings.yml”是节点模块的设置，“views.view.content.yml”是一个完整的机器名称为’content’视图定义!</p>
<p>你可能认为配置文件非常不灵活。但在实践中,您可以使用YAML-syntax构建信息的关联数组。此外,Drupal提供一个Config对象可以用来改变配置文件，而不必手动编辑这样一个文件!当您通过Drupal UI创建一个新的字段，节点类型，区块类型或视图时，系统将会创建一个新的文件。内容(nodes)和数据依然存储在数据库中，否则你将无法建立快速查询。</p>
<p>一个模块可以包含conf子目录。当启用了一个模块，目录下的所有配置文件会被复制到网站的配置目录下，当文件添加完毕（而且缓存已经情况），配置会被系统检测到并且自动生效。通过这种方式,一个模块可以提供额外的node types, image styles, views等无需实现Drupal7中的诸如hook_node_info的钩子。</p>
<p>配置文件可以很容易地复制到另一个地方，这有利于在最后阶段更改配置!</p>
<p>配置文件也可能有一个关联的schema，详细描述了一个view/block/image style/的配置应该是什么样的。这样可以更好的验证、翻译配置。</p>
<p>###2、实体(Entities)<br>Drupal7引入了实体，使用实体作为主要的抽象内容，是Drupal底层架构最大的变化。例如,字段可被连接，可以定义访问方法，可以关联视图等。实体现在变的非常强大。在Drupal8中, 实体已经变的对于CMS来说更加核心。不仅内容数据(节点nodes、分类taxonomy terms、用户users)都是实体,而且non-fieldable比如视图(views)、数据操作(actions)、菜单(menus)、图像(image styles)等都是扩展实体类，也包节点类型和词汇等实体。</p>
<p>使用attributes定义一个实体的属性。例如，这里可以指定一个实体是否fieldable或者它应该作为另一个实体的一个集合。实体依赖于控制器，不一定需要保存在配置文件中。如果控制器继承ConfigStorageController,将被保存为配置文件。虽然配置文件有好处，这意味着您不能使用数据库查询它们。如果你想搜索它们,你要加载所有项目并使用for循环去检索。如果存储在数据库中，例如节点和用户,就可以使用FieldableDatabaseStorageController。节点、用户、分类都是一样。但结果就是，这些内容不能通过配置文件进行传递。对我来说,现在还不清楚是否有可能有一个fieldable配置存储控制器!</p>
<p>如果要加深实体的理解，我建议你看一看ImageStyle类,这是一个纯粹的基于配置的实体，taxonomy term,它是一个字段化基于数据库存储的实体，还有Vocabulary，它是一个实体集。</p>
<p>###3、插件(Plugins)<br>插件可以看作是钩子的面向对象版本。他们用于模块化包括自定义模块，图像效果等。</p>
<p>学习插件有个很好的示例就是BlockBase抽象类。为了添加一个新的自定义block时，就必须继承这个类，这么做类似于论坛模块的ActiveTopicsBlock类。一些方法不一定必须覆盖其访问检查、视图建立、改变块的形式等。</p>
<p>插件管理器用来定义插件类型，指定命名空间列表以及用于存放插件的子目录。通过这种方式,任何模块可以添加插件。插件通过注释类的方式进行设置。此外，根据不同的插件类型，注释中必须要指定一些配置属性。</p>
<p>###4、类(Drupal class)<br>Drupal 8核心代码主要是面向对象的。然而，模块中的钩子代码仍然是面向过程的。这里就出现了疑问,因为Symfony是完全面向对象的！在Symfony中，如果您需要依赖于另一个service创建一些功能,您将创建一个新的服务并且在服务容器定义所需的必须依赖项。但如果你想用Drupal的钩子实现一个特定的service,将创建一个静态Drupal类。它可以通过使用Drupal::service(“{service_id}”),或着通过使用特定的像Drupal::request(),Drupal:currentUser(),Drupal:entityManager()的服务访问器类获程序流程中的services。后者的优势是可以为你提供更好的代码补全功能。此外,它提供了一些方便像Drupal::url()的辅助方法，相当于Drupal7的url()方法。</p>
<p>下面是一个采用Drupal class的例子，位于node.module中的node_access方法:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">node_access</span>(<span class="params"><span class="variable">$op</span>, <span class="variable">$node</span>, <span class="variable">$account</span> = <span class="literal">NULL</span>, <span class="variable">$langcode</span> = <span class="literal">NULL</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$access_controller</span> = \Drupal::entityManager()-&gt;getAccessController(<span class="string">&#x27;node&#x27;</span>);</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$access_controller</span>-&gt;access(<span class="variable">$node</span>, <span class="variable">$op</span>, <span class="variable">$langcode</span>, <span class="variable">$account</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###5、总结(Conclusion)<br>在本文中,我们已经了解了Drupal8的结构，以及与Symfony2对比。我们还学习了服务容器管理着所有服务,而服务可以进行配置。之后我们学习了路由和处理请求的过程。最后我们介绍了Drupal8中一些重要的新概念:Drupal类,插件和配置Drupal8。</p>
<p>我希望所有这些会帮助你探索和了解Drupal8。我希望你能够了解Drupal8模块开发，并对这个伟大的项目有所贡献。</p>
<p>原文出处：<a href="https://cipix.nl/understanding-drupal-8-part-1-general-structure-framework">https://cipix.nl/understanding-drupal-8-part-1-general-structure-framework</a></p>
]]></content>
      <categories>
        <category>Drupal8</category>
      </categories>
      <tags>
        <tag>drupal8</tag>
      </tags>
  </entry>
  <entry>
    <title>vue在drupal中的模块化开发</title>
    <url>/2017/01/27/vue%E5%9C%A8drupal%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><code>vue</code>的模块化开发，基于<code>webpack</code>，<code>gulp</code></p>
<p>由于<code>vue</code>组件系统，<code>drupal</code>中的<code>vue</code>可以直接在主题中写组件</p>
<p>OK，初始化一个主题，<code>lancer</code></p>
<p>本地先安装node</p>
<p>然后在<code>lancer</code>目录下先放个<code>package.json</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;voss&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;webapp with Vue.js for voss.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;panjun.liu &lt;panjun.liu@verycloud.cn&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;node build/dev-server.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;node build/build.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;unit&quot;</span>: <span class="string">&quot;karma start test/unit/karma.conf.js --single-run&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;npm run unit&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint --ext .js,.vue src test/unit/specs test/e2e/specs&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-runtime&quot;</span>: <span class="string">&quot;^6.11.6&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;babel-core&quot;</span>: <span class="string">&quot;^6.16.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span>: <span class="string">&quot;^6.2.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-plugin-transform-runtime&quot;</span>: <span class="string">&quot;^6.15.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-preset-es2015&quot;</span>: <span class="string">&quot;^6.16.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-preset-stage-2&quot;</span>: <span class="string">&quot;^6.16.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;bulma&quot;</span>: <span class="string">&quot;0.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;chai&quot;</span>: <span class="string">&quot;^3.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;chart.js&quot;</span>: <span class="string">&quot;^2.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;connect-history-api-fallback&quot;</span>: <span class="string">&quot;^1.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^0.25.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;element-ui&quot;</span>: <span class="string">&quot;^1.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^3.7.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-config-standard&quot;</span>: <span class="string">&quot;^6.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-friendly-formatter&quot;</span>: <span class="string">&quot;^2.0.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-loader&quot;</span>: <span class="string">&quot;^1.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-html&quot;</span>: <span class="string">&quot;^1.5.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-promise&quot;</span>: <span class="string">&quot;^2.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-standard&quot;</span>: <span class="string">&quot;^2.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eventsource-polyfill&quot;</span>: <span class="string">&quot;^0.9.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;^4.14.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;extract-text-webpack-plugin&quot;</span>: <span class="string">&quot;^1.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;fastclick&quot;</span>: <span class="string">&quot;^1.0.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;file-loader&quot;</span>: <span class="string">&quot;^0.9.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;function-bind&quot;</span>: <span class="string">&quot;^1.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^2.22.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;http-proxy-middleware&quot;</span>: <span class="string">&quot;^0.17.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;inject-loader&quot;</span>: <span class="string">&quot;^2.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;isparta-loader&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;json-loader&quot;</span>: <span class="string">&quot;^0.5.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma&quot;</span>: <span class="string">&quot;^1.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-coverage&quot;</span>: <span class="string">&quot;^1.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-mocha&quot;</span>: <span class="string">&quot;^1.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-phantomjs-launcher&quot;</span>: <span class="string">&quot;^1.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-sinon-chai&quot;</span>: <span class="string">&quot;^1.2.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-sourcemap-loader&quot;</span>: <span class="string">&quot;^0.3.7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-spec-reporter&quot;</span>: <span class="string">&quot;0.0.26&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-webpack&quot;</span>: <span class="string">&quot;^1.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less&quot;</span>: <span class="string">&quot;^2.7.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^2.2.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lolex&quot;</span>: <span class="string">&quot;^1.5.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mocha&quot;</span>: <span class="string">&quot;^3.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moment&quot;</span>: <span class="string">&quot;^2.14.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ora&quot;</span>: <span class="string">&quot;^0.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;phantomjs-prebuilt&quot;</span>: <span class="string">&quot;^2.1.12&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;shelljs&quot;</span>: <span class="string">&quot;^0.7.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sinon&quot;</span>: <span class="string">&quot;^1.17.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sinon-chai&quot;</span>: <span class="string">&quot;^2.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;swiper&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url-loader&quot;</span>: <span class="string">&quot;^0.5.7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-hot-reload-api&quot;</span>: <span class="string">&quot;^2.0.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-html-loader&quot;</span>: <span class="string">&quot;^1.2.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-loader&quot;</span>: <span class="string">&quot;^9.7.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-resource&quot;</span>: <span class="string">&quot;^1.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span>: <span class="string">&quot;^2.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-style-loader&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vuex&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^1.13.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-dev-middleware&quot;</span>: <span class="string">&quot;^1.8.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-hot-middleware&quot;</span>: <span class="string">&quot;^2.13.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-merge&quot;</span>: <span class="string">&quot;^0.14.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行<code>npm install</code>开始初始化环境</p>
<p>之后<code>npm install gulp gulp-util gulp-less gulp-concat gulp-open gulp-uglify gulp-cssmin gulp-md5-plus gulp-file-include gulp-clean gulp-css-spriter gulp-css-base64 webpack gulp-connect --save-dev</code>安装<code>gulp</code>环境</p>
<p>初始化<code>gulpfile.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>),</span><br><span class="line">  os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>),</span><br><span class="line">  gutil = <span class="built_in">require</span>(<span class="string">&#x27;gulp-util&#x27;</span>),</span><br><span class="line">  less = <span class="built_in">require</span>(<span class="string">&#x27;gulp-less&#x27;</span>),</span><br><span class="line">  concat = <span class="built_in">require</span>(<span class="string">&#x27;gulp-concat&#x27;</span>),</span><br><span class="line">  gulpOpen = <span class="built_in">require</span>(<span class="string">&#x27;gulp-open&#x27;</span>),</span><br><span class="line">  uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>),</span><br><span class="line">  cssmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-cssmin&#x27;</span>),</span><br><span class="line">  md5 = <span class="built_in">require</span>(<span class="string">&#x27;gulp-md5-plus&#x27;</span>),</span><br><span class="line">  fileinclude = <span class="built_in">require</span>(<span class="string">&#x27;gulp-file-include&#x27;</span>),</span><br><span class="line">  clean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean&#x27;</span>),</span><br><span class="line">  spriter = <span class="built_in">require</span>(<span class="string">&#x27;gulp-css-spriter&#x27;</span>),</span><br><span class="line">  base64 = <span class="built_in">require</span>(<span class="string">&#x27;gulp-css-base64&#x27;</span>),</span><br><span class="line">  webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>),</span><br><span class="line">  webpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./build/webpack.prod.conf.js&#x27;</span>),</span><br><span class="line">  connect = <span class="built_in">require</span>(<span class="string">&#x27;gulp-connect&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = &#123;</span><br><span class="line">  path: <span class="string">&#x27;dist/&#x27;</span>,</span><br><span class="line">  port: <span class="number">3000</span>,</span><br><span class="line">  html: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mac chrome: &quot;Google chrome&quot;, </span></span><br><span class="line"><span class="keyword">var</span> browser = os.platform() === <span class="string">&#x27;linux&#x27;</span> ? <span class="string">&#x27;Google chrome&#x27;</span> : (</span><br><span class="line">  os.platform() === <span class="string">&#x27;darwin&#x27;</span> ? <span class="string">&#x27;Google chrome&#x27;</span> : (</span><br><span class="line">    os.platform() === <span class="string">&#x27;win32&#x27;</span> ? <span class="string">&#x27;chrome&#x27;</span> : <span class="string">&#x27;firefox&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> pkg = <span class="built_in">require</span>(<span class="string">&#x27;./package.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将图片拷贝到目标目录</span></span><br><span class="line">gulp.task(<span class="string">&#x27;copy:images&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  gulp.src([<span class="string">&#x27;src/images/**/*&#x27;</span>]).pipe(gulp.dest(<span class="string">&#x27;dist/images&#x27;</span>)).on(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩合并css, css中既有自己写的.less, 也有引入第三方库的.css</span></span><br><span class="line">gulp.task(<span class="string">&#x27;lessmin&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  gulp.src([<span class="string">&#x27;src/css/main.less&#x27;</span>, <span class="string">&#x27;src/css/*.css&#x27;</span>])</span><br><span class="line">    .pipe(less())</span><br><span class="line">    <span class="comment">//这里可以加css sprite 让每一个css合并为一个雪碧图</span></span><br><span class="line">    <span class="comment">//.pipe(spriter(&#123;&#125;))</span></span><br><span class="line">    .pipe(concat(<span class="string">&#x27;style.min.css&#x27;</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;dist/css/&#x27;</span>))</span><br><span class="line">    .on(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将js加上10位md5,并修改html中的引用路径，该动作依赖build-js</span></span><br><span class="line">gulp.task(<span class="string">&#x27;md5:js&#x27;</span>, [<span class="string">&#x27;build-js&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">&#x27;dist/js/*.js&#x27;</span>)</span><br><span class="line">    .pipe(md5(<span class="number">10</span>, <span class="string">&#x27;dist/app/*.html&#x27;</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;dist/js&#x27;</span>))</span><br><span class="line">    .on(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将css加上10位md5，并修改html中的引用路径，该动作依赖sprite</span></span><br><span class="line">gulp.task(<span class="string">&#x27;md5:css&#x27;</span>, [<span class="string">&#x27;sprite&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">&#x27;dist/css/*.css&#x27;</span>)</span><br><span class="line">    .pipe(md5(<span class="number">10</span>, <span class="string">&#x27;dist/app/*.html&#x27;</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;dist/css&#x27;</span>))</span><br><span class="line">    .on(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于在html文件中直接include文件</span></span><br><span class="line">gulp.task(<span class="string">&#x27;fileinclude&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  gulp.src([<span class="string">&#x27;src/app/*.html&#x27;</span>])</span><br><span class="line">    .pipe(fileinclude(&#123;</span><br><span class="line">      prefix: <span class="string">&#x27;@@&#x27;</span>,</span><br><span class="line">      basepath: <span class="string">&#x27;@file&#x27;</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;dist/app&#x27;</span>))</span><br><span class="line">    .on(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">  <span class="comment">// .pipe(connect.reload())</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//雪碧图操作，应该先拷贝图片并压缩合并css</span></span><br><span class="line">gulp.task(<span class="string">&#x27;sprite&#x27;</span>, [<span class="string">&#x27;copy:images&#x27;</span>, <span class="string">&#x27;lessmin&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timestamp = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  gulp.src(<span class="string">&#x27;dist/css/style.min.css&#x27;</span>)</span><br><span class="line">    .pipe(spriter(&#123;</span><br><span class="line">      spriteSheet: <span class="string">&#x27;dist/images/spritesheet&#x27;</span> + timestamp + <span class="string">&#x27;.png&#x27;</span>,</span><br><span class="line">      pathToSpriteSheetFromCSS: <span class="string">&#x27;../images/spritesheet&#x27;</span> + timestamp + <span class="string">&#x27;.png&#x27;</span>,</span><br><span class="line">      spritesmithOptions: &#123;</span><br><span class="line">        padding: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(base64())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;dist/css&#x27;</span>))</span><br><span class="line">    .on(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;clean&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  gulp.src([<span class="string">&#x27;dist&#x27;</span>])</span><br><span class="line">    .pipe(clean())</span><br><span class="line">    .on(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;watch&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  gulp.watch([<span class="string">&#x27;/var/www/html/voss/**/*.vue&#x27;</span>, <span class="string">&#x27;/var/www/html/voss/**/*.js&#x27;</span>, <span class="string">&#x27;/var/www/html/voss/**/*.less&#x27;</span>], [<span class="string">&#x27;lessmin&#x27;</span>, <span class="string">&#x27;build-js&#x27;</span>, <span class="string">&#x27;fileinclude&#x27;</span>])</span><br><span class="line">    .on(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;connect&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;connect------------&#x27;</span>);</span><br><span class="line">  connect.server(&#123;</span><br><span class="line">    root: host.path,</span><br><span class="line">    port: host.port,</span><br><span class="line">    livereload: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .pipe(gulpOpen(&#123;</span><br><span class="line">      app: browser,</span><br><span class="line">      uri: <span class="string">&#x27;http://localhost:3000/app&#x27;</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .on(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myDevConfig = <span class="built_in">Object</span>.create(webpackConfig);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> devCompiler = webpack(myDevConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用webpack对js进行操作</span></span><br><span class="line">gulp.task(<span class="string">&quot;build-js&quot;</span>, [<span class="string">&#x27;fileinclude&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  devCompiler.run(<span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> gutil.PluginError(<span class="string">&quot;webpack:build-js&quot;</span>, err);</span><br><span class="line">    gutil.log(<span class="string">&quot;[webpack:build-js]&quot;</span>, stats.toString(&#123;</span><br><span class="line">      colors: <span class="literal">true</span></span><br><span class="line">    &#125;));</span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发布</span></span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;connect&#x27;</span>, <span class="string">&#x27;fileinclude&#x27;</span>, <span class="string">&#x27;md5:css&#x27;</span>, <span class="string">&#x27;md5:js&#x27;</span>, <span class="string">&#x27;open&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发</span></span><br><span class="line">gulp.task(<span class="string">&#x27;dev&#x27;</span>, [<span class="string">&#x27;connect&#x27;</span>, <span class="string">&#x27;copy:images&#x27;</span>, <span class="string">&#x27;fileinclude&#x27;</span>, <span class="string">&#x27;lessmin&#x27;</span>, <span class="string">&#x27;build-js&#x27;</span>, <span class="string">&#x27;watch&#x27;</span>, <span class="string">&#x27;open&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>命令行下<code>gulp</code>回车，启动监控任务</p>
<p>OK，现在可以开始<code>vue</code>的开发了</p>
<p>主题下新建个目录<code>src</code>用于存放<code>vue</code>的组件，以及启动<code>js</code>文件<code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Resource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Contrib.</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-default/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Voss.</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Notfound <span class="keyword">from</span> <span class="string">&#x27;./pages/base/404&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Organization <span class="keyword">from</span> <span class="string">&#x27;./pages/base/Organization&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Region <span class="keyword">from</span> <span class="string">&#x27;./pages/base/Region&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Position <span class="keyword">from</span> <span class="string">&#x27;./pages/base/Position&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Education <span class="keyword">from</span> <span class="string">&#x27;./pages/base/Education&#x27;</span></span><br><span class="line"><span class="keyword">import</span> CompanyAuthority <span class="keyword">from</span> <span class="string">&#x27;./pages/base/CompanyAuthority&#x27;</span></span><br><span class="line"><span class="keyword">import</span> CompanyAuthorityConfig <span class="keyword">from</span> <span class="string">&#x27;./pages/base/CompanyAuthorityConfig&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Memory <span class="keyword">from</span> <span class="string">&#x27;./pages/base/Memory&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Variables <span class="keyword">from</span> <span class="string">&#x27;./pages/base/Variables&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vuex store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line">Vue.use(Resource)</span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局闭包，公用函数库，也可以放置到vuex2.0中</span></span><br><span class="line"><span class="built_in">global</span>.$fn = &#123;</span><br><span class="line">  <span class="comment">// 获取url中的参数，允许默认值的设定</span></span><br><span class="line">  getparam (name, defaultValue) &#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;(^|&amp;)&#x27;</span> + name + <span class="string">&#x27;=([^&amp;]*)(&amp;|$)&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg)</span><br><span class="line">    <span class="keyword">return</span> (!r) ? ((!defaultValue) ? <span class="string">&#x27;&#x27;</span> : defaultValue) : <span class="built_in">unescape</span>(r[<span class="number">2</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  init () &#123;</span><br><span class="line">    <span class="comment">// 登录或注销后需要清空cache</span></span><br><span class="line">    <span class="comment">// store.commit(&#x27;isAuth&#x27;, false)</span></span><br><span class="line">    <span class="comment">// this.csrf.requestToken()</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 随机字符串</span></span><br><span class="line">  getCode (n) &#123;</span><br><span class="line">    <span class="keyword">let</span> chars = <span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      res += chars[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * chars.length)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// cache 机制</span></span><br><span class="line">  cache: [],</span><br><span class="line">  <span class="comment">// 默认300秒数据缓存时间</span></span><br><span class="line">  exp: <span class="number">300</span>,</span><br><span class="line">  getCache (url) &#123;</span><br><span class="line">    <span class="keyword">let</span> json = <span class="built_in">this</span>.cache[url]</span><br><span class="line">    <span class="keyword">return</span> (json &amp;&amp; (json.exp &gt;= <span class="built_in">this</span>.timestamp())) ? json.data : <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  setCache (url, data, exp) &#123;</span><br><span class="line">    <span class="comment">// 默认300秒,&#123;data,exp&#125;</span></span><br><span class="line">    <span class="built_in">this</span>.cache[url] = &#123;<span class="attr">data</span>: data, <span class="attr">exp</span>: <span class="built_in">this</span>.timestamp() + ((!exp) ? <span class="built_in">this</span>.exp : exp)&#125;</span><br><span class="line">    <span class="comment">// console.log(this.cache)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  httprl (method, url, sendData) &#123;</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// handel get method.</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">&#x27;GET&#x27;</span> || method === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">      options.params = sendData</span><br><span class="line">      <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        Vue.http.get(url, options).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> data = result.data</span><br><span class="line">          resolve(data)</span><br><span class="line">        &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> promise</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// handle post put delete method.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.csrf.isExpired()) &#123;</span><br><span class="line">        <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">global</span>.$fn.csrf.requestToken().then(<span class="function"><span class="keyword">function</span> (<span class="params">token</span>) </span>&#123;</span><br><span class="line">            options.headers[<span class="string">&#x27;X-CSRF-Token&#x27;</span>] = token</span><br><span class="line">            <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">                Vue.http.post(url, sendData, options).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                  resolve(result.data)</span><br><span class="line">                &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                  reject(error)</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">              <span class="keyword">case</span> <span class="string">&#x27;put&#x27;</span>:</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">                Vue.http.put(url, sendData, options).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                  resolve(result.data)</span><br><span class="line">                &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                  reject(error)</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">              <span class="keyword">case</span> <span class="string">&#x27;del&#x27;</span>:</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&#x27;DEL&#x27;</span>:</span><br><span class="line">                Vue.http.delete(url, sendData, options).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                  resolve(result.data)</span><br><span class="line">                &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                  reject(error)</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> promise</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        options.headers[<span class="string">&#x27;X-CSRF-Token&#x27;</span>] = <span class="built_in">this</span>.csrf.getToken()</span><br><span class="line">        <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">              Vue.http.post(url, sendData, options).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                resolve(result.data)</span><br><span class="line">              &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                reject(error)</span><br><span class="line">              &#125;)</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;put&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">              Vue.http.put(url, sendData, options).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                resolve(result.data)</span><br><span class="line">              &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                reject(error)</span><br><span class="line">              &#125;)</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;del&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;DEL&#x27;</span>:</span><br><span class="line">              Vue.http.delete(url, sendData, options).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                resolve(result.data)</span><br><span class="line">              &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                reject(error)</span><br><span class="line">              &#125;)</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> promise</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  csrf: &#123;</span><br><span class="line">    getToken: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.csrf.token</span><br><span class="line">    &#125;,</span><br><span class="line">    getExpire: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.csrf.expire</span><br><span class="line">    &#125;,</span><br><span class="line">    nowTime: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      <span class="keyword">return</span> date.getTime()</span><br><span class="line">    &#125;,</span><br><span class="line">    isExpired: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> csrfToken = <span class="built_in">global</span>.$fn.csrf.getToken()</span><br><span class="line">      <span class="keyword">let</span> tokenExpire = <span class="built_in">global</span>.$fn.csrf.getExpire()</span><br><span class="line">      <span class="keyword">let</span> nowTime = <span class="built_in">global</span>.$fn.csrf.nowTime()</span><br><span class="line">      <span class="keyword">return</span> (csrfToken === <span class="literal">undefined</span> || !csrfToken.length || (nowTime &gt;= tokenExpire))</span><br><span class="line">    &#125;,</span><br><span class="line">    requestToken: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        Vue.http.get(<span class="string">&#x27;rest/session/token&#x27;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">          store.state.csrf.token = result.data</span><br><span class="line">          store.state.csrf.expire = <span class="built_in">global</span>.$fn.csrf.nowTime() + store.state.csrf_token_expire * <span class="number">1000</span></span><br><span class="line">          resolve(result.data)</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">&#x27;Error! Fail to get csrf token!&#x27;</span>)</span><br><span class="line">          <span class="built_in">console</span>.error(error)</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> promise</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  toast (mode, title) &#123;</span><br><span class="line">    store.commit(<span class="string">&#x27;toast&#x27;</span>, &#123;</span><br><span class="line">      id: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">      title: (title &amp;&amp; title.length) &gt; <span class="number">0</span> ? title : <span class="string">&#x27;操作完成&#x27;</span>,</span><br><span class="line">      mode: mode</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 时间戳</span></span><br><span class="line">  timestamp () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">global.$fn.httprl(&#x27;POST&#x27;, &#x27;api/login&#x27;, &#123;</span></span><br><span class="line"><span class="comment">  username: &#x27;agent&#x27;, password: &#x27;123.com&#x27;</span></span><br><span class="line"><span class="comment">&#125;).then(</span></span><br><span class="line"><span class="comment">  (result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    console.log(result)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/base/organization&#x27;</span>,</span><br><span class="line">    component: Organization,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;组织架构&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/base/organization/department&#x27;</span>,</span><br><span class="line">    component: Organization,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;部门&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    component: Notfound</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    redirect: <span class="string">&#x27;/404&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  base: <span class="string">&#x27;/profile/&#x27;</span>,</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  linkActiveClass: <span class="string">&#x27;is-active&#x27;</span>, <span class="comment">// router-link active样式</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  由于本项目采用内滚动布局，此处代码无效，需要自行hack vue-router获得此能力</span></span><br><span class="line"><span class="comment">  saveScrollPosition: true,</span></span><br><span class="line"><span class="comment">  scrollBehavior (to, from, savedPosition) &#123;</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  routes <span class="comment">// short for routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// if (store.getters.getIsAuth || !to.meta.auth) &#123;</span></span><br><span class="line">  <span class="comment">//  next()</span></span><br><span class="line">  <span class="comment">// &#125; else &#123;</span></span><br><span class="line">  <span class="comment">// 判断是否登录，（可以通过接口，Vuex状态 token）</span></span><br><span class="line">  <span class="comment">// 没有登录走下面逻辑</span></span><br><span class="line">  <span class="built_in">document</span>.title = to.meta.title + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;| 后台管理&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">global</span>.$fn.csrf.isExpired()) &#123;</span><br><span class="line">    <span class="built_in">global</span>.$fn.csrf.requestToken()</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>src</code>目录下新建个文件<code>App.vue</code>，作为应用的主文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xheader</span>&gt;</span><span class="tag">&lt;/<span class="name">xheader</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sidebar</span>&gt;</span><span class="tag">&lt;/<span class="name">sidebar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">keep-alive</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modal</span> <span class="attr">v-show</span>=<span class="string">&quot;isModal&quot;</span> @<span class="attr">closemodal</span>=<span class="string">&quot;closeModal()&quot;</span> <span class="attr">:mode</span>=<span class="string">&quot;modalinfo.mode&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;modalinfo.title&quot;</span>&quot; <span class="attr">:content</span>=<span class="string">&quot;modalinfo.content&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;modalinfo.width&quot;</span> <span class="attr">:ok</span>=<span class="string">&quot;modalinfo.ok&quot;</span>&quot; <span class="attr">:cancel</span>=<span class="string">&quot;modalinfo.cancel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// vuex全局数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Xheader <span class="keyword">from</span> <span class="string">&#x27;./components/header&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Sidebar <span class="keyword">from</span> <span class="string">&#x27;./components/sidebar&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/modal&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  store: store,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Modal,</span><br><span class="line">    Xheader,</span><br><span class="line">    Sidebar</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      modalinfo: &#123;</span><br><span class="line"><span class="javascript">        mode: <span class="string">&#x27;alert&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        title: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        content: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        callback: <span class="literal">null</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// data</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    isModal () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.getModal</span></span><br><span class="line">    &#125;</span><br><span class="line">    /*</span><br><span class="line">    isAuth () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.getIsAuth</span></span><br><span class="line">    &#125;,</span><br><span class="line">    toastArray () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.getToast</span></span><br><span class="line">    &#125;,</span><br><span class="line">    preloaderShow () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.getPreloader</span></span><br><span class="line">    &#125;</span><br><span class="line">    */</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showModal (mode, title, content, width, ok, cancel) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$set(<span class="built_in">this</span>.modalinfo, <span class="string">&#x27;mode&#x27;</span>, mode)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$set(<span class="built_in">this</span>.modalinfo, <span class="string">&#x27;title&#x27;</span>, title)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$set(<span class="built_in">this</span>.modalinfo, <span class="string">&#x27;content&#x27;</span>, content)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$set(<span class="built_in">this</span>.modalinfo, <span class="string">&#x27;width&#x27;</span>, width)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$set(<span class="built_in">this</span>.modalinfo, <span class="string">&#x27;ok&#x27;</span>, ok)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$set(<span class="built_in">this</span>.modalinfo, <span class="string">&#x27;cancel&#x27;</span>, cancel)</span></span><br><span class="line"><span class="javascript">      store.commit(<span class="string">&#x27;modal&#x27;</span>, <span class="literal">true</span>)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    closeModal () &#123;</span><br><span class="line"><span class="javascript">      store.commit(<span class="string">&#x27;modal&#x27;</span>, <span class="literal">false</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// let ico = require(&#x27;./assets/images/vueico.png&#x27;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// let icon = require(&#x27;./assets/images/vuelogo.png&#x27;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// document.getElementById(&#x27;linkIcon&#x27;).href = ico</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// document.getElementById(&#x27;linkAppIcon&#x27;).href = icon</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.applicationCache.addEventListener(<span class="string">&#x27;updateready&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">window</span>.applicationCache.status === <span class="built_in">window</span>.applicationCache.UPDATEREADY) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;system update&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location.reload()</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="keyword">@import</span> <span class="string">&#x27;./lancer.less&#x27;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>哦，对了，还有对应的<code>css</code>文件，当然这里可以直接用<code>less</code>文件，gulp监控任务会自动编译成css文件</p>
<p>这里我们直接<code>import</code>引入<code>less</code>文件，基于相对路径</p>
]]></content>
      <categories>
        <category>drupal</category>
      </categories>
      <tags>
        <tag>drupal</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>web开发规范</title>
    <url>/2016/10/07/web%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h2><p>前端开发涉及的所文件统一使用<code>utf-8</code>编码</p>
<h2 id="文件命名规则"><a href="#文件命名规则" class="headerlink" title="文件命名规则"></a>文件命名规则</h2><p>全部小写方式，以下划线分隔</p>
<p>例：my_project</p>
<blockquote>
<p>特例：drupal中的模版文件</p>
</blockquote>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li>缩进使用2个空格；</li>
<li>嵌套的节点应该缩进；</li>
<li>在属性上，使用双引号，不要使用单引号；</li>
<li>属性名全小写，用中划线做分隔符；</li>
<li>不要在自动闭合标签结尾处使用斜线（<a href="http://dev.w3.org/html5/spec-author-view/syntax.html#syntax-start-tag">HTML5 规范</a> 指出他们是可选的）；</li>
<li>不要忽略可选的关闭标签，例：<code>&lt;/li&gt;</code> 和 <code>&lt;/body&gt;</code>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/company_logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Company&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;hello-world&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="HTML5-doctype"><a href="#HTML5-doctype" class="headerlink" title="HTML5 doctype"></a>HTML5 doctype</h3><p>在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="lang属性"><a href="#lang属性" class="headerlink" title="lang属性"></a>lang属性</h3><p>根据HTML5规范：</p>
<blockquote>
<p>应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。</p>
</blockquote>
<p>在sitepoint上可以查到<a href="http://reference.sitepoint.com/html/lang-codes">语言列表</a>；</p>
<p>但sitepoint只是给出了语言的大类，例如中文只给出了zh，但是没有区分香港，台湾，大陆。而微软给出了一份更加[详细的语言列表] <a href="http://msdn.microsoft.com/en-us/library/ms533052(v=vs.85).aspx" title="详细的语言列表">language</a>，其中细分了zh-cn, zh-hk, zh-tw。</p>
<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为<code>UTF-8</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IE兼容模式"><a href="#IE兼容模式" class="headerlink" title="IE兼容模式"></a>IE兼容模式</h3><p>用 <code>&lt;meta&gt;</code> 标签可以指定页面应该用什么版本的IE来渲染；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引入CSS-JS"><a href="#引入CSS-JS" class="headerlink" title="引入CSS, JS"></a>引入CSS, JS</h3><p>根据HTML5规范, 通常在引入CSS和JS时不需要指明 type，因为 <code>text/css</code> 和 <code>text/javascript</code> 分别是他们的默认值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- External CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;code_guide.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- In-document CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- External JS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;code_guide.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- In-document JS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性顺序"><a href="#属性顺序" class="headerlink" title="属性顺序"></a>属性顺序</h3><p>属性应该按照特定的顺序出现以保证易读性；</p>
<ul>
<li><code>class</code></li>
<li><code>id</code></li>
<li><code>name</code></li>
<li><code>data-*</code></li>
<li><code>src</code>, <code>for</code>, <code>type</code>, <code>href</code>, <code>value</code> , <code>max-length</code>, <code>max</code>, <code>min</code>, <code>pattern</code></li>
<li><code>placeholder</code>, <code>title</code>, <code>alt</code></li>
<li><code>aria-*</code>, <code>role</code></li>
<li><code>required</code>, <code>readonly</code>, <code>disabled</code></li>
</ul>
<p>class是为高可复用组件设计的，所以应处在第一位；</p>
<p>id更加具体且应该尽量少使用，所以将它放在第二位。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">data-modal</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Example link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="boolean属性"><a href="#boolean属性" class="headerlink" title="boolean属性"></a>boolean属性</h3><p>boolean属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需要；</p>
<p>更多内容可以参考 <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#boolean-attributes">WhatWG section on boolean attributes</a>：</p>
<blockquote>
<p>boolean属性的存在表示取值为true，不存在则表示取值为false。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">selected</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="减少标签数量"><a href="#减少标签数量" class="headerlink" title="减少标签数量"></a>减少标签数量</h3><p>在编写HTML代码时，需要尽量避免多余的父节点；</p>
<p>很多时候，需要通过迭代和重构来使HTML变得更少。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Not well --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Better --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h3><p>使用符合语义的标签书写 HTML 文档, 选择恰当的元素表达所需的含义。</p>
<ul>
<li>结构性元素<ol>
<li><code>p</code> 表示段落. 只能包含内联元素, 不能包含块级元素;</li>
<li><code>li</code> 本身无特殊含义, 可用于布局. 几乎可以包含任何元素;</li>
<li><code>br</code> 表示换行符;</li>
<li><code>hr</code> 表示水平分割线;</li>
<li><code>h1-h6</code> 表示标题. 其中 h1 用于表示当前页面最重要的内容的标题;</li>
<li><code>blockquote</code> 表示引用, 可以包含多个段落. 请勿纯粹为了缩进而使用blockquote, 大部分浏览器默认将 blockquote 渲染为带有左右缩进;</li>
<li><code>pre</code> 表示一段格式化好的文本；</li>
</ol>
</li>
</ul>
<ul>
<li>头部元素<ol>
<li><code>title</code> 每个页面必须有且仅有一个 title 元素;</li>
<li><code>base</code> 可用场景：首页、频道等大部分链接都为新窗口打开的页面;</li>
<li><code>link</code>用于引入 css 资源时, 可省去 media(默认为all) 和 type(默认为text/css) 属性;</li>
<li><code>style</code> type 默认为 text/css, 可以省去;</li>
<li><code>script</code> type 属性可以省去; 不赞成使用lang属性; 不要使用古老的&lt;!– //–&gt;这种hack脚本, 它用于阻止第一代浏览器(Netscape 1和Mosaic)将脚本显示成文字;</li>
<li><code>noscript</code> 在用户代理不支持 JavaScript 的情况下提供说明；</li>
</ol>
</li>
</ul>
<ul>
<li>文本元素<ol>
<li><code>a</code> 存在 href 属性时表示链接, 无 href 属性但有 name 属性表示锚点;</li>
<li><code>em,strong em</code> 表示句意强调, 加与不加会引起语义变化, 可用于表示不同的心情或语调; strong 表示重要性强调, 可用于局部或全局, strong强调的是重要性, 不会改变句意;</li>
<li><code>abbr</code> 表示缩写;</li>
<li><code>sub,sup</code> 主要用于数学和化学公式, sup还可用于脚注;</li>
<li><code>span</code> 本身无特殊含义;</li>
<li><code>ins,del</code> 分别表示从文档中增加(插入)和删除；</li>
</ol>
</li>
</ul>
<ul>
<li>媒体元素<ol>
<li><code>img</code> 请勿将img元素作为定位布局的工具, 不要用他显示空白图片; 必要时给img元素增加alt属性;</li>
<li><code>object</code> 可以用来插入Flash;</li>
</ol>
</li>
</ul>
<ul>
<li>列表元素<ol>
<li><code>dl</code> 表示关联列表, <code>dd</code>是对<code>dt</code>的解释; <code>dt</code>和dd的对应关系比较随意：一个<code>dt</code>对应多个<code>dd</code>、多个<code>dt</code>对应一个<code>dd</code>、多个<code>dt</code>对应多个<code>dd</code>, 都合法; 可用于名词/单词解释、日程列表、站点目录;</li>
<li><code>ul</code> 表示无序列表;</li>
<li><code>ol</code> 表示有序列表, 可用于排行榜等;</li>
<li><code>li</code> 表示列表项, 必须是<code>ul/ol</code>的子元素;</li>
</ol>
</li>
</ul>
<ul>
<li>表单元素<ol>
<li>推荐使用 <code>button</code> 代替 <code>input</code>, 但必须声明 <code>type</code>;</li>
<li>推荐使用 <code>fieldset</code>, <code>legend</code> 组织表单；</li>
<li>表单元素的 <code>name</code> 不能设定为 <code>action</code>, <code>enctype</code>, <code>method</code>, <code>novalidate</code>, <code>target</code>, <code>submit</code> 会导致表单提交混乱；</li>
</ol>
</li>
</ul>
<h3 id="id-和-class-命名约定"><a href="#id-和-class-命名约定" class="headerlink" title="id 和 class 命名约定"></a>id 和 class 命名约定</h3><ul>
<li>建议少用id，必须保证id唯一性<br>id 和 class 的命名总规则为： 内容优先, 位置次之, 表现为辅. 首先根据内容来命名, 比如 main-nav，其次是位置，比如 top-nav, left-nav ，最后再结合表现来定, 比如 skin-blue, present-tab, col-main</li>
<li>id 和 class 名称一律小写, 多个单词用连字符连接, 比如 recommend-presents</li>
<li>id 和 class 名称中只能出现小写的 <code>26</code> 个英文字母、数字和连字符(-), 任何其它字符都严禁出现</li>
<li>id 和 class 尽量用英文单词命名</li>
<li>在不影响语义的情况下, id 和 class 名称中可以适当采用英文单词缩写, 比如 <code>col</code>, <code>nav</code>, <code>hd</code>, <code>bd</code>, <code>ft</code> 等, 但切忌自造缩写</li>
<li>id 和 class 名称中的第一个词必须是单词全拼或语义非常清晰的单词缩写, 比如 <code>present</code>, <code>col</code></li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>使用2个空格缩进</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>每个属性声明末尾都要加分号</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>以下几种情况不需要空格：</p>
<ul>
<li>属性名后</li>
<li>多个规则的分隔符’,’前</li>
<li><code>!important</code> ‘!’后</li>
<li>属性值中’(‘后和’)’前</li>
<li>行末不要有多余的空格</li>
</ul>
<p>以下几种情况需要空格：</p>
<ul>
<li>属性值前</li>
<li>选择器<code>&gt;</code>, <code>+</code>, <code>~</code>前后</li>
<li><code>&#123;</code>前</li>
<li><code>!important</code> ‘!’前</li>
<li>属性值中的<code>,</code>后</li>
<li>注释<code>/*</code>后和<code>*/</code>前</li>
<li>属性冒号后</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">color</span> :red! important;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> ,</span><br><span class="line"><span class="selector-class">.dialog</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span>,</span><br><span class="line"><span class="selector-class">.dialog</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span>&gt;<span class="selector-class">.dialog</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &gt; <span class="selector-class">.dialog</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>以下几种情况不需要换行：</p>
<ul>
<li><code>&#123;</code>前</li>
</ul>
<p>以下几种情况需要换行：</p>
<ul>
<li><code>&#123;</code>后和<code>&#125;</code>前</li>
<li>每个属性独占一行</li>
<li>多个规则的分隔符<code>,</code>后</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span></span><br><span class="line">&#123;<span class="attribute">color</span>: red; <span class="attribute">background-color</span>: black;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span>, <span class="selector-class">.dialog</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span>,</span><br><span class="line"><span class="selector-class">.dialog</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释统一用<code>/* */</code></p>
<p>缩进与下一行代码保持一致</p>
<p>可位于一个代码行的末尾，与代码间隔一个空格</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Modal header */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Modal header</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">  <span class="comment">/* 50px */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: red; <span class="comment">/* color red */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>最外层统一使用双引号；</p>
<p>url的内容要用引号；</p>
<p>属性选择器中的属性值需要引号。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span>:after &#123;</span><br><span class="line">  content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;logo.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[data-type=<span class="string">&quot;single&quot;</span>]</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul>
<li>类名使用小写字母，以中划线分隔</li>
<li>id采用驼峰式命名</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* class */</span></span><br><span class="line"><span class="selector-class">.element-content</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* id */</span></span><br><span class="line"><span class="selector-id">#myDialog</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性声明顺序"><a href="#属性声明顺序" class="headerlink" title="属性声明顺序"></a>属性声明顺序</h3><p>相关的属性声明按照顺序做分组处理，组之间需要有一个空行，这个可选</p>
<p>由外向里写属性，先是外壳怎么属性，<code>display</code>，<code>float</code>，接着是定位相关的属性，<code>position</code>等，然后是开始描外边距<code>margin</code>，边框粗细、颜色<code>border</code>，然后是内边距，哦，当然，可能有时候还来个圆角，框子描完了就开始描高度宽度<code>width</code>, <code>height</code>，接着是里面的内容，字体怎么显示（字体颜色，居中还是居左等等），然后是背景图啊之类的，最后是一些杂项，透明度，鼠标，动画等</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.declaration-order</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">&quot;Helvetica Neue&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 下面是推荐的属性的顺序</span><br><span class="line">[</span><br><span class="line">  [</span><br><span class="line">    &quot;<span class="attribute">display</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">visibility</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">float</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">clear</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">overflow</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">overflow-x</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">overflow-y</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">clip</span>&quot;,</span><br><span class="line">    &quot;zoom&quot;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &quot;<span class="attribute">table-layout</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">empty-cells</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">caption-side</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-spacing</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-collapse</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">list-style</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">list-style-position</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">list-style-type</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">list-style-image</span>&quot;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &quot;-webkit-box-orient&quot;,</span><br><span class="line">    &quot;-webkit-box-<span class="attribute">direction</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">box-decoration-break</span>&quot;,</span><br><span class="line">    &quot;-webkit-box-pack&quot;,</span><br><span class="line">    &quot;-webkit-box-align&quot;,</span><br><span class="line">    &quot;-webkit-box-<span class="attribute">flex</span>&quot;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &quot;<span class="attribute">position</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">top</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">right</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">bottom</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">left</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">z-index</span>&quot;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &quot;<span class="attribute">margin</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">margin-top</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">margin-right</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">margin-bottom</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">margin-left</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">box-sizing</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">box-sizing</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">box-sizing</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-width</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-style</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-color</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-top</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-top-width</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-top-style</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-top-color</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-right</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-right-width</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-right-style</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-right-color</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-bottom</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-bottom-width</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-bottom-style</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-bottom-color</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-left</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-left-width</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-left-style</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-left-color</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-radius</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-radius</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-radius</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-top-left-radius</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-radius</span>-topleft&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-top-left-radius</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-top-right-radius</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-radius</span>-topright&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-top-right-radius</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-bottom-right-radius</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-radius</span>-bottomright&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-bottom-right-radius</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-bottom-left-radius</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-radius</span>-bottomleft&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-bottom-left-radius</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-image</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-image</span>&quot;,</span><br><span class="line">    &quot;-o-<span class="attribute">border-image</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-image</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-image-source</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-image-source</span>&quot;,</span><br><span class="line">    &quot;-o-<span class="attribute">border-image-source</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-image-source</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-image-slice</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-image-slice</span>&quot;,</span><br><span class="line">    &quot;-o-<span class="attribute">border-image-slice</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-image-slice</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-image-width</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-image-width</span>&quot;,</span><br><span class="line">    &quot;-o-<span class="attribute">border-image-width</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-image-width</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-image-outset</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-image-outset</span>&quot;,</span><br><span class="line">    &quot;-o-<span class="attribute">border-image-outset</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-image-outset</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">border-image-repeat</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">border-image-repeat</span>&quot;,</span><br><span class="line">    &quot;-o-<span class="attribute">border-image-repeat</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">border-image-repeat</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">padding</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">padding-top</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">padding-right</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">padding-bottom</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">padding-left</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">width</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">min-width</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">max-width</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">height</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">min-height</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">max-height</span>&quot;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &quot;<span class="attribute">font</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">font-family</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">font-size</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">font-weight</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">font-style</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">font-variant</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">font-size-adjust</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">font-stretch</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">font</span>-effect&quot;,</span><br><span class="line">    &quot;<span class="attribute">font</span>-emphasize&quot;,</span><br><span class="line">    &quot;<span class="attribute">font</span>-emphasize-<span class="attribute">position</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">font</span>-emphasize-style&quot;,</span><br><span class="line">    &quot;<span class="attribute">font</span>-smooth&quot;,</span><br><span class="line">    &quot;<span class="attribute">line-height</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">text-align</span>&quot;,</span><br><span class="line">    &quot;-webkit-<span class="attribute">text-align-last</span>&quot;,</span><br><span class="line">    &quot;-moz-<span class="attribute">text-align-last</span>&quot;,</span><br><span class="line">    &quot;-ms-<span class="attribute">text-align-last</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">text-align-last</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">vertical-align</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">white-space</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">text-decoration</span>&quot;,</span><br><span class="line">    &quot;text-emphasis&quot;,</span><br><span class="line">    &quot;text-emphasis-<span class="attribute">color</span>&quot;,</span><br><span class="line">    &quot;text-emphasis-style&quot;,</span><br><span class="line">    &quot;text-emphasis-<span class="attribute">position</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">text-indent</span>&quot;,</span><br><span class="line">    &quot;-ms-text-justify&quot;,</span><br><span class="line">    &quot;text-justify&quot;,</span><br><span class="line">    &quot;<span class="attribute">letter-spacing</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">word-spacing</span>&quot;,</span><br><span class="line">    &quot;-ms-writing-mode&quot;,</span><br><span class="line">    &quot;text-<span class="attribute">outline</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">text-transform</span>&quot;,</span><br><span class="line">    &quot;text-wrap&quot;,</span><br><span class="line">    &quot;-ms-<span class="attribute">text-overflow</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">text-overflow</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">text-overflow</span>-ellipsis&quot;,</span><br><span class="line">    &quot;<span class="attribute">text-overflow</span>-mode&quot;,</span><br><span class="line">    &quot;-ms-<span class="attribute">word-wrap</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">word-wrap</span>&quot;,</span><br><span class="line">    &quot;-ms-<span class="attribute">word-break</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">word-break</span>&quot;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &quot;<span class="attribute">color</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">background</span>&quot;,</span><br><span class="line">    &quot;<span class="attribute">filter</span>:progid:DXImageTransform.Microsoft.AlphaImageLoader<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>background-color<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>background-image<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>background-repeat<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>background-attachment<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>background-position<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-background-position-x<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>background-position-x<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-background-position-y<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>background-position-y<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-background-clip<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-background-clip<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>background-clip<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>background-origin<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-background-size<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-background-size<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-background-size<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>background-size<span class="string">&quot;</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  [</span></span><br><span class="line"><span class="string">    &quot;</span>outline<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>outline-width<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>outline-style<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>outline-color<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>outline-offset<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>opacity<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>filter:progid:DXImageTransform.Microsoft.<span class="built_in">Alpha</span>(Opacity<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-filter:\\<span class="string">&#x27;progid:DXImageTransform.Microsoft.Alpha&quot;,</span></span><br><span class="line"><span class="string">    &quot;-ms-interpolation-mode&quot;,</span></span><br><span class="line"><span class="string">    &quot;-webkit-box-shadow&quot;,</span></span><br><span class="line"><span class="string">    &quot;-moz-box-shadow&quot;,</span></span><br><span class="line"><span class="string">    &quot;box-shadow&quot;,</span></span><br><span class="line"><span class="string">    &quot;filter:progid:DXImageTransform.Microsoft.gradient&quot;,</span></span><br><span class="line"><span class="string">    &quot;-ms-filter:\\&#x27;</span>progid:DXImageTransform.Microsoft.gradient<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>text-shadow<span class="string">&quot;</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  [</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-transition<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-transition<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-transition<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-transition<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>transition<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-transition-delay<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-transition-delay<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-transition-delay<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-transition-delay<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>transition-delay<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-transition-timing-function<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-transition-timing-function<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-transition-timing-function<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-transition-timing-function<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>transition-timing-function<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-transition-duration<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-transition-duration<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-transition-duration<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-transition-duration<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>transition-duration<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-transition-property<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-transition-property<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-transition-property<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-transition-property<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>transition-property<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-transform<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-transform<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-transform<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-transform<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>transform<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-transform-origin<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-transform-origin<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-transform-origin<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-transform-origin<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>transform-origin<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-animation<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-animation<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-animation<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-animation<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>animation<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-animation-name<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-animation-name<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-animation-name<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-animation-name<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>animation-name<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-animation-duration<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-animation-duration<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-animation-duration<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-animation-duration<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>animation-duration<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-animation-play-state<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-animation-play-state<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-animation-play-state<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-animation-play-state<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>animation-play-state<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-animation-timing-function<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-animation-timing-function<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-animation-timing-function<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-animation-timing-function<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>animation-timing-function<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-animation-delay<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-animation-delay<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-animation-delay<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-animation-delay<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>animation-delay<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-animation-iteration-count<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-animation-iteration-count<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-animation-iteration-count<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-animation-iteration-count<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>animation-iteration-count<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-webkit-animation-direction<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-moz-animation-direction<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-ms-animation-direction<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>-o-animation-direction<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>animation-direction<span class="string">&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure>

<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>颜色16进制用小写字母；</p>
<p>颜色16进制尽量用简写。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ABCDEF</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#001122</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#abcdef</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#012</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h3><p>属性简写需要你非常清楚属性值的正确顺序，而且在大多数情况下并不需要设置属性简写中包含的所有值，所以建议尽量分开声明会更加清晰；</p>
<p><code>margin</code> 和 <code>padding</code> 相反，需要使用简写；</p>
<p>常见的属性简写包括：</p>
<ul>
<li>font</li>
<li>background</li>
<li>transition</li>
<li>animation</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">1s</span> linear <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition-property</span>: opacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>尽量将媒体查询的规则靠近与他们相关的规则，不要将他们一起放到一个独立的样式文件中，或者丢在文档的最底部，这样做只会让大家以后更容易忘记他们</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element-avatar</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.element</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.element-avatar</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>不允许有空的规则；</p>
<p>元素选择器用小写字母；</p>
<p>去掉小数点前面的0；</p>
<p>去掉数字中不必要的小数点和末尾的0；</p>
<p>属性值<code>0</code>后面不要加单位；</p>
<p>同个属性不同前缀的写法需要在垂直方向保持对齐，具体参照右边的写法；</p>
<p>无前缀的标准属性应该写在有前缀的属性后面；</p>
<p>不要在同个规则里出现重复的属性，如果重复的属性是连续的则没关系；</p>
<p>不要在一个文件里出现两个相同的规则；</p>
<p>用 <code>border: 0</code>; 代替 <code>border: none;</code>；</p>
<p>选择器不要超过4层（在scss中如果超过4层应该考虑用嵌套的方式来写）；</p>
<p>发布的代码中不要有 <code>@import</code>；</p>
<p>尽量少用’*’选择器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-tag">LI</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50.0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">     -moz-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">background</span>:    <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">background</span>:         <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下安装配置drupalconsole</title>
    <url>/2016/10/24/windows%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEdrupalconsole/</url>
    <content><![CDATA[<h3 id="drupalconsole是啥"><a href="#drupalconsole是啥" class="headerlink" title="drupalconsole是啥"></a>drupalconsole是啥</h3><blockquote>
<p>The new CLI for Drupal. A tool to generate boilerplate code, interact with and debug Drupal.</p>
</blockquote>
<p>以上是官网的简介，总而言之是为drupal8而生的一个命令行工具</p>
<p><a href="https://drupalconsole.com/">这里是官网</a></p>
<h3 id="drupalconsole在windows下的安装"><a href="#drupalconsole在windows下的安装" class="headerlink" title="drupalconsole在windows下的安装"></a>drupalconsole在windows下的安装</h3><p>本篇仅介绍在windows下的安装配置，linux请参见官网</p>
<p>1、下载<code>drupalconsole</code></p>
<p><a href="https://drupalconsole.com/installer">点击这里</a>下载<code>drupalconsole</code>，更名<code>drupal</code></p>
<p>2、找个目录给他安顿</p>
<p>例如：<code>D:\system\drupalconsole</code>，如下图所示：</p>
<p><img src="https://static.verycloud.cn/sites/default/files/images/drupalconsole_home.png" alt="drupalconsole家目录"></p>
<p>3、配置环境变量</p>
<p>把<code>php.exe</code>所在的目录加入环境变量<code>PATH</code>中</p>
<p>再把上一步<code>drupalconsole</code>的安顿目录加入<code>windows</code>的环境变量<code>PATH</code>中，用户或者系统的都可以</p>
<p>如下图：</p>
<p><img src="https://static.verycloud.cn/sites/default/files/images/system_path.png" alt="drupalconsole家目录"></p>
<p>4、打开<code>git</code>的命令行工具测试一下</p>
<p><img src="https://static.verycloud.cn/sites/default/files/images/drupalconsole.png" alt="drupalconsole测试"></p>
<blockquote>
<p>再插一句，貌似windows不认识非exe的可执行程序，需要安装个git的命令行工具</p>
</blockquote>
]]></content>
      <categories>
        <category>drupal</category>
      </categories>
      <tags>
        <tag>drupalconsole</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>yum Errno 14 解决方法</title>
    <url>/2015/03/26/yum-errno-14-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>今天在安装supervisor的时候，报如下错误</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@admin yum.repos.d]<span class="comment"># yum repolist</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Determining fastest mirrors  </span><br><span class="line">http:<span class="comment">//balabala/repodata/repomd.xml: [Errno 14] problem making ssl connection</span></span><br><span class="line">Trying other mirror.</span><br><span class="line">http:<span class="comment">//balabala/repodata/repomd.xml: [Errno 14] problem making ssl connection</span></span><br><span class="line">Trying other mirror.</span><br></pre></td></tr></table></figure>

<p>排查应该是ssl证书问题有关，网上查了资料发现需要安装 ca-certificates 才行。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">yum install ca-certificates -y</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>一些源：epel,RPMForge,Remi源</title>
    <url>/2015/02/03/%E4%B8%80%E4%BA%9B%E6%BA%90%EF%BC%9Aepel,rpmforge,remi%E6%BA%90/</url>
    <content><![CDATA[<p>为了保证官方源的顺序要高于第三方源的顺序:<br>yum install yum-priorities</p>
<p>加载epel源<br>CentOS and Red Hat Enterprise Linux 6.x</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm </span><br></pre></td></tr></table></figure>

<p>CentOS and Red Hat Enterprise Linux 7.x</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>加载RPMForge源<br>rpm -Uvh <a href="http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm">http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm</a></p>
<p>加载Remi源<br>CentOS and Red Hat Enterprise Linux 6.x</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</span><br></pre></td></tr></table></figure>

<p>CentOS and Red Hat Enterprise Linux 7.x</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br></pre></td></tr></table></figure>

<p>由于CentOS官方说RPMFusion源里面的软件稳定性不如rpmforge，可以不加RPMFusion源.</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>一行代码解决各种IE兼容问题</title>
    <url>/2014/05/05/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E5%90%84%E7%A7%8Die%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>查看baidu.com的源代码，发现有一行</p>
<meta content="IE=Edge" http-equiv="X-UA-Compatible">

<p>Edge 模式通知IE以最高级别的可用模式显示内容。即如果你有IE9的话说明你有IE789，那么就调用高版本的那个也就是IE9。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>ie</tag>
      </tags>
  </entry>
  <entry>
    <title>从简单的列表页浅谈Vue组件</title>
    <url>/2015/11/12/%E4%BB%8E%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%97%E8%A1%A8%E9%A1%B5%E6%B5%85%E8%B0%88Vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>##组件</p>
<p>什么是组件？</p>
<p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 js 特性扩展。</p>
<p>##例子</p>
<p><img src="screen.png"></p>
<p>举个小例子：豆瓣电影排行榜</p>
<p>此例子包含文章列表，分页，这里把列表和分页分别当作单独的组件，加上父页面组件一共是3个</p>
<p>父组件：<code>app.vue</code></p>
<p>子组件：<code>list.vue</code> <code>pagination.vue</code></p>
<p>接口用的是豆瓣的jsonp，<code>https://api.douban.com/v2/movie/top250</code></p>
<p>首先在main.js引入父组件，引入less，引入VueResource，实例化vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">&#x27;./example1/app.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./example1/style.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line">Vue.use(VueResource)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(app)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从分页开始，在src/example1/components文件夹下建立一个pagination.vue文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pagination.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过props从父组件接收数据。组件可以为props指定验证要求。如果未指定验证要求，Vue会发出警告，如果不需要验证，可以用数组形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pagination.vue</span></span><br><span class="line"></span><br><span class="line">props: &#123;</span><br><span class="line">    <span class="comment">//当前页码</span></span><br><span class="line">    now: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//总页数</span></span><br><span class="line">    all: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">1</span>,</span><br><span class="line">      required: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>父组件app.vue引入组件，并且把数据传给子组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.vue--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--代码片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pagination</span> <span class="attr">:now</span>=<span class="string">&quot;page.now&quot;</span> <span class="attr">:all</span>=<span class="string">&quot;page.all&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pagination</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--代码片段--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> pagination <span class="keyword">from</span> <span class="string">&#x27;./components/pagination.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">    	page: &#123;</span><br><span class="line">    		now: 1,</span><br><span class="line">    		all: 10</span><br><span class="line">    	&#125;</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    pagination</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据传入的数据计算分页数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pagination.vue</span></span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">    pages () &#123;</span><br><span class="line">      <span class="keyword">var</span> pages = [];</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.now &gt; <span class="number">1</span>) pages.push(&#123;</span><br><span class="line">        text: <span class="string">&#x27;上一页&#x27;</span>,</span><br><span class="line">        num: <span class="built_in">this</span>.now - <span class="number">1</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.now - <span class="number">1</span> &gt; <span class="number">2</span>) pages.push(&#123;</span><br><span class="line">        text: <span class="number">1</span>,</span><br><span class="line">        num: <span class="number">1</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.now - <span class="number">1</span> &gt; <span class="number">3</span>) pages.push(&#123;</span><br><span class="line">        text: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">        num: <span class="number">0</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">this</span>.all; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.now - i &lt; <span class="number">3</span> &amp;&amp; <span class="built_in">this</span>.now &gt;= i || i - <span class="built_in">this</span>.now &lt; <span class="number">3</span> &amp;&amp; <span class="built_in">this</span>.now &lt;= i)&#123;</span><br><span class="line">          pages.push(&#123;</span><br><span class="line">            text: i,</span><br><span class="line">            num: i</span><br><span class="line">          &#125;);          </span><br><span class="line">        &#125;        </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.all - <span class="built_in">this</span>.now &gt; <span class="number">3</span>) pages.push(&#123;</span><br><span class="line">        text: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">        num: <span class="number">0</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.all - <span class="built_in">this</span>.now &gt; <span class="number">2</span>) pages.push(&#123;</span><br><span class="line">        text: <span class="built_in">this</span>.all,</span><br><span class="line">        num: <span class="built_in">this</span>.all</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.now &lt; <span class="built_in">this</span>.all) pages.push(&#123;</span><br><span class="line">        text: <span class="string">&#x27;下一页&#x27;</span>,</span><br><span class="line">        num: <span class="built_in">this</span>.now + <span class="number">1</span></span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>用v-for把分页渲染出来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pagination.vue--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;page in pages&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;active&#x27; : page.num == now &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">&quot;page.num&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toPage(page.num)&quot;</span>&gt;</span>&#123;&#123; page.text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; page.text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子组件通过自定义事件向父组件传事件和数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pagination.vue</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    toPage (page) &#123;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;toPage&#x27;</span>, page);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>父组件监听这个事件，然后调用方法changePage</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.vue--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pagination</span> <span class="attr">:now</span>=<span class="string">&quot;page.now&quot;</span> <span class="attr">:all</span>=<span class="string">&quot;page.all&quot;</span> @<span class="attr">toPage</span>=<span class="string">&quot;changePage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pagination</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//代码片段</span></span></span><br><span class="line">methods: &#123;</span><br><span class="line">    changePage (page) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.page.now = page</span></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">//代码片段</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>至此完成了父组件把数据丢给子组件处理，子组件把操作反馈给父组件这一过程</p>
<p>列表组件list.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--list.vue--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list clearfix row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.images.small&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;year&quot;</span> <span class="attr">:year</span>=<span class="string">&quot;item.year&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;year&quot;</span>&gt;</span>&#123;&#123; item.year &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dis&quot;</span>&gt;</span>&#123;&#123; item.original_title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  props: [<span class="string">&#x27;items&#x27;</span>]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>来点动态的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.vue--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span> <span class="attr">:items</span>=<span class="string">&quot;items&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>豆瓣电影排行榜<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;year&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;year red&quot;</span>&gt;</span>&#123;&#123; props.year &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pagination</span> <span class="attr">:now</span>=<span class="string">&quot;page.now&quot;</span> <span class="attr">:all</span>=<span class="string">&quot;page.all&quot;</span> @<span class="attr">toPage</span>=<span class="string">&quot;changePage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pagination</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> list <span class="keyword">from</span> <span class="string">&#x27;./components/list.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> pagination <span class="keyword">from</span> <span class="string">&#x27;./components/pagination.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      loading: 0,</span><br><span class="line">      params: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//每页显示条数</span></span></span><br><span class="line">        count: 10,</span><br><span class="line"><span class="javascript">        <span class="comment">//从第几条开始显示，初始0</span></span></span><br><span class="line">        start: 0,</span><br><span class="line"><span class="javascript">        <span class="comment">//总条数</span></span></span><br><span class="line">        total: 250</span><br><span class="line">      &#125;,      </span><br><span class="line">      items: []      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getItems () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.loading = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$http.jsonp(<span class="string">&#x27;https://api.douban.com/v2/movie/top250&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        params: <span class="built_in">this</span>.params</span></span><br><span class="line"><span class="javascript">      &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line">        if(response.ok) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.items = response.data.subjects;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.params = &#123;</span></span><br><span class="line">            count: response.data.count,</span><br><span class="line">            start: response.data.start,</span><br><span class="line">            total: response.data.total</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      &#125;, <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(response);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      &#125;).finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.loading = <span class="number">0</span>;</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    changePage (page) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.params.start = (page - <span class="number">1</span>) * <span class="built_in">this</span>.params.count;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getItems();</span></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    list,</span><br><span class="line">    pagination</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    page () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        now: <span class="built_in">this</span>.params.start / <span class="built_in">this</span>.params.count + <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">        all: <span class="built_in">Math</span>.ceil(<span class="built_in">this</span>.params.total / <span class="built_in">this</span>.params.count)</span></span><br><span class="line">      &#125;      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.getItems();</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>##几个点：</p>
<p>###prop传递数据</p>
<blockquote>
<p>组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。</p>
</blockquote>
<blockquote>
<p>类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件：</p>
</blockquote>
<p>###自定义事件</p>
<blockquote>
<p>父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件</p>
</blockquote>
<p>###slot分发内容</p>
<blockquote>
<p>组件不知道它的挂载点会有什么内容。挂载点的内容是<del>由父组件决</del>定的;组件很可能有它自己的模版</p>
</blockquote>
<blockquote>
<p>为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 内容分发 (或 “transclusion” 如果你熟悉 Angular)。Vue.js 实现了一个内容分发 API ，参照了当前 Web 组件规范草案，使用特殊的 <code>&lt;slot&gt;</code> 元素作为原始内容的插槽。</p>
</blockquote>
<p><code>通过slot插槽将标题插入到子组件</code></p>
<p>###作用域插槽</p>
<blockquote>
<p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译</p>
</blockquote>
<blockquote>
<p>作用域插槽是一种特殊类型的插槽，用作使用一个（能够传递数据到）可重用模板替换已渲染元素。<br>在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样</p>
</blockquote>
<p><code>通过作用域插槽将子组件数据传给父组件，再作为自定义模板重新插入到子组件</code></p>
<p>###计算<br><code>豆瓣接口接收参数和设计的不同，pages需要通过computed计算</code></p>
<p>###分页的算法</p>
<p>##引申问题：<br>watch params变化</p>
<p>loading广播</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用gdb调试php-fpm</title>
    <url>/2015/11/27/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95php-fpm/</url>
    <content><![CDATA[<p>有很多php开发人员经常问我，如果执行php代码的时候出现严重错误的时候，如何快速定位问题。我一般推荐他们用gdb去调试。</p>
<p>下面用php-fpm的一个段错误来举例说明，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING: [pool www] child 15109 exited on signal 11 (SIGSEGV) after 654.485221 seconds from start</span><br></pre></td></tr></table></figure>

<p>###1、安装gdb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gdb php-dbg</span><br></pre></td></tr></table></figure>

<p>有的时候可能需要安装debuginfo相关的库，如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debuginfo-install php-fpm</span><br></pre></td></tr></table></figure>

<p>###2、设置coredump</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/tmp/core-%e.%p&#x27;</span> &gt; /proc/sys/kernel/core_pattern</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/core_uses_pid</span><br><span class="line"><span class="built_in">ulimit</span> -c unlimited</span><br></pre></td></tr></table></figure>

<p>当然,coredump的文件格式可以设置为其他的，这里是详细的设置项说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%  a single % character</span><br><span class="line">%c  core file size soft resource <span class="built_in">limit</span> of crashing process (since</span><br><span class="line">    Linux 2.6.24)</span><br><span class="line">%d  dump mode—same as value returned by prctl(2) PR_GET_DUMPABLE</span><br><span class="line">    (since Linux 3.7)</span><br><span class="line">%e  executable filename (without path prefix)</span><br><span class="line">%E  pathname of executable, with slashes (<span class="string">&#x27;/&#x27;</span>) replaced by</span><br><span class="line">    exclamation marks (<span class="string">&#x27;!&#x27;</span>) (since Linux 3.0).</span><br><span class="line">%g  (numeric) real GID of dumped process</span><br><span class="line">%h  hostname (same as nodename returned by uname(2))</span><br><span class="line">%p  PID of dumped process, as seen <span class="keyword">in</span> the PID namespace <span class="keyword">in</span> <span class="built_in">which</span></span><br><span class="line">    the process resides</span><br><span class="line">%P  PID of dumped process, as seen <span class="keyword">in</span> the initial PID namespace</span><br><span class="line">    (since Linux 3.12)</span><br><span class="line">%s  number of signal causing dump</span><br><span class="line">%t  time of dump, expressed as seconds since the Epoch,</span><br><span class="line">    1970-01-01 00:00:00 +0000 (UTC)</span><br><span class="line">%u  (numeric) real UID of dumped process</span><br></pre></td></tr></table></figure>

<p>###3、设置php-fpm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure>

<p>找到关键字 rlimit_core，并修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rlimit_core = unlimited</span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/sbin/php-fpm --daemonize</span><br></pre></td></tr></table></figure>

<p>这时就会在/tmp下看到有coredump文件生成了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tmp]<span class="comment"># ls</span></span><br><span class="line">core-php-fpm.7279</span><br></pre></td></tr></table></figure>
<p>###4、追踪<br>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb /usr/sbin/php-fpm /tmp/core-php-fpm.7279</span><br></pre></td></tr></table></figure>

<p>执行bt命令就可以查看详细的错误日志了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  _zend_hash_init (ht=0x2b4d1a4f8100, nSize=174762, pDestructor=0, persistent=1 &#x27;\001&#x27;) at /usr/src/debug/php-7.0.0RC8/Zend/zend_hash.c:172</span></span><br><span class="line"><span class="comment">#1  0x00002b4d0d0e87ac in zend_accel_init_shm (extension=&lt;value optimized out&gt;) at /usr/src/debug/php-7.0.0RC8/ext/opcache/ZendAccelerator.c:2387</span></span><br><span class="line"><span class="comment">#2  accel_startup (extension=&lt;value optimized out&gt;) at /usr/src/debug/php-7.0.0RC8/ext/opcache/ZendAccelerator.c:2640</span></span><br><span class="line"><span class="comment">#3  0x00000000005e8d21 in zend_extension_startup (extension=0x168c810) at /usr/src/debug/php-7.0.0RC8/Zend/zend_extensions.c:176</span></span><br><span class="line"><span class="comment">#4  0x00000000005d2293 in zend_llist_apply_with_del (l=0x9dd420, func=0x5e8d10 &lt;zend_extension_startup&gt;) at /usr/src/debug/php-7.0.0RC8/Zend/zend_llist.c:171</span></span><br><span class="line"><span class="comment">#5  0x00000000005e8d07 in zend_startup_extensions () at /usr/src/debug/php-7.0.0RC8/Zend/zend_extensions.c:197</span></span><br><span class="line"><span class="comment">#6  0x0000000000580985 in php_module_startup (sf=&lt;value optimized out&gt;, additional_modules=&lt;value optimized out&gt;, num_additional_modules=&lt;value optimized out&gt;) at /usr/src/debug/php-7.0.0RC8/main/main.c:2197</span></span><br><span class="line"><span class="comment">#7  0x000000000067aec5 in php_cgi_startup (sapi_module=&lt;value optimized out&gt;) at /usr/src/debug/php-7.0.0RC8/sapi/fpm/fpm/fpm_main.c:837</span></span><br><span class="line"><span class="comment">#8  0x000000000067bcfe in main (argc=2, argv=0x7fff1a037498) at /usr/src/debug/php-7.0.0RC8/sapi/fpm/fpm/fpm_main.c:1788</span></span><br></pre></td></tr></table></figure>
<p>至此，整个追踪过程结束。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>写个脚本压缩JS,CSS</title>
    <url>/2015/05/07/%E5%86%99%E4%B8%AA%E8%84%9A%E6%9C%AC%E5%8E%8B%E7%BC%A9JS-CSS/</url>
    <content><![CDATA[<p>1、下载最新版的yuicompressor.jar</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/yui/yuicompressor/releases</span></span><br></pre></td></tr></table></figure>

<p>2、遍历目录，压缩JS、CSS</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i in `find path -name <span class="string">&quot;*.css&quot;</span>`;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;compress <span class="subst">$i</span>&quot;</span></span><br><span class="line">    java -jar yuicompressor-<span class="number">2.4</span>.<span class="number">8</span>.jar --charset=utf8 -o <span class="variable">$i</span> <span class="variable">$i</span> --nomunge</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>yuicompressor</tag>
      </tags>
  </entry>
  <entry>
    <title>使用safari对webview进行调试</title>
    <url>/2016/12/06/%E4%BD%BF%E7%94%A8safari%E5%AF%B9webview%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>在web开发的过程中，抓包、调试页面样式、查看请求头是很常用的技巧。其实在iOS开发中，这些技巧也能用（无论是模拟器还是真机），不过我们需要用到mac自带的浏览器Safari。所以，本文将讲解如何使用Safari对iOS程序中的webview进行调试。</p>
<p>环境信息：<br>Mac OS X 10.10.1<br>Xcode 6.1.1<br>iOS 8.1</p>
<p>1、打开模拟器（真机）的开发者模式</p>
<p>【设置】-&gt;【Safari】-&gt;【高级】-&gt;【Web检查器】打开</p>
<p><img src="https://static.verycloud.cn/sites/default/files/images/ios-user-safari-debug-webview-4.png" alt="打开iphone设备中的web检查器"><br>打开iphone设备中的web检查器</p>
<p>2、打开Mac上Safari的开发者模式</p>
<p>【Safari】-&gt;【偏好设置】-&gt;【高级】-&gt;【在菜单栏中显示“开发”菜单】勾选</p>
<p><img src="https://static.verycloud.cn/sites/default/files/images/ios-user-safari-debug-webview-2.png" alt="打开Safari中的开发者模式"><br>打开Safari中的开发者模式</p>
<p>3、写一个webview并加载一个网页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import &quot;ViewController.h&quot;</span></span><br><span class="line">@interfaceViewController ()</span><br><span class="line"></span><br><span class="line">@property (strong, nonatomic) UIWebView *webView;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line"> - (void)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [superviewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line">    </span><br><span class="line">    _webView = [[UIWebViewalloc] initWithFrame:self.view.bounds];</span><br><span class="line">    [_webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@<span class="string">&quot;http://www.baidu.com&quot;</span>]]];</span><br><span class="line">    [self.view addSubview:_webView];</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>4、在模拟器（真机）中打开webview应用，并打开Safari查看网络信息</p>
<p>【开发】-&gt;【iOS Simulator】-&gt;【正在调试的网站】</p>
<p>注意：必须要webview在加载网页时，打开Safari才可以看到调试模式。</p>
<p><img src="https://static.verycloud.cn/sites/default/files/images/ios-user-safari-debug-webview-6.png" alt="打开Safari中的调试"><br>打开Safari中的调试<br>在弹出的调试窗口中，可以看到当前正在加载网页的各种信息，包括源码、请求头、图片、加载的资源与脚本、控制台输出等。并且它和web前端的调试方式相同，你可以直接修改网页的CSS样式，对网页布局等进行修改，而不用重新运行整个App。</p>
<p>5、修改web样式</p>
<p>将光标选中到要修改的样式，进行修改后，可以直接在模拟器中看到修改后的效果。</p>
<p><img src="https://static.verycloud.cn/sites/default/files/images/ios-user-safari-debug-webview-3.png" alt="直接修改webview中的样式"></p>
<p>这样就可以直接修改webview中的样式。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>安装php7</title>
    <url>/2015/03/20/%E5%AE%89%E8%A3%85php7/</url>
    <content><![CDATA[<p>推荐用阿里云主机，访问国外飞速。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://git.php.net/repository/php-src.git</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y gcc gcc-c++  make zlib zlib-devel pcre pcre-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers curl-devel libXpm-devel libc-client-devel re2c bison bison-devel libmcrypt libmcrypt-devel libcurl libcurl-devel </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./buildconf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php7 --with-config-file-path=/usr/<span class="built_in">local</span>/php7/etc --with-mcrypt=/usr/include --with-mysql-sock=/var/lib/mysql/mysql.sock --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-gd --with-iconv --with-zlib --enable-xml --enable-mysqlnd --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --enable-mbregex --enable-fpm --enable-mbstring --enable-ftp --enable-gd-native-ttf --with-openssl --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --enable-session --with-curl --with-jpeg-dir --with-freetype-dir --enable-opcache --enable-debug</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>软连接 ln -s /usr/local/php7/bin/php /usr/bin/php</p>
</blockquote>
<blockquote>
<p>在安装目录下有两个php的配置项，php.ini-development和php.ini-production,一个是开发环境用的，一个线上环境用的，改名php.ini并移到/usr/local/php/etc目录。</p>
</blockquote>
<blockquote>
<p>php -v</p>
</blockquote>
<pre><code><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">PHP <span class="number">7.0</span>.<span class="number">0</span>-dev (cli) (built: Mar <span class="number">20</span> <span class="number">2015</span> <span class="number">20</span>:<span class="number">04</span>:<span class="number">04</span>) </span><br><span class="line">Copyright (c) <span class="number">1997</span>-<span class="number">2015</span> The PHP Group</span><br><span class="line">Zend Engine v3.<span class="number">0.0</span>-dev, Copyright (c) <span class="number">1998</span>-<span class="number">2015</span> Zend Technologies</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php7</tag>
      </tags>
  </entry>
  <entry>
    <title>并发与并行</title>
    <url>/2015/10/15/%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C/</url>
    <content><![CDATA[<p>并发(Concurrently)和并行(Parallel)是两个不同的概念。借用Go创始人Rob Pike的说法，并发不是并行，并发更好。</p>
<blockquote>
<p>并发是一共要处理(deal with)很多事情，并行是一次可以做(do)多少事情。</p>
</blockquote>
<p>举个简单的例子，华罗庚泡茶，必须有烧水、洗杯子、拿茶叶等步骤。现在我们想尽快做完这件事，也就是“一共要处理很多事情”，有很多方法可以实现并发，例如请多个人同时做，这就是并行。并行是实现并发的一种方式，但不是唯一的方式。我们一个人也可以实现并发，例如先烧水、然后不用等水烧开就去洗杯子，所以通过调整程序运行方式也可以实现并发。</p>
<p>大神讲解</p>
<p>如果还不理解，建议看Rob Pike题为Concurrency is not Parallelism的<a href="http://concur.rspace.googlecode.com/hg/talk/concur.html">演讲PPT</a>和<a href="http://blog.golang.org/concurrency-is-not-parallelism">演讲视频</a>。</p>
<p>我把演讲的PPT截图贴出来方便大家理解。</p>
<p><img src="https://static.verycloud.cn/sites/default/files/pic/image/20151015/20151015132329_33012.png"></p>
<p>总结</p>
<p>总结一下，并行是实现并发的一种方式，在多核CPU的时代，并行是我们设计高效程序所要考虑的，那么进程是不是越多越好呢？</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>进程</tag>
      </tags>
  </entry>
  <entry>
    <title>我的vim配色</title>
    <url>/2013/12/11/%E6%88%91%E7%9A%84vim%E9%85%8D%E8%89%B2/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot; Vim color file - blank</span></span><br><span class="line"><span class="string">&quot;</span> Generated by http:<span class="comment">//bytefluent.com/vivify 2013-09-24</span></span><br><span class="line">set background=dark</span><br><span class="line"><span class="keyword">if</span> version &gt; <span class="number">580</span></span><br><span class="line">	hi clear</span><br><span class="line">	<span class="keyword">if</span> exists(<span class="string">&quot;syntax_on&quot;</span>)</span><br><span class="line">		syntax reset</span><br><span class="line">	<span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">set t_Co=<span class="number">256</span></span><br><span class="line">let g:colors_name = <span class="string">&quot;blank&quot;</span></span><br><span class="line"></span><br><span class="line">hi IncSearch guifg=<span class="comment">#C4BE89 guibg=#000000 guisp=#000000 gui=NONE ctermfg=186 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi WildMenu guifg=<span class="comment">#66D9EF guibg=#000000 guisp=#000000 gui=NONE ctermfg=81 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi SignColumn guifg=<span class="comment">#A6E22E guibg=#232526 guisp=#232526 gui=NONE ctermfg=112 ctermbg=235 cterm=NONE</span></span><br><span class="line">hi SpecialComment guifg=<span class="comment">#465457 guibg=NONE guisp=NONE gui=bold ctermfg=240 ctermbg=NONE cterm=bold</span></span><br><span class="line">hi Typedef guifg=<span class="comment">#66D9EF guibg=NONE guisp=NONE gui=NONE ctermfg=81 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi Title guifg=<span class="comment">#ef5939 guibg=NONE guisp=NONE gui=NONE ctermfg=209 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi Folded guifg=<span class="comment">#00CD00 guibg=NONE  guisp=NONE gui=NONE ctermfg=240 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi PreCondit guifg=<span class="comment">#A6E22E guibg=NONE guisp=NONE gui=bold ctermfg=112 ctermbg=NONE cterm=bold</span></span><br><span class="line">hi <span class="keyword">Include</span> guifg=<span class="comment">#A6E22E guibg=NONE guisp=NONE gui=NONE ctermfg=112 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi <span class="keyword">Float</span> guifg=<span class="comment">#AE81FF guibg=NONE guisp=NONE gui=NONE ctermfg=141 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi StatusLineNC guifg=<span class="comment">#cccccc guibg=#1874CD guisp=#145b7d gui=NONE ctermfg=8 ctermbg=232 cterm=NONE</span></span><br><span class="line"><span class="string">&quot;hi CTagsMember -- no settings --</span></span><br><span class="line"><span class="string">hi NonText guifg=#BCBCBC guibg=#3B3A32 guisp=#3B3A32 gui=NONE ctermfg=250 ctermbg=237 cterm=NONE</span></span><br><span class="line"><span class="string">&quot;</span>hi CTagsGlobalConstant -- no settings --</span><br><span class="line">hi DiffText guifg=NONE guibg=<span class="comment">#4C4745 guisp=#4C4745 gui=bold,italic ctermfg=NONE ctermbg=239 cterm=bold</span></span><br><span class="line">hi ErrorMsg guifg=<span class="comment">#F92672 guibg=#232526 guisp=#232526 gui=bold ctermfg=197 ctermbg=235 cterm=bold</span></span><br><span class="line">hi Ignore guifg=<span class="comment">#808080 guibg=#272822 guisp=#272822 gui=NONE ctermfg=8 ctermbg=235 cterm=NONE</span></span><br><span class="line">hi Debug guifg=<span class="comment">#BCA3A3 guibg=NONE guisp=NONE gui=bold ctermfg=138 ctermbg=NONE cterm=bold</span></span><br><span class="line">hi PMenuSbar guifg=NONE guibg=<span class="comment">#080808 guisp=#080808 gui=NONE ctermfg=NONE ctermbg=232 cterm=NONE</span></span><br><span class="line">hi Identifier guifg=<span class="comment">#FD971F guibg=NONE guisp=NONE gui=NONE ctermfg=208 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi SpecialChar guifg=<span class="comment">#F92672 guibg=NONE guisp=NONE gui=bold ctermfg=197 ctermbg=NONE cterm=bold</span></span><br><span class="line">hi Conditional guifg=<span class="comment">#F92672 guibg=NONE guisp=NONE gui=bold ctermfg=197 ctermbg=NONE cterm=bold</span></span><br><span class="line">hi StorageClass guifg=<span class="comment">#FD971F guibg=NONE guisp=NONE gui=italic ctermfg=208 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi Todo guifg=<span class="comment">#FFFF00 guibg=#272822 guisp=#272822 gui=bold ctermfg=15 ctermbg=235 cterm=bold</span></span><br><span class="line">hi Special guifg=<span class="comment">#66D9EF guibg=#272822 guisp=#272822 gui=italic ctermfg=81 ctermbg=235 cterm=NONE</span></span><br><span class="line">hi LineNr guifg=<span class="comment">#BCBCBC guibg=#3B3A32 guisp=#3B3A32 gui=NONE ctermfg=250 ctermbg=237 cterm=NONE</span></span><br><span class="line">hi StatusLine guifg=<span class="comment">#455354 guibg=#F8F8F2 guisp=#F8F8F2 gui=NONE ctermfg=240 ctermbg=230 cterm=NONE</span></span><br><span class="line">hi Normal guifg=<span class="comment">#F8F8F2 guibg=#272822 guisp=#272822 gui=NONE ctermfg=230 ctermbg=235 cterm=NONE</span></span><br><span class="line">hi Label guifg=<span class="comment">#E6DB74 guibg=NONE guisp=NONE gui=NONE ctermfg=185 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">&quot;hi CTagsImport -- no settings --</span></span><br><span class="line"><span class="string">hi PMenuSel guifg=NONE guibg=#808080 guisp=#808080 gui=NONE ctermfg=NONE ctermbg=8 cterm=NONE</span></span><br><span class="line"><span class="string">hi Search guifg=#ffffff guibg=#fcaf17 guisp=#fcaf17 gui=NONE ctermfg=15 ctermbg=240 cterm=NONE</span></span><br><span class="line"><span class="string">&quot;</span>hi CTagsGlobalVariable -- no settings --</span><br><span class="line">hi Delimiter guifg=<span class="comment">#8F8F8F guibg=NONE guisp=NONE gui=NONE ctermfg=245 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi Statement guifg=<span class="comment">#F92672 guibg=NONE guisp=NONE gui=bold ctermfg=197 ctermbg=NONE cterm=bold</span></span><br><span class="line"><span class="string">&quot;hi SpellRare -- no settings --</span></span><br><span class="line"><span class="string">&quot;</span>hi EnumerationValue -- no settings --</span><br><span class="line">hi Comment guifg=<span class="comment">#b8a969 guibg=NONE guisp=NONE gui=NONE ctermfg=143 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi Character guifg=<span class="comment">#E6DB74 guibg=NONE guisp=NONE gui=NONE ctermfg=185 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">&quot;hi TabLineSel -- no settings --</span></span><br><span class="line"><span class="string">hi Number guifg=#AE81FF guibg=NONE guisp=NONE gui=NONE ctermfg=141 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi Boolean guifg=#AE81FF guibg=NONE guisp=NONE gui=NONE ctermfg=141 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi Operator guifg=#F92672 guibg=NONE guisp=NONE gui=NONE ctermfg=197 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi CursorLine guifg=NONE guibg=#3E3D32 guisp=#3E3D32 gui=NONE ctermfg=NONE ctermbg=237 cterm=NONE</span></span><br><span class="line"><span class="string">&quot;</span>hi Union -- no settings --</span><br><span class="line"><span class="string">&quot;hi TabLineFill -- no settings --</span></span><br><span class="line"><span class="string">hi Question guifg=#66D9EF guibg=NONE guisp=NONE gui=NONE ctermfg=81 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi WarningMsg guifg=#FFFFFF guibg=#333333 guisp=#333333 gui=bold ctermfg=15 ctermbg=236 cterm=bold</span></span><br><span class="line"><span class="string">hi VisualNOS guifg=NONE guibg=#403D3D guisp=#403D3D gui=NONE ctermfg=NONE ctermbg=238 cterm=NONE</span></span><br><span class="line"><span class="string">hi DiffDelete guifg=#960050 guibg=#1E0010 guisp=#1E0010 gui=NONE ctermfg=89 ctermbg=53 cterm=NONE</span></span><br><span class="line"><span class="string">hi ModeMsg guifg=#E6DB74 guibg=NONE guisp=NONE gui=NONE ctermfg=185 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi CursorColumn guifg=NONE guibg=#3E3D32 guisp=#3E3D32 gui=NONE ctermfg=NONE ctermbg=237 cterm=NONE</span></span><br><span class="line"><span class="string">hi Define guifg=#66D9EF guibg=NONE guisp=NONE gui=NONE ctermfg=81 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi Function guifg=#A6E22E guibg=NONE guisp=NONE gui=NONE ctermfg=112 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi FoldColumn guifg=#465457 guibg=#000000 guisp=#000000 gui=NONE ctermfg=240 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi PreProc guifg=#A6E22E guibg=NONE guisp=NONE gui=NONE ctermfg=112 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">&quot;</span>hi EnumerationName -- no settings --</span><br><span class="line">hi Visual guifg=NONE guibg=<span class="comment">#403D3D guisp=#403D3D gui=NONE ctermfg=NONE ctermbg=238 cterm=NONE</span></span><br><span class="line">hi MoreMsg guifg=<span class="comment">#E6DB74 guibg=NONE guisp=NONE gui=NONE ctermfg=185 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">&quot;hi SpellCap -- no settings --</span></span><br><span class="line"><span class="string">hi VertSplit guifg=#CCCCCC guibg=#080808 guisp=#080808 gui=bold ctermfg=8 ctermbg=232 cterm=bold</span></span><br><span class="line"><span class="string">hi Exception guifg=#A6E22E guibg=NONE guisp=NONE gui=bold ctermfg=112 ctermbg=NONE cterm=bold</span></span><br><span class="line"><span class="string">hi Keyword guifg=#F92672 guibg=NONE guisp=NONE gui=bold ctermfg=197 ctermbg=NONE cterm=bold</span></span><br><span class="line"><span class="string">hi Type guifg=#66D9EF guibg=NONE guisp=NONE gui=NONE ctermfg=81 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi DiffChange guifg=#89807D guibg=#4C4745 guisp=#4C4745 gui=NONE ctermfg=245 ctermbg=239 cterm=NONE</span></span><br><span class="line"><span class="string">hi Cursor guifg=#000000 guibg=#F8F8F0 guisp=#F8F8F0 gui=NONE ctermfg=NONE ctermbg=230 cterm=NONE</span></span><br><span class="line"><span class="string">&quot;</span>hi SpellLocal -- no settings --</span><br><span class="line">hi <span class="built_in">Error</span> guifg=<span class="comment">#960050 guibg=#1E0010 guisp=#1E0010 gui=NONE ctermfg=89 ctermbg=53 cterm=NONE</span></span><br><span class="line">hi PMenu guifg=<span class="comment">#66D9EF guibg=#000000 guisp=#000000 gui=NONE ctermfg=81 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi SpecialKey guifg=<span class="comment">#66D9EF guibg=NONE guisp=NONE gui=italic ctermfg=81 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi Constant guifg=<span class="comment">#AE81FF guibg=NONE guisp=NONE gui=bold ctermfg=141 ctermbg=NONE cterm=bold</span></span><br><span class="line"><span class="string">&quot;hi DefinedName -- no settings --</span></span><br><span class="line"><span class="string">hi Tag guifg=#F92672 guibg=NONE guisp=NONE gui=italic ctermfg=197 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi String guifg=#E6DB74 guibg=NONE guisp=NONE gui=NONE ctermfg=185 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi PMenuThumb guifg=#66D9EF guibg=NONE guisp=NONE gui=NONE ctermfg=81 ctermbg=NONE cterm=NONE</span></span><br><span class="line"><span class="string">hi MatchParen guifg=#000000 guibg=#FD971F guisp=#FD971F gui=bold ctermfg=NONE ctermbg=208 cterm=bold</span></span><br><span class="line"><span class="string">&quot;</span>hi LocalVariable -- no settings --</span><br><span class="line">hi Repeat guifg=<span class="comment">#F92672 guibg=NONE guisp=NONE gui=bold ctermfg=197 ctermbg=NONE cterm=bold</span></span><br><span class="line"><span class="string">&quot;hi SpellBad -- no settings --</span></span><br><span class="line"><span class="string">&quot;</span>hi CTagsClass -- no settings --</span><br><span class="line">hi <span class="built_in">Directory</span> guifg=<span class="comment">#A6E22E guibg=NONE guisp=NONE gui=bold ctermfg=112 ctermbg=NONE cterm=bold</span></span><br><span class="line">hi Structure guifg=<span class="comment">#66D9EF guibg=NONE guisp=NONE gui=NONE ctermfg=81 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi Macro guifg=<span class="comment">#C4BE89 guibg=NONE guisp=NONE gui=italic ctermfg=186 ctermbg=NONE cterm=NONE</span></span><br><span class="line">hi Underlined guifg=<span class="comment">#808080 guibg=NONE guisp=NONE gui=underline ctermfg=8 ctermbg=NONE cterm=underline</span></span><br><span class="line">hi DiffAdd guifg=NONE guibg=<span class="comment">#13354A guisp=#13354A gui=NONE ctermfg=NONE ctermbg=23 cterm=NONE</span></span><br><span class="line"><span class="string">&quot;hi TabLine -- no settings --</span></span><br><span class="line"><span class="string">&quot;</span>hi clear -- no settings --</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>查看哪些进程占用了swap</title>
    <url>/2015/09/24/%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%BA%9B%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8%E4%BA%86swap/</url>
    <content><![CDATA[<p>这个脚本可以方便的查看哪些进程占用了swap。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 脚本功能 ： 列出正在占用swap的进程。</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;PID\t\tSwap\t\tProc_Name&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 拿出/proc目录下所有以数字为名的目录（进程名是数字才是进程，其他如sys,net等存放的是其他信息）</span></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> `ls -l /proc | grep ^d | awk <span class="string">&#x27;&#123; print $9 &#125;&#x27;</span>| grep -v [^0-9]`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 让进程释放swap的方法只有一个：就是重启该进程。或者等其自动释放。放</span></span><br><span class="line">    <span class="comment"># 如果进程会自动释放，那么我们就不会写脚本来找他了，找他都是因为他没有自动释放。</span></span><br><span class="line">    <span class="comment"># 所以我们要列出占用swap并需要重启的进程，但是init这个进程是系统里所有进程的祖先进程</span></span><br><span class="line">    <span class="comment"># 重启init进程意味着重启系统，这是万万不可以的，所以就不必检测他了，以免对系统造成影响。</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$pid</span> -eq 1 ];<span class="keyword">then</span> <span class="built_in">continue</span>;<span class="keyword">fi</span></span><br><span class="line">    grep -q <span class="string">&quot;Swap&quot;</span> /proc/<span class="variable">$pid</span>/smaps 2&gt;/dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        swap=$(grep Swap /proc/<span class="variable">$pid</span>/smaps \</span><br><span class="line">            | gawk <span class="string">&#x27;&#123; sum+=$2;&#125; END&#123; print sum &#125;&#x27;</span>)</span><br><span class="line">        proc_name=$(ps aux | grep -w <span class="string">&quot;<span class="variable">$pid</span>&quot;</span> | grep -v grep \</span><br><span class="line">            | awk <span class="string">&#x27;&#123; for(i=11;i&lt;=NF;i++)&#123; printf(&quot;%s &quot;,$i); &#125;&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$swap</span> -gt 0 ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;pid&#125;</span>\t<span class="variable">$&#123;swap&#125;</span>\t<span class="variable">$&#123;proc_name&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">fi</span> </span><br><span class="line">    <span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">done</span> | sort -k2 -n | awk -F<span class="string">&#x27;\t&#x27;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    pid[NR]=$1;</span></span><br><span class="line"><span class="string">    size[NR]=$2;</span></span><br><span class="line"><span class="string">    name[NR]=$3;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">END&#123;</span></span><br><span class="line"><span class="string">    for(id=1;id&lt;=length(pid);id++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if(size[id]&lt;1024)</span></span><br><span class="line"><span class="string">            printf(&quot;%-10s\t%15sKB\t%s\n&quot;,pid[id],size[id],name[id]);</span></span><br><span class="line"><span class="string">        else if(size[id]&lt;1048576)</span></span><br><span class="line"><span class="string">            printf(&quot;%-10s\t%15.2fMB\t%s\n&quot;,pid[id],size[id]/1024,name[id]);</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">            printf(&quot;%-10s\t%15.2fGB\t%s\n&quot;,pid[id],size[id]/1048576,name[id]);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>swap</tag>
      </tags>
  </entry>
  <entry>
    <title>高性能mysql主从架构及MHA高可用负载均衡</title>
    <url>/2015/11/28/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E5%8F%8AMHA%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<p>实验系统：CentOS 6.7_x86_64（4.2.3）</p>
<p>实验前提：防火墙和selinux都关闭</p>
<p>实验说明：本实验共有3台主机，拓扑图如下所示</p>
<p><img src="http://images.cnitblog.com/i/609710/201404/192216579327066.png" alt="拓扑图"></p>
<p>主机说明：<br>manager: 172.16.2.99<br>master: 172.16.115.101<br>备用master: 172.16.115.102<br>也可以加别的slave。</p>
<p>实验软件：</p>
<p>mha4mysql-manager-0.56-0.el6.noarch.rpm</p>
<p>mha4mysql-node-0.56-0.el6.noarch.rpm</p>
<p>mysql(mysql-5.5.46-1.el6.remi.x86_64)</p>
<p>###1、安装软件<br>三台机器都需要安装mha4mysql-node, master和slave还需要安装mysql, manager可以不装mysql. 当然manager也可以用slave机器来做。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql mysql-server epel-release -y</span><br><span class="line"></span><br><span class="line">rpm -Uvh mha4mysql-node-0.56-0.el6.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>manager还需要安装mha4mysql-manager.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum localinstall mha4mysql-manager-0.56-0.el6.noarch.rpm -y</span><br></pre></td></tr></table></figure>
<p>用localinstall会自动安装依赖。</p>
<p>###2、mysql主从配置</p>
<h4 id="master上编辑-etc-my-cnf，添加配置"><a href="#master上编辑-etc-my-cnf，添加配置" class="headerlink" title="master上编辑/etc/my.cnf，添加配置"></a>master上编辑/etc/my.cnf，添加配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master config</span></span><br><span class="line">server-id = 1</span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">log-slave-updates</span><br><span class="line">binlog_do_db = drupal</span><br></pre></td></tr></table></figure>

<h4 id="slave上编辑-etc-my-cnf-添加配置"><a href="#slave上编辑-etc-my-cnf-添加配置" class="headerlink" title="slave上编辑/etc/my.cnf,添加配置"></a>slave上编辑/etc/my.cnf,添加配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># slave config</span></span><br><span class="line">server-id = 2</span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">log-slave-updates</span><br><span class="line">binlog_do_db = drupal</span><br></pre></td></tr></table></figure>

<h4 id="创建具有复制权限的用户"><a href="#创建具有复制权限的用户" class="headerlink" title="创建具有复制权限的用户"></a>创建具有复制权限的用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;replicate&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h4 id="设置slave"><a href="#设置slave" class="headerlink" title="设置slave"></a>设置slave</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br><span class="line"></span><br><span class="line">mysql&gt; change master to master_host=<span class="string">&#x27;172.16.115.101&#x27;</span>,master_port=3306,master_user=<span class="string">&#x27;repl&#x27;</span>,master_password=<span class="string">&#x27;123456&#x27;</span>,master_log_file=<span class="string">&#x27;mysql-bin.000001&#x27;</span>,MASTER_LOG_POS=0;</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure>
<h4 id="查看master-slave配置"><a href="#查看master-slave配置" class="headerlink" title="查看master/slave配置"></a>查看master/slave配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line"></span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000001 |      867 | drupal       |                  |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line"></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.115.101</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 867</span><br><span class="line">               Relay_Log_File: mysqld-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 1013</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: drupal</span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 867</span><br><span class="line">              Relay_Log_Space: 1170</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>如果Slave_IO_Running和Slave_SQL_Running都是YES，说明slave服务器配置OK。</p>
<p>###3、MHA作用<br>1）从宕机崩溃的master保存二进制日志事件（binlog events）;</p>
<p>2）识别含有最新更新的slave；</p>
<p>3）应用差异的中继日志（relay log）到其他的slave；</p>
<p>4）应用从master保存的二进制日志事件（binlog events）；</p>
<p>5）提升一个slave为新的master；</p>
<p>6）使其他的slave连接新的master进行复制；</p>
<p>MHA软件由两部分组成，Manager工具包和Node工具包，具体的说明如下。</p>
<p>Manager工具包主要包括以下几个工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">masterha_check_ssh              检查MHA的SSH配置状况</span><br><span class="line">masterha_check_repl             检查MySQL复制状况</span><br><span class="line">masterha_manger                 启动MHA</span><br><span class="line">masterha_check_status           检测当前MHA运行状态</span><br><span class="line">masterha_master_monitor         检测master是否宕机</span><br><span class="line">masterha_master_switch          控制故障转移（自动或者手动）</span><br><span class="line">masterha_conf_host              添加或删除配置的server信息</span><br></pre></td></tr></table></figure>

<p>Node工具包（这些工具通常由MHA Manager的脚本触发，无需人为操作）主要包括以下几个工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">save_binary_logs                保存和复制master的二进制日志</span><br><span class="line">apply_diff_relay_logs           识别差异的中继日志事件并将其差异的事件应用于其他的slave</span><br><span class="line">filter_mysqlbinlog              去除不必要的ROLLBACK事件（MHA已不再使用这个工具）</span><br><span class="line">purge_relay_logs                清除中继日志（不会阻塞SQL线程）</span><br></pre></td></tr></table></figure>

<p>###4、配置MHA<br>####创建MHA的工作目录，并且创建相关配置文件（在软件包解压后的目录里面有样例配置文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172.16.2.99 ~]<span class="comment"># vim /etc/masterha/app1.cnf </span></span><br><span class="line"></span><br><span class="line">[server default]</span><br><span class="line">manager_log=/var/<span class="built_in">log</span>/mha/app1/manager.log //设置manager的日志</span><br><span class="line">manager_workdir=/var/<span class="built_in">log</span>/mha/app1.log //设置manager的工作目录</span><br><span class="line">master_binlog_dir=/var/lib/mysql //设置master 保存binlog的位置，以便MHA可以找到master的日志，我这里的也就是mysql的数据目录</span><br><span class="line"></span><br><span class="line">user=repl  //设置监控用户root</span><br><span class="line">password=123456 //设置mysql中root用户的密码，这个密码是前文中创建监控用户的那个密码</span><br><span class="line">ssh_user=root //设置ssh的登录用户名</span><br><span class="line">repl_user=repl //设置复制环境中的复制用户名</span><br><span class="line">repl_password=123456 //设置复制用户的密码</span><br><span class="line">ping_interval=10 //设置监控主库，发送ping包的时间间隔，默认是3秒，尝试三次没有回应的时候自动进行railover</span><br><span class="line"></span><br><span class="line">shutdown_script=<span class="string">&quot;&quot;</span> //设置故障发生后关闭故障主机脚本（该脚本的主要作用是关闭主机放在发生脑裂,这里没有使用）</span><br><span class="line">master_ip_online_change_script=<span class="string">&quot;&quot;</span> //设置手动切换时候的切换脚本</span><br><span class="line">report_script=<span class="string">&quot;/usr/bin/masterha_report_script&quot;</span> //设置发生切换后发送的报警的脚本</span><br><span class="line">master_ip_failover_script=<span class="string">&quot;/usr/bin/masterha_ip_failover&quot;</span> //设置自动failover时候的切换脚本</span><br><span class="line"></span><br><span class="line">[server1]</span><br><span class="line">hostname=172.16.115.101</span><br><span class="line"></span><br><span class="line">[server2]</span><br><span class="line">hostname=172.16.115.102</span><br><span class="line">candidate_master=1 //设置为候选master，如果设置该参数以后，发生主从切换以后将会将此从库提升为主库，即使这个主库不是集群中时间最新的slave</span><br><span class="line">check_repl_delay=0   //默认情况下如果一个slave落后master 100M的relay logs的话，MHA将不会选择该slave作为一个新的master，因为对于这个slave的恢复需要花费很长时间，通过设置check_repl_delay=0,MHA触发切换在选择一个新的master的时候将会忽略复制延时，这个参数对于设置了candidate_master=1的主机非常有用，因为这个候选主在切换的过程中一定是新的master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>####设置relay log的清除方式（在每个slave节点上）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192.168.115.102 ~]<span class="comment"># mysql -e &#x27;set global relay_log_purge=0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>MHA在发生切换的过程中，从库的恢复过程中依赖于relay log的相关信息，所以这里要将relay log的自动清除设置为OFF，采用手动清除relay log的方式。在默认情况下，从服务器上的中继日志会在SQL线程执行完毕后被自动删除。但是在MHA环境中，这些中继日志在恢复其他从服务器时可能会被用到，因此需要禁用中继日志的自动删除功能。定期清除中继日志需要考虑到复制延时的问题。在ext3的文件系统下，删除大的文件需要一定的时间，会导致严重的复制延时。为了避免复制延时，需要暂时为中继日志创建硬链接，因为在linux系统中通过硬链接删除大文件速度会很快。（在mysql数据库中，删除大表时，通常也采用建立硬链接的方式）</p>
<p>MHA节点中包含了pure_relay_logs命令工具，它可以为中继日志创建硬链接，执行SET GLOBAL relay_log_purge=1,等待几秒钟以便SQL线程切换到新的中继日志，再执行SET GLOBAL relay_log_purge=0。</p>
<p>pure_relay_logs脚本参数如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--user mysql                      用户名</span><br><span class="line">--password mysql                  密码</span><br><span class="line">--port                            端口号</span><br><span class="line">--workdir                         指定创建relay <span class="built_in">log</span>的硬链接的位置，默认是/var/tmp，由于系统不同分区创建硬链接文件会失败，故需要执行硬链接具体位置，成功执行脚本后，硬链接的中继日志文件被删除</span><br><span class="line">--disable_relay_log_purge         默认情况下，如果relay_log_purge=1，脚本会什么都不清理，自动退出，通过设定这个参数，当relay_log_purge=1的情况下会将relay_log_purge设置为0。清理relay <span class="built_in">log</span>之后，最后将参数设置为OFF。</span><br></pre></td></tr></table></figure>

<p>####设置定期清理relay脚本（两台slave服务器）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192.168.115.102 ~]<span class="comment"># cat purge_relay_log.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">user=root</span><br><span class="line">passwd=123456</span><br><span class="line">port=3306</span><br><span class="line">log_dir=<span class="string">&#x27;/var/log/masterha&#x27;</span></span><br><span class="line">work_dir=<span class="string">&#x27;/var/lib/mysql&#x27;</span></span><br><span class="line">purge=<span class="string">&#x27;/usr/local/bin/purge_relay_logs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$log_dir</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   mkdir <span class="variable">$log_dir</span> -p</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$purge</span> --user=<span class="variable">$user</span> --password=<span class="variable">$passwd</span> --disable_relay_log_purge --port=<span class="variable">$port</span> --workdir=<span class="variable">$work_dir</span> &gt;&gt; <span class="variable">$log_dir</span>/purge_relay_logs.log 2&gt;&amp;1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>添加到crontab定期执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192.168.115.102 ~]<span class="comment"># crontab -l</span></span><br><span class="line">0 4 * * * /bin/bash /root/purge_relay_log.sh</span><br></pre></td></tr></table></figure>

<p>####purge_relay_logs脚本删除中继日志不会阻塞SQL线程。下面我们手动执行看看什么情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192.168.115.102 ~]<span class="comment"># purge_relay_logs --user=root --password=123456 --port=3306 -disable_relay_log_purge --workdir=/data/</span></span><br><span class="line">2014-04-20 15:47:24: purge_relay_logs script started.</span><br><span class="line"> Found relay_log.info: /data/mysql/relay-log.info</span><br><span class="line"> Removing hard linked relay <span class="built_in">log</span> files server03-relay-bin* under /data/.. <span class="keyword">done</span>.</span><br><span class="line"> Current relay <span class="built_in">log</span> file: /data/mysql/server03-relay-bin.000002</span><br><span class="line"> Archiving unused relay <span class="built_in">log</span> files (up to /data/mysql/server03-relay-bin.000001) ...</span><br><span class="line"> Creating hard link <span class="keyword">for</span> /data/mysql/server03-relay-bin.000001 under /data//server03-relay-bin.000001 .. ok.</span><br><span class="line"> Creating hard links <span class="keyword">for</span> unused relay <span class="built_in">log</span> files completed.</span><br><span class="line"> Executing SET GLOBAL relay_log_purge=1; FLUSH LOGS; sleeping a few seconds so that SQL thread can delete older relay <span class="built_in">log</span> files (<span class="keyword">if</span> it keeps up); SET GLOBAL relay_log_purge=0; .. ok.</span><br><span class="line"> Removing hard linked relay <span class="built_in">log</span> files server03-relay-bin* under /data/.. <span class="keyword">done</span>.</span><br><span class="line">2014-04-20 15:47:27: All relay <span class="built_in">log</span> purging operations succeeded.</span><br></pre></td></tr></table></figure>

<p>###5、SSH配置<br>要想MHA顺利执行各项任务，还得打通每台机器的SSH。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172.16.2.99 app1]<span class="comment"># ssh-keygen -t rsa</span></span><br><span class="line">[root@172.16.2.99 app1]<span class="comment"># ssh-copy-id -i .ssh/id_rsa.pub root@172.16.115.101</span></span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<p>记住，每台机器都要跟别的机器打通SSH。</p>
<p>检查MHA Manger到所有MHA Node的SSH连接状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172.16.2.99 app1]<span class="comment"># masterha_check_ssh --conf=/etc/masterha/app1.cnf  </span></span><br><span class="line">Wed Dec  2 14:42:39 2015 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [info] Reading application default configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [info] Reading server configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [info] Starting SSH connection tests..</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [debug] </span><br><span class="line">Wed Dec  2 14:42:39 2015 - [debug]  Connecting via SSH from root@172.16.115.101(172.16.115.101:22) to root@172.16.115.102(172.16.115.102:22)..</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [debug]   ok.</span><br><span class="line">Wed Dec  2 14:42:40 2015 - [debug] </span><br><span class="line">Wed Dec  2 14:42:39 2015 - [debug]  Connecting via SSH from root@172.16.115.102(172.16.115.102:22) to root@172.16.115.101(172.16.115.101:22)..</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [debug]   ok.</span><br><span class="line">Wed Dec  2 14:42:40 2015 - [info] All SSH connection tests passed successfully.</span><br></pre></td></tr></table></figure>
<p>可以看见各个节点ssh验证都是ok的。</p>
<p>###6、检查整个复制环境状况<br>通过masterha_check_repl脚本查看整个集群的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172.16.2.99 app1]<span class="comment"># masterha_check_ssh --conf=/etc/masterha/app1.cnf  </span></span><br><span class="line">Wed Dec  2 14:42:39 2015 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [info] Reading application default configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [info] Reading server configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [info] Starting SSH connection tests..</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [debug] </span><br><span class="line">Wed Dec  2 14:42:39 2015 - [debug]  Connecting via SSH from root@172.16.115.101(172.16.115.101:22) to root@172.16.115.102(172.16.115.102:22)..</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [debug]   ok.</span><br><span class="line">Wed Dec  2 14:42:40 2015 - [debug] </span><br><span class="line">Wed Dec  2 14:42:39 2015 - [debug]  Connecting via SSH from root@172.16.115.102(172.16.115.102:22) to root@172.16.115.101(172.16.115.101:22)..</span><br><span class="line">Wed Dec  2 14:42:39 2015 - [debug]   ok.</span><br><span class="line">Wed Dec  2 14:42:40 2015 - [info] All SSH connection tests passed successfully.</span><br><span class="line">[root@utn-cz-1-1-s16h2 app1.log]<span class="comment"># masterha_check_repl --conf=/etc/masterha/app1.cnf  </span></span><br><span class="line">Wed Dec  2 14:43:49 2015 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Wed Dec  2 14:43:49 2015 - [info] Reading application default configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Wed Dec  2 14:43:49 2015 - [info] Reading server configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Wed Dec  2 14:43:49 2015 - [info] MHA::MasterMonitor version 0.56.</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info] GTID failover mode = 0</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info] Dead Servers:</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info] Alive Servers:</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info]   172.16.115.101(172.16.115.101:3306)</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info]   172.16.115.102(172.16.115.102:3306)</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info] Alive Slaves:</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info]   172.16.115.102(172.16.115.102:3306)  Version=5.5.46-log (oldest major version between slaves) log-bin:enabled</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info]     Replicating from 172.16.115.101(172.16.115.101:3306)</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info]     Primary candidate <span class="keyword">for</span> the new Master (candidate_master is <span class="built_in">set</span>)</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info] Current Alive Master: 172.16.115.101(172.16.115.101:3306)</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info] Checking slave configurations..</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info]  read_only=1 is not <span class="built_in">set</span> on slave 172.16.115.102(172.16.115.102:3306).</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [warning]  relay_log_purge=0 is not <span class="built_in">set</span> on slave 172.16.115.102(172.16.115.102:3306).</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info] Checking replication filtering settings..</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info]  binlog_do_db= drupal, binlog_ignore_db= </span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info]  Replication filtering check ok.</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info] GTID (with auto-pos) is not supported</span><br><span class="line">Wed Dec  2 14:43:50 2015 - [info] Starting SSH connection tests..</span><br><span class="line">Wed Dec  2 14:43:51 2015 - [info] All SSH connection tests passed successfully.</span><br><span class="line">Wed Dec  2 14:43:51 2015 - [info] Checking MHA Node version..</span><br><span class="line">Wed Dec  2 14:43:51 2015 - [info]  Version check ok.</span><br><span class="line">Wed Dec  2 14:43:51 2015 - [info] Checking SSH publickey authentication settings on the current master..</span><br><span class="line">Wed Dec  2 14:43:51 2015 - [info] HealthCheck: SSH to 172.16.115.101 is reachable.</span><br><span class="line">Wed Dec  2 14:43:51 2015 - [info] Master MHA Node version is 0.56.</span><br><span class="line">Wed Dec  2 14:43:51 2015 - [info] Checking recovery script configurations on 172.16.115.101(172.16.115.101:3306)..</span><br><span class="line">Wed Dec  2 14:43:51 2015 - [info]   Executing <span class="built_in">command</span>: save_binary_logs --<span class="built_in">command</span>=<span class="built_in">test</span> --start_pos=4 --binlog_dir=/var/lib/mysql --output_file=/var/tmp/save_binary_logs_test --manager_version=0.56 --start_file=mysql-bin.000021 </span><br><span class="line">Wed Dec  2 14:43:51 2015 - [info]   Connecting to root@172.16.115.101(172.16.115.101:22).. </span><br><span class="line">  Creating /var/tmp <span class="keyword">if</span> not exists..    ok.</span><br><span class="line">  Checking output directory is accessible or not..</span><br><span class="line">   ok.</span><br><span class="line">  Binlog found at /var/lib/mysql, up to mysql-bin.000021</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info] Binlog setting check <span class="keyword">done</span>.</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info] Checking SSH publickey authentication and checking recovery script configurations on all alive slave servers..</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info]   Executing <span class="built_in">command</span> : apply_diff_relay_logs --<span class="built_in">command</span>=<span class="built_in">test</span> --slave_user=<span class="string">&#x27;repl&#x27;</span> --slave_host=172.16.115.102 --slave_ip=172.16.115.102 --slave_port=3306 --workdir=/var/tmp --target_version=5.5.46-log --manager_version=0.56 --relay_log_info=/var/lib/mysql/relay-log.info  --relay_dir=/var/lib/mysql/  --slave_pass=xxx</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info]   Connecting to root@172.16.115.102(172.16.115.102:22).. </span><br><span class="line">  Checking slave recovery environment settings..</span><br><span class="line">    Opening /var/lib/mysql/relay-log.info ... ok.</span><br><span class="line">    Relay <span class="built_in">log</span> found at /var/lib/mysql, up to mysqld-relay-bin.000022</span><br><span class="line">    Temporary relay <span class="built_in">log</span> file is /var/lib/mysql/mysqld-relay-bin.000022</span><br><span class="line">    Testing mysql connection and privileges.. <span class="keyword">done</span>.</span><br><span class="line">    Testing mysqlbinlog output.. <span class="keyword">done</span>.</span><br><span class="line">    Cleaning up <span class="built_in">test</span> file(s).. <span class="keyword">done</span>.</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info] Slaves settings check <span class="keyword">done</span>.</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info] </span><br><span class="line">172.16.115.101(172.16.115.101:3306) (current master)</span><br><span class="line"> +--172.16.115.102(172.16.115.102:3306)</span><br><span class="line"></span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info] Checking replication health on 172.16.115.102..</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info]  ok.</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info] Checking master_ip_failover_script status:</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info]   /usr/bin/masterha_ip_failover --<span class="built_in">command</span>=status --ssh_user=root --orig_master_host=172.16.115.101 --orig_master_ip=172.16.115.101 --orig_master_port=3306 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IN SCRIPT TEST====/sbin/ifconfig eth0:0 down==/sbin/ifconfig eth0:0 172.16.115.200/24===</span><br><span class="line"></span><br><span class="line">Checking the Status of the script.. OK </span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info]  OK.</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [warning] shutdown_script is not defined.</span><br><span class="line">Wed Dec  2 14:43:52 2015 - [info] Got <span class="built_in">exit</span> code 0 (Not master dead).</span><br><span class="line"></span><br><span class="line">MySQL Replication Health is OK.</span><br></pre></td></tr></table></figure>

<p>###7、检查MHA Manager的状态<br>通过master_check_status脚本查看Manager的状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172.16.2.99 ~]<span class="comment"># masterha_check_status --conf=/etc/masterha/app1.cnf</span></span><br><span class="line">app1 is stopped(2:NOT_RUNNING).</span><br></pre></td></tr></table></figure>
<p>注意：如果正常，会显示”PING_OK”，否则会显示”NOT_RUNNING”，这代表MHA监控没有开启。</p>
<p>###8、开启MHA Manager监控</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172.16.2.99 ~]<span class="comment"># nohup masterha_manager --conf=/etc/masterha/app1.cnf --ignore_last_failover &gt; /var/log/mha/app1/manager.log &lt; /dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line">[1] 7303</span><br></pre></td></tr></table></figure>

<p>启动参数介绍：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--remove_dead_master_conf      该参数代表当发生主从切换后，老的主库的ip将会从配置文件中移除。</span><br><span class="line">--manger_log                            日志存放位置</span><br><span class="line">--ignore_last_failover                 在缺省情况下，如果MHA检测到连续发生宕机，且两次宕机间隔不足8小时的话，则不会进行Failover，之所以这样限制是为了避免ping-pong效应。该参数代表忽略上次MHA触发切换产生的文件，默认情况下，MHA发生切换后会在日志目录，也就是上面我设置的/data产生app1.failover.complete文件，下次再次切换的时候如果发现该目录下存在该文件将不允许触发切换，除非在第一次切换后收到删除该文件，为了方便，这里设置为--ignore_last_failover。</span><br></pre></td></tr></table></figure>

<p>查看MHA Manager监控是否正常：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172.16.2.99 ~]<span class="comment"># masterha_check_status --conf=/etc/masterha/app1.cnf</span></span><br><span class="line">app1 (pid:20386) is running(0:PING_OK), master:172.16.115.101</span><br></pre></td></tr></table></figure>

<p>可以看见已经在监控了，而且master的主机为172.16.115.101</p>
<p>###9、查看启动日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172.16.2.99 ~]<span class="comment">#  cat /var/log/mha/app1/manager.log</span></span><br><span class="line">Wed Dec  2 14:46:37 2015 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Wed Dec  2 14:46:37 2015 - [info] Reading application default configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Wed Dec  2 14:46:37 2015 - [info] Reading server configuration from /etc/masterha/app1.cnf..</span><br><span class="line">Wed Dec  2 14:46:37 2015 - [info] MHA::MasterMonitor version 0.56.</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info] GTID failover mode = 0</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info] Dead Servers:</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info] Alive Servers:</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info]   172.16.115.101(172.16.115.101:3306)</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info]   172.16.115.102(172.16.115.102:3306)</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info] Alive Slaves:</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info]   172.16.115.102(172.16.115.102:3306)  Version=5.5.46-log (oldest major version between slaves) log-bin:enabled</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info]     Replicating from 172.16.115.101(172.16.115.101:3306)</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info]     Primary candidate <span class="keyword">for</span> the new Master (candidate_master is <span class="built_in">set</span>)</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info] Current Alive Master: 172.16.115.101(172.16.115.101:3306)</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info] Checking slave configurations..</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info]  read_only=1 is not <span class="built_in">set</span> on slave 172.16.115.102(172.16.115.102:3306).</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [warning]  relay_log_purge=0 is not <span class="built_in">set</span> on slave 172.16.115.102(172.16.115.102:3306).</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info] Checking replication filtering settings..</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info]  binlog_do_db= drupal, binlog_ignore_db= </span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info]  Replication filtering check ok.</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info] GTID (with auto-pos) is not supported</span><br><span class="line">Wed Dec  2 14:46:38 2015 - [info] Starting SSH connection tests..</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info] All SSH connection tests passed successfully.</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info] Checking MHA Node version..</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info]  Version check ok.</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info] Checking SSH publickey authentication settings on the current master..</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info] HealthCheck: SSH to 172.16.115.101 is reachable.</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info] Master MHA Node version is 0.56.</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info] Checking recovery script configurations on 172.16.115.101(172.16.115.101:3306)..</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info]   Executing <span class="built_in">command</span>: save_binary_logs --<span class="built_in">command</span>=<span class="built_in">test</span> --start_pos=4 --binlog_dir=/var/lib/mysql --output_file=/var/tmp/save_binary_logs_test --manager_version=0.56 --start_file=mysql-bin.000021 </span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info]   Connecting to root@172.16.115.101(172.16.115.101:22).. </span><br><span class="line">  Creating /var/tmp <span class="keyword">if</span> not exists..    ok.</span><br><span class="line">  Checking output directory is accessible or not..</span><br><span class="line">   ok.</span><br><span class="line">  Binlog found at /var/lib/mysql, up to mysql-bin.000021</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info] Binlog setting check <span class="keyword">done</span>.</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info] Checking SSH publickey authentication and checking recovery script configurations on all alive slave servers..</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info]   Executing <span class="built_in">command</span> : apply_diff_relay_logs --<span class="built_in">command</span>=<span class="built_in">test</span> --slave_user=<span class="string">&#x27;repl&#x27;</span> --slave_host=172.16.115.102 --slave_ip=172.16.115.102 --slave_port=3306 --workdir=/var/tmp --target_version=5.5.46-log --manager_version=0.56 --relay_log_info=/var/lib/mysql/relay-log.info  --relay_dir=/var/lib/mysql/  --slave_pass=xxx</span><br><span class="line">Wed Dec  2 14:46:39 2015 - [info]   Connecting to root@172.16.115.102(172.16.115.102:22).. </span><br><span class="line">  Checking slave recovery environment settings..</span><br><span class="line">    Opening /var/lib/mysql/relay-log.info ... ok.</span><br><span class="line">    Relay <span class="built_in">log</span> found at /var/lib/mysql, up to mysqld-relay-bin.000022</span><br><span class="line">    Temporary relay <span class="built_in">log</span> file is /var/lib/mysql/mysqld-relay-bin.000022</span><br><span class="line">    Testing mysql connection and privileges.. <span class="keyword">done</span>.</span><br><span class="line">    Testing mysqlbinlog output.. <span class="keyword">done</span>.</span><br><span class="line">    Cleaning up <span class="built_in">test</span> file(s).. <span class="keyword">done</span>.</span><br><span class="line">Wed Dec  2 14:46:40 2015 - [info] Slaves settings check <span class="keyword">done</span>.</span><br><span class="line">Wed Dec  2 14:46:40 2015 - [info] </span><br><span class="line">172.16.115.101(172.16.115.101:3306) (current master)</span><br><span class="line"> +--172.16.115.102(172.16.115.102:3306)</span><br><span class="line"></span><br><span class="line">Wed Dec  2 14:46:40 2015 - [info] Checking master_ip_failover_script status:</span><br><span class="line">Wed Dec  2 14:46:40 2015 - [info]   /usr/bin/masterha_ip_failover --<span class="built_in">command</span>=status --ssh_user=root --orig_master_host=172.16.115.101 --orig_master_ip=172.16.115.101 --orig_master_port=3306 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IN SCRIPT TEST====/sbin/ifconfig eth0:0 down==/sbin/ifconfig eth0:0 172.16.115.200/24===</span><br><span class="line"></span><br><span class="line">Checking the Status of the script.. OK </span><br><span class="line">Wed Dec  2 14:46:40 2015 - [info]  OK.</span><br><span class="line">Wed Dec  2 14:46:40 2015 - [warning] shutdown_script is not defined.</span><br><span class="line">Wed Dec  2 14:46:40 2015 - [info] Set master ping interval 1 seconds.</span><br><span class="line">Wed Dec  2 14:46:40 2015 - [warning] secondary_check_script is not defined. It is highly recommended setting it to check master reachability from two or more routes.</span><br><span class="line">Wed Dec  2 14:46:40 2015 - [info] Starting ping health check on 172.16.115.101(172.16.115.101:3306)..</span><br><span class="line">Wed Dec  2 14:46:40 2015 - [info] Ping(SELECT) succeeded, waiting until MySQL doesn<span class="string">&#x27;t respond..</span></span><br></pre></td></tr></table></figure>

<p>###10、配置VIP</p>
<p>我们采用脚本的方式去配置vip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172.16.2.99 ~]<span class="comment">#  vim /usr/bin/masterha_ip_failover</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/usr/bin/env perl</span></span><br><span class="line"></span><br><span class="line">use strict;</span><br><span class="line">use warnings FATAL =&gt; <span class="string">&#x27;all&#x27;</span>;</span><br><span class="line"></span><br><span class="line">use Getopt::Long;</span><br><span class="line"></span><br><span class="line">my (</span><br><span class="line">    <span class="variable">$command</span>,          <span class="variable">$ssh_user</span>,        <span class="variable">$orig_master_host</span>, <span class="variable">$orig_master_ip</span>,</span><br><span class="line">    <span class="variable">$orig_master_port</span>, <span class="variable">$new_master_host</span>, <span class="variable">$new_master_ip</span>,    <span class="variable">$new_master_port</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">my <span class="variable">$vip</span> = <span class="string">&#x27;172.16.115.200/24&#x27;</span>;</span><br><span class="line">my <span class="variable">$key</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">my <span class="variable">$ssh_start_vip</span> = <span class="string">&quot;/sbin/ifconfig eth0:<span class="variable">$key</span> <span class="variable">$vip</span>&quot;</span>;</span><br><span class="line">my <span class="variable">$ssh_stop_vip</span> = <span class="string">&quot;/sbin/ifconfig eth0:<span class="variable">$key</span> down&quot;</span>;</span><br><span class="line"></span><br><span class="line">GetOptions(</span><br><span class="line">    <span class="string">&#x27;command=s&#x27;</span>          =&gt; \<span class="variable">$command</span>,</span><br><span class="line">    <span class="string">&#x27;ssh_user=s&#x27;</span>         =&gt; \<span class="variable">$ssh_user</span>,</span><br><span class="line">    <span class="string">&#x27;orig_master_host=s&#x27;</span> =&gt; \<span class="variable">$orig_master_host</span>,</span><br><span class="line">    <span class="string">&#x27;orig_master_ip=s&#x27;</span>   =&gt; \<span class="variable">$orig_master_ip</span>,</span><br><span class="line">    <span class="string">&#x27;orig_master_port=i&#x27;</span> =&gt; \<span class="variable">$orig_master_port</span>,</span><br><span class="line">    <span class="string">&#x27;new_master_host=s&#x27;</span>  =&gt; \<span class="variable">$new_master_host</span>,</span><br><span class="line">    <span class="string">&#x27;new_master_ip=s&#x27;</span>    =&gt; \<span class="variable">$new_master_ip</span>,</span><br><span class="line">    <span class="string">&#x27;new_master_port=i&#x27;</span>  =&gt; \<span class="variable">$new_master_port</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> &amp;main();</span><br><span class="line"></span><br><span class="line">sub main &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;\n\nIN SCRIPT TEST====<span class="variable">$ssh_stop_vip</span>==<span class="variable">$ssh_start_vip</span>===\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$command</span> eq <span class="string">&quot;stop&quot;</span> || <span class="variable">$command</span> eq <span class="string">&quot;stopssh&quot;</span> ) &#123;</span><br><span class="line"></span><br><span class="line">        my <span class="variable">$exit_code</span> = 1;</span><br><span class="line">        <span class="built_in">eval</span> &#123;</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Disabling the VIP on old master: <span class="variable">$orig_master_host</span> \n&quot;</span>;</span><br><span class="line">            &amp;stop_vip();</span><br><span class="line">            <span class="variable">$exit_code</span> = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$@</span>) &#123;</span><br><span class="line">            warn <span class="string">&quot;Got Error: <span class="variable">$@</span>\n&quot;</span>;</span><br><span class="line">            <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( <span class="variable">$command</span> eq <span class="string">&quot;start&quot;</span> ) &#123;</span><br><span class="line"></span><br><span class="line">        my <span class="variable">$exit_code</span> = 10;</span><br><span class="line">        <span class="built_in">eval</span> &#123;</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Enabling the VIP - <span class="variable">$vip</span> on the new master - <span class="variable">$new_master_host</span> \n&quot;</span>;</span><br><span class="line">            &amp;start_vip();</span><br><span class="line">            <span class="variable">$exit_code</span> = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$@</span>) &#123;</span><br><span class="line">            warn <span class="variable">$@</span>;</span><br><span class="line">            <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( <span class="variable">$command</span> eq <span class="string">&quot;status&quot;</span> ) &#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Checking the Status of the script.. OK \n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        &amp;usage();</span><br><span class="line">        <span class="built_in">exit</span> 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub <span class="function"><span class="title">start_vip</span></span>() &#123;</span><br><span class="line">    `ssh <span class="variable">$ssh_user</span>\@<span class="variable">$new_master_host</span> \&quot; <span class="variable">$ssh_start_vip</span> \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line">sub <span class="function"><span class="title">stop_vip</span></span>() &#123;</span><br><span class="line">     <span class="built_in">return</span> 0  unless  (<span class="variable">$ssh_user</span>);</span><br><span class="line">    `ssh <span class="variable">$ssh_user</span>\@<span class="variable">$orig_master_host</span> \&quot; <span class="variable">$ssh_stop_vip</span> \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub usage &#123;</span><br><span class="line">    <span class="built_in">print</span></span><br><span class="line">    <span class="string">&quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip </span></span><br><span class="line"><span class="string">            --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###11、邮件发送脚本send_report </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  Copyright (C) 2011 DeNA Co.,Ltd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  This program is free software; you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">#  it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">#  the Free Software Foundation; either version 2 of the License, or</span></span><br><span class="line"><span class="comment">#  (at your option) any later version.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">#  but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">#  GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment">#   along with this program; if not, write to the Free Software</span></span><br><span class="line"><span class="comment">#  Foundation, Inc.,</span></span><br><span class="line"><span class="comment">#  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Note: This is a sample script and is not complete. Modify the script based on your environment.</span></span><br><span class="line"></span><br><span class="line">use strict;</span><br><span class="line">use warnings FATAL =&gt; <span class="string">&#x27;all&#x27;</span>;</span><br><span class="line">use Mail::Sender;</span><br><span class="line">use Getopt::Long;</span><br><span class="line"></span><br><span class="line"><span class="comment">#new_master_host and new_slave_hosts are set only when recovering master succeeded</span></span><br><span class="line">my ( <span class="variable">$dead_master_host</span>, <span class="variable">$new_master_host</span>, <span class="variable">$new_slave_hosts</span>, <span class="variable">$subject</span>, <span class="variable">$body</span> );</span><br><span class="line">my <span class="variable">$smtp</span>=<span class="string">&#x27;smtp.163.com&#x27;</span>;</span><br><span class="line">my <span class="variable">$mail_from</span>=<span class="string">&#x27;services@163.com&#x27;</span>;</span><br><span class="line">my <span class="variable">$mail_user</span>=<span class="string">&#x27;services@163.com&#x27;</span>;</span><br><span class="line">my <span class="variable">$mail_pass</span>=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">my <span class="variable">$mail_to</span>=[<span class="string">&#x27;xxx@xxx.cn&#x27;</span>];</span><br><span class="line">GetOptions(</span><br><span class="line">  <span class="string">&#x27;orig_master_host=s&#x27;</span> =&gt; \<span class="variable">$dead_master_host</span>,</span><br><span class="line">  <span class="string">&#x27;new_master_host=s&#x27;</span>  =&gt; \<span class="variable">$new_master_host</span>,</span><br><span class="line">  <span class="string">&#x27;new_slave_hosts=s&#x27;</span>  =&gt; \<span class="variable">$new_slave_hosts</span>,</span><br><span class="line">  <span class="string">&#x27;subject=s&#x27;</span>          =&gt; \<span class="variable">$subject</span>,</span><br><span class="line">  <span class="string">&#x27;body=s&#x27;</span>             =&gt; \<span class="variable">$body</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mailToContacts(<span class="variable">$smtp</span>,<span class="variable">$mail_from</span>,<span class="variable">$mail_user</span>,<span class="variable">$mail_pass</span>,<span class="variable">$mail_to</span>,<span class="variable">$subject</span>,<span class="variable">$body</span>);</span><br><span class="line"></span><br><span class="line">sub mailToContacts &#123;</span><br><span class="line">    my ( <span class="variable">$smtp</span>, <span class="variable">$mail_from</span>, <span class="variable">$user</span>, <span class="variable">$passwd</span>, <span class="variable">$mail_to</span>, <span class="variable">$subject</span>, <span class="variable">$msg</span> ) = @_;</span><br><span class="line">    open my <span class="variable">$DEBUG</span>, <span class="string">&quot;&gt; /tmp/monitormail.log&quot;</span></span><br><span class="line">        or die <span class="string">&quot;Can&#x27;t open the debug      file:$!\n&quot;</span>;</span><br><span class="line">    my <span class="variable">$sender</span> = new Mail::Sender &#123;</span><br><span class="line">        ctype       =&gt; <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>,</span><br><span class="line">        encoding    =&gt; <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">        smtp        =&gt; <span class="variable">$smtp</span>,</span><br><span class="line">        from        =&gt; <span class="variable">$mail_from</span>,</span><br><span class="line">        auth        =&gt; <span class="string">&#x27;LOGIN&#x27;</span>,</span><br><span class="line">        TLS_allowed =&gt; <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        authid      =&gt; <span class="variable">$user</span>,</span><br><span class="line">        authpwd     =&gt; <span class="variable">$passwd</span>,</span><br><span class="line">        to          =&gt; <span class="variable">$mail_to</span>,</span><br><span class="line">        subject     =&gt; <span class="variable">$subject</span>,</span><br><span class="line">        debug       =&gt; <span class="variable">$DEBUG</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sender</span>-&gt;MailMsg(</span><br><span class="line">        &#123;   msg   =&gt; <span class="variable">$msg</span>,</span><br><span class="line">            debug =&gt; <span class="variable">$DEBUG</span></span><br><span class="line">        &#125;</span><br><span class="line">    ) or <span class="built_in">print</span> <span class="variable">$Mail</span>::Sender::Error;</span><br><span class="line">    <span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do whatever you want here</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0;</span><br></pre></td></tr></table></figure>


<p>###12、测试<br>1.主库断电<br>2.主库断网<br>3.主库重启<br>4.主库关机<br>以上情况都测试过都能自动切换~<br>请看日志分析切换过程  </p>
<p>###13、主库模拟故障后的恢复  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172.16.2.99 app1]<span class="comment"># grep -i &quot;All other slaves should start&quot; manager.log </span></span><br><span class="line">Mon Apr 21 22:28:33 2014 - [info]  All other slaves should start replication from here. Statement should be: CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.16.115.102&#x27;</span>, MASTER_PORT=3306, MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000022&#x27;</span>, MASTER_LOG_POS=506716, MASTER_USER=<span class="string">&#x27;repl&#x27;</span>, MASTER_PASSWORD=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">[root@192.168.0.20 app1]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>然后再就得主库里执行下,再start slave ,然后就得主库就变为了新的主库的从库了。<br>记得看下show slave status\G;  </p>
<p>###14、报错记录总结<br>摘抄自google.</p>
<p>####报错记录1：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@data01 ~]<span class="comment"># masterha_check_repl--conf=/etc/masterha/app1.cnf</span></span><br><span class="line">Tue Apr 7 22:31:06 2015 - [warning] Global configuration file/etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Tue Apr 7 22:31:07 2015 - [info] Reading application default configuration from/etc/masterha/app1.cnf..</span><br><span class="line">Tue Apr 7 22:31:07 2015 - [info] Reading server configuration from/etc/masterha/app1.cnf..</span><br><span class="line">Tue Apr 7 22:31:07 2015 - [info] MHA::MasterMonitor version 0.56.</span><br><span class="line">Tue Apr 7 22:31:07 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/Server.pm,ln303]  Getting relay <span class="built_in">log</span> directory orcurrent relay logfile from replication table failed on192.168.52.130(192.168.52.130:3306)!</span><br><span class="line">Tue Apr 7 22:31:07 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm,ln424] Error happened on checking configurations.  at /usr/<span class="built_in">local</span>/share/perl5/MHA/ServerManager.pmline 315</span><br><span class="line">Tue Apr 7 22:31:07 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm,ln523] Error happened on monitoring servers.</span><br><span class="line">Tue Apr 7 22:31:07 2015 - [info] Got <span class="built_in">exit</span> code 1 (Not master dead).</span><br><span class="line"> </span><br><span class="line">MySQL Replication Health is NOT OK!</span><br><span class="line">[root@data01 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>解决办法：在192.168.52.130上面，vim /etc/my.cnf，在里面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relay-log=/home/data/mysql/binlog/mysql-relay-bin</span><br></pre></td></tr></table></figure>

<p>然后重启mysql，再去重新设置slave连接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">STOP SLAVE;</span><br><span class="line">RESET SLAVE;</span><br><span class="line">CHANGE MASTER TOMASTER_HOST=<span class="string">&#x27;192.168.52.129&#x27;</span>,MASTER_USER=<span class="string">&#x27;repl&#x27;</span>,MASTER_PASSWORD=<span class="string">&#x27;repl_1234&#x27;</span>,MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000178&#x27;</span>,MASTER_LOG_POS=459;</span><br><span class="line">START SLAVE;</span><br></pre></td></tr></table></figure>

<p>Ok，搞定了。</p>
<p>####报错记录2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@data01 perl]<span class="comment"># masterha_check_repl--conf=/etc/masterha/app1.cnf</span></span><br><span class="line">Thu Apr 9 00:54:32 2015 - [warning] Global configuration file/etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Thu Apr 9 00:54:32 2015 - [info] Reading application default configuration from/etc/masterha/app1.cnf..</span><br><span class="line">Thu Apr 9 00:54:32 2015 - [info] Reading server configuration from/etc/masterha/app1.cnf..</span><br><span class="line">Thu Apr 9 00:54:32 2015 - [info] MHA::MasterMonitor version 0.56.</span><br><span class="line">Thu Apr 9 00:54:32 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/Server.pm,ln306]  Getting relay <span class="built_in">log</span> directory orcurrent relay logfile from replication table failed on 192.168.52.130(192.168.52.130:3306)!</span><br><span class="line">Thu Apr 9 00:54:32 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm,ln424] Error happened on checking configurations.  at/usr/<span class="built_in">local</span>/share/perl5/MHA/ServerManager.pm line 315</span><br><span class="line">Thu Apr 9 00:54:32 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm,ln523] Error happened on monitoring servers.</span><br><span class="line">Thu Apr 9 00:54:32 2015 - [info] Got <span class="built_in">exit</span> code 1 (Not master dead).</span><br><span class="line"> </span><br><span class="line">MySQL Replication Health is NOT OK!</span><br><span class="line">[root@data01 perl]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>解决方法：<br>/etc/masterha/app1.cnf文件里面的参数配置，user和repl_user都是mysql账号，需要创建好，这里是只创建了repl_user而没有创建好user账号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user=manager</span><br><span class="line">password=manager_1234</span><br><span class="line">repl_user=repl</span><br><span class="line">repl_password=repl_1234</span><br></pre></td></tr></table></figure>

<p>在mysql节点上，建立允许manager 访问数据库的“ manager manager ”账户，主要用于SHOW SLAVESTATUS,RESET SLAVE; 所以需要执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT SUPER,RELOAD,REPLICATIONCLIENT,SELECT ON *.* TO manager@<span class="string">&#x27;192.168.52.%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;manager_1234&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>####错误记录3：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@oraclem1 ~]<span class="comment">#  masterha_check_repl--conf=/etc/masterha/app1.cnf</span></span><br><span class="line">Thu Apr 9 23:09:05 2015 - [warning] Global configuration file/etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Thu Apr 9 23:09:05 2015 - [info] Reading application default configuration from/etc/masterha/app1.cnf..</span><br><span class="line">Thu Apr 9 23:09:05 2015 - [info] Reading server configuration from/etc/masterha/app1.cnf..</span><br><span class="line">Thu Apr 9 23:09:05 2015 - [info] MHA::MasterMonitor version 0.56.</span><br><span class="line">Thu Apr 9 23:09:05 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/ServerManager.pm,ln781] Multi-master configuration is detected, but two or more masters areeither writable (read-only is not <span class="built_in">set</span>) or dead! Check configurations fordetails. Master configurations are as below:</span><br><span class="line">Master 192.168.52.130(192.168.52.130:3306),replicating from 192.168.52.129(192.168.52.129:3306)</span><br><span class="line">Master 192.168.52.129(192.168.52.129:3306),replicating from 192.168.52.130(192.168.52.130:3306)</span><br><span class="line"> </span><br><span class="line">Thu Apr 9 23:09:05 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm,ln424] Error happened on checking configurations.  at/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm line 326</span><br><span class="line">Thu Apr 9 23:09:05 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm,ln523] Error happened on monitoring servers.</span><br><span class="line">Thu Apr 9 23:09:05 2015 - [info] Got <span class="built_in">exit</span> code 1 (Not master dead).</span><br><span class="line"> </span><br><span class="line">MySQL Replication Health is NOT OK!</span><br><span class="line">[root@oraclem1 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global read_only=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>####报错记录4：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Thu Apr 9 23:54:32 2015 - [info] Checking SSH publickey authentication andchecking recovery script configurations on all alive slave servers..</span><br><span class="line">Thu Apr 9 23:54:32 2015 - [info]  Executing <span class="built_in">command</span> : apply_diff_relay_logs --<span class="built_in">command</span>=test--slave_user=<span class="string">&#x27;manager&#x27;</span> --slave_host=192.168.52.130 --slave_ip=192.168.52.130--slave_port=3306 --workdir=/var/tmp --target_version=5.6.12-log--manager_version=0.56 --relay_dir=/home/data/mysql/data--current_relay_log=mysqld-relay-bin.000011 --slave_pass=xxx</span><br><span class="line">Thu Apr 9 23:54:32 2015 - [info]  Connecting to root@192.168.52.130(192.168.52.130:22)..</span><br><span class="line">Can<span class="string">&#x27;t exec &quot;mysqlbinlog&quot;: No suchfile or directory at /usr/local/share/perl5/MHA/BinlogManager.pm line 106.</span></span><br><span class="line"><span class="string">mysqlbinlog version command failed with rc1:0, please verify PATH, LD_LIBRARY_PATH, and client options</span></span><br><span class="line"><span class="string"> at/usr/local/bin/apply_diff_relay_logs line 493</span></span><br><span class="line"><span class="string">Thu Apr 9 23:54:32 2015 - [error][/usr/local/share/perl5/MHA/MasterMonitor.pm,ln205] Slaves settings check failed!</span></span><br><span class="line"><span class="string">Thu Apr 9 23:54:32 2015 - [error][/usr/local/share/perl5/MHA/MasterMonitor.pm,ln413] Slave configuration failed.</span></span><br><span class="line"><span class="string">Thu Apr 9 23:54:32 2015 - [error][/usr/local/share/perl5/MHA/MasterMonitor.pm,ln424] Error happened on checking configurations.  at /usr/local/bin/masterha_check_repl line 48</span></span><br><span class="line"><span class="string">Thu Apr 9 23:54:32 2015 - [error][/usr/local/share/perl5/MHA/MasterMonitor.pm,ln523] Error happened on monitoring servers.</span></span><br><span class="line"><span class="string">Thu Apr 9 23:54:32 2015 - [info] Got exit code 1 (Not master dead).</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">MySQL Replication Health is NOT OK!</span></span><br><span class="line"><span class="string">[root@oraclem1 ~]#</span></span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@data02 ~]<span class="comment"># type mysqlbinlog</span></span><br><span class="line">mysqlbinlog is/usr/<span class="built_in">local</span>/mysql/bin/mysqlbinlog</span><br><span class="line">[root@data02 ~]<span class="comment">#</span></span><br><span class="line">[root@data02 ~]<span class="comment"># ln -s/usr/local/mysql/bin/mysqlbinlog /usr/bin/mysqlbinlog</span></span><br></pre></td></tr></table></figure>

<p>####报错记录5：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Thu Apr 9 23:57:24 2015 - [info]  Connecting to root@192.168.52.130(192.168.52.130:22)..</span><br><span class="line"> Checking slave recovery environment settings..</span><br><span class="line">   Relay <span class="built_in">log</span> found at /home/data/mysql/data, up to mysqld-relay-bin.000013</span><br><span class="line">   Temporary relay <span class="built_in">log</span> file is /home/data/mysql/data/mysqld-relay-bin.000013</span><br><span class="line">   Testing mysql connection and privileges..sh: mysql: <span class="built_in">command</span> not found</span><br><span class="line">mysql <span class="built_in">command</span> failed with rc 127:0!</span><br><span class="line"> at/usr/<span class="built_in">local</span>/bin/apply_diff_relay_logs line 375</span><br><span class="line">         main::check()called at /usr/<span class="built_in">local</span>/bin/apply_diff_relay_logs line 497</span><br><span class="line">         <span class="built_in">eval</span>&#123;...&#125; called at /usr/<span class="built_in">local</span>/bin/apply_diff_relay_logs line 475</span><br><span class="line">         main::main()called at /usr/<span class="built_in">local</span>/bin/apply_diff_relay_logs line 120</span><br><span class="line">Thu Apr 9 23:57:24 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm,ln205] Slaves settings check failed!</span><br><span class="line">Thu Apr 9 23:57:24 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm,ln413] Slave configuration failed.</span><br><span class="line">Thu Apr 9 23:57:24 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm,ln424] Error happened on checking configurations.  at /usr/<span class="built_in">local</span>/bin/masterha_check_repl line 48</span><br><span class="line">Thu Apr 9 23:57:24 2015 - [error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm,ln523] Error happened on monitoring servers.</span><br><span class="line">Thu Apr 9 23:57:24 2015 - [info] Got <span class="built_in">exit</span> code 1 (Not master dead).</span><br><span class="line"> </span><br><span class="line">MySQL Replication Health is NOT OK!</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/mysql/bin/mysql/usr/bin/mysql</span><br></pre></td></tr></table></figure>
<p>####报错记录6：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Fri Apr 10 00:58:36 2015 - [info]   Executing <span class="built_in">command</span> : apply_diff_relay_logs--command=<span class="built_in">test</span> --slave_user=<span class="string">&#x27;manager&#x27;</span> --slave_host=192.168.52.130--slave_ip=192.168.52.130 --slave_port=3306 --workdir=/var/tmp--target_version=5.6.12-log --manager_version=0.56--relay_dir=/home/data/mysql/data--current_relay_log=mysqld-relay-bin.000011 --slave_pass=xxx</span><br><span class="line">Fri Apr 10 00:58:36 2015 - [info]   Connecting to root@192.168.52.130(192.168.52.130:22)..</span><br><span class="line"> Checking slave recovery environment settings..</span><br><span class="line">   Relay <span class="built_in">log</span> found at /home/data/mysql/data, up to mysqld-relay-bin.000013</span><br><span class="line">   Temporary relay <span class="built_in">log</span> file is/home/data/mysql/data/mysqld-relay-bin.000013</span><br><span class="line">   Testing mysql connection and privileges..Warning: Using a password onthe <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">ERROR 1142 (42000) at line 1: CREATEcommand denied to user <span class="string">&#x27;manager&#x27;</span>@<span class="string">&#x27;192.168.52.130&#x27;</span> <span class="keyword">for</span> table<span class="string">&#x27;apply_diff_relay_logs_test&#x27;</span></span><br><span class="line">mysql <span class="built_in">command</span> failed with rc 1:0!</span><br><span class="line"> at/usr/<span class="built_in">local</span>/bin/apply_diff_relay_logs line 375</span><br><span class="line">         main::check()called at /usr/<span class="built_in">local</span>/bin/apply_diff_relay_logs line 497</span><br><span class="line">         <span class="built_in">eval</span>&#123;...&#125; called at /usr/<span class="built_in">local</span>/bin/apply_diff_relay_logs line 475</span><br><span class="line">         main::main()called at /usr/<span class="built_in">local</span>/bin/apply_diff_relay_logs line 120</span><br><span class="line">Fri Apr 10 00:58:37 2015 -[error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm, ln205] Slaves settingscheck failed!</span><br><span class="line">Fri Apr 10 00:58:37 2015 -[error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm, ln413] Slave configurationfailed.</span><br><span class="line">Fri Apr 10 00:58:37 2015 -[error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm, ln424] Error happened onchecking configurations.  at/usr/<span class="built_in">local</span>/bin/masterha_check_repl line 48</span><br><span class="line">Fri Apr 10 00:58:37 2015 -[error][/usr/<span class="built_in">local</span>/share/perl5/MHA/MasterMonitor.pm, ln523] Error happened onmonitoring servers.</span><br><span class="line">Fri Apr 10 00:58:37 2015 - [info] Got exitcode 1 (Not master dead).</span><br><span class="line"> </span><br><span class="line">MySQL Replication Health is NOT OK!</span><br></pre></td></tr></table></figure>

<p>解决办法：<br>执行如下授权语句sql：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT CREATE,INSERT,UPDATE,DELETE,DROP ON*.* TO manager@<span class="string">&#x27;192.168.52.%&#x27;</span>;</span><br></pre></td></tr></table></figure>


<p>####其他<br>另外，如果nohup masterha_manager执行不了，请检查master和slave是否配置正确。可以通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">change master to master_host=<span class="string">&#x27;172.16.115.101&#x27;</span>,master_port=3306,master_user=<span class="string">&#x27;repl&#x27;</span>,master_password=<span class="string">&#x27;123456&#x27;</span>,master_log_file=<span class="string">&#x27;mysql-bin.000001&#x27;</span>,MASTER_LOG_POS=0;</span><br></pre></td></tr></table></figure>

<p>重新设置slave。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql MHA</tag>
      </tags>
  </entry>
</search>
